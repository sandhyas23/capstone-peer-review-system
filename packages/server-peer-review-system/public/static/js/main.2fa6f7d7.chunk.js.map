{"version":3,"sources":["student/taskSubmit.js","student/taskReview.js","student/viewSubmission.js","student/viewReviewed.js","externalLinks.js","student/studentView.js","teacher/viewTask.js","teacher/createReviewTask.js","teacher/studentSubmissionSummary.js","teacher/studentReviewSummary.js","teacher/teacherView.js","app.js","index.js"],"names":["TaskSubmit","props","handleFile","e","a","reader","FileReader","file","target","files","value","length","onloadend","setState","content","result","fileName","name","readAsText","state","currentTask","submissions","netId","theInputKey","Prism","highlightAll","_this","this","fetch","method","headers","then","response","json","data","studentSubmission","find","element","index","array","Cookies","get","alert","onclickLogout","addTask","submittedOn","Date","toISOString","findIndex","task","body","JSON","stringify","splice","push","randomString","Math","random","toString","submissionStatus","submittedDate","taskSubmitted","toLocaleString","markdownInstruction","rawHtml","id","className","source","Grid","Row","Column","computer","Segment","style","boxShadow","Label","ribbon","icon","color","Header","textAlign","as","Icon","Form","centered","Group","widths","Field","inline","Input","readOnly","basic","overflow","minHeight","maxHeight","maxWidth","minWidth","TextArea","type","accept","onChange","key","Button","onClick","handleSubmit","disabled","React","Component","TaskReview","handleChange","rubrics","studentsReview","reviews","totalQuestions","reviewTasks","studentAssignment","totalRubricsToReview","rubric","rubricName","map","ind","arr","prevProps","prevState","event","review","submission","item","rubric_task","reviewNo","filter","parseInt","totalPoints","i","reviewToPost","reviewTask","rawHtml1","reviewsToPost","isEnabled","count","undefined","currentReview","currentStudent","student","Menu","Item","active","handleItemClick","Dropdown","generalInstructionmarkdown","generalInstruction","tableBody","Table","Cell","questionsToDisplay","tag","label","placeholder","width","min","max","required","afterHandleChange","stackable","Modal","trigger","Content","scrolling","Description","HeaderCell","Body","columns","celled","pointing","secondary","button","text","labeled","floating","viewContent","ViewSubmission","mySubmission","ViewReviewed","comment","ExternalLinks","padding","Rail","internal","position","attached","top","height","Sticky","window","open","marginLeft","StudentView","submissionTasks","mode","firstName","lastName","viewMode","onlogoutClick","openSubmissionTaskItems","taskDue","getTime","handleOpenSubmissionItemClick","openReviewTaskItems","handleOpenReviewItemClick","circular","inverted","closedSubmissionTaskItems","handleClosedSubmissionItemClick","closedReviewTaskItems","handleClosedReviewItemClick","Sidebar","animation","direction","visible","vertical","fixed","Container","header","margin-right","marginTop","padded","handleViewComponent","ViewTask","createdTask","console","log","fluid","CreateReviewTask","handleChanges","assignTask","num","sortFunc","shuffle","j","floor","temp","b","currentSubmissions","selectedReview","numReviews","ordering","assignments","submitterId","assignInfo","reviewers","Set","reviewerID","reviewInfo","reviewees","assignment","increment","size","trial","toBeReview","add","whoToReview","sort","newAssignments","assignedReviewers","Array","from","assignedReviewees","assignmentsOfStudents","selectedType","instructions","dueDate","rubricIds","isSubmitted","submissionTask","due","update","viewHome","studentAssignments","studentsAssignment","lastElement","rubricCount","indexOf","handleRubricChange","addRubrics","deleteRubrics","displayAssignments","transparent","viewStudents","colSpan","options","reviewTasksDisplayed","len","taskType","marginRight","align","Select","selected","date","showTimeSelect","timeFormat","timeIntervals","dateFormat","displayRubrics","display","StudentSubmissionSummary","handleCancel","handleConfirm","taskIndex","arry","currentSTask","specificSubmissions","isDeleted","isEdited","handleDeleteSubmission","cookies","clickedStudentIndex","students","handleClick","handleEditTask","handleDeleteTask","Confirm","onCancel","onConfirm","StudentReviewSummary","handleEachChange","currentRTask","specAssignments","specificReviews","specSubmissions","reviewDetails","reviewRubric","teacherRubrics","isTaskEdited","isSaved","negative","viewReviews","studentAssign","reviewIndex","editedReviews","criteriaMarkdown","criteriaHighlighted","submittersSet","studentsSubmissions","viewPoints","reviewerIds","handleReviewClick","highlightedInstruction","handleEditOneReview","handleEditTaskDetails","viewContents","handleEditReviews","handleSaveReviews","TeacherView","_isMounted","currentSubmissionTask","currentReviewTask","updateArray","bind","handleHomeClick","createdTasks","handleSubmissionTaskClick","createdReview","handleReviewTaskClick","handleCreateTaskClick","App","gotCookie","role","password","message","loginDetails","verticalAlign","stacked","iconPosition","login","Message","logout","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2fa6f7d7.chunk.js","sourcesContent":["/*This component is rendered when a student clicks a task to\nupload a submission for an assigment*/\n\nimport React from 'react';\nimport Prism from 'prismjs';\nimport ReactCommonmark from 'react-commonmark';\n//import submissions from '../data/submissionsHw';\nimport 'prismjs/themes/prism-coy.css';\nimport {Grid,Segment,Header,Label,Icon,Form,Input,TextArea,Button} from \"semantic-ui-react\";\nimport Cookies from \"universal-cookie\";\n\n\n\n\nexport default class TaskSubmit extends React.Component{\n    constructor(props){\n        super(props);\n        this.state ={currentTask: this.props.currentTask , submissions:[], netId: this.props.netId,\n            \"assignment-name\":this.props.currentTask[\"task-name\"], content:\"Upload a markdown file to view the submission\",\n            theInputKey: \"\", fileName:\"\"}\n        //// console.log(this.state.newTask);\n    }\n\n    // called when a prop changed to return a new state\n    static getDerivedStateFromProps(props, state){\n        //// console.log(props,state);\n        if(props.currentTask === state.currentTask){\n            return null;\n        }\n        else {\n           // find if the student has already submitted an assignment.\n            // Get the content and set the state\n            let studentSubmission = state.submissions.find((element,index,array)=>{\n                return element[\"assignment-name\"] === props.currentTask[\"task-name\"];\n            });\n            //// console.log(\"cc\",studentSubmission);\n\n                if (typeof studentSubmission !== \"undefined\") {\n                    let randomString = Math.random().toString(36);\n\n                    let content = studentSubmission.content;\n                    let fileName = studentSubmission.fileName;\n                    //_this.setState({\"submissions\": _this.state.submissions, \"content\": content});\n                    return {\n                        currentTask: props.currentTask, \"assignment-name\": props.currentTask[\"task-name\"],\n                        content: content,\n                        fileName: fileName,\n                        theInputKey: randomString\n                    }\n                } else {\n                    let randomString = Math.random().toString(36);\n\n                    return {\n\n                        currentTask: props.currentTask, \"assignment-name\": props.currentTask[\"task-name\"],\n                        content: \"Upload a markdown file to view the submission\",\n                        fileName: \"\",\n                        theInputKey: randomString\n                    }\n                }\n            }\n    }\n\n\n    componentDidUpdate() {\n        Prism.highlightAll();\n\n    }\n\n    // Get the submissions of a particular student and set in state to display initially\n    componentDidMount() {\n        let _this = this;\n        fetch('/submissions/student/'+this.state.netId,{\n            method: \"GET\",\n            headers : {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        }).then(response => response.json()).then(function(data) {\n\n            let studentSubmission = data.submissions.find((element,index,array)=>{\n                return element[\"assignment-name\"] === _this.state.currentTask[\"task-name\"];\n            })\n\n            //// console.log(\"this is what we got in task submit\" +data.submissions);\n            //_this.state.submissions.push(data.submission);\n            if(typeof studentSubmission !== \"undefined\"){\n                _this.setState({\"submissions\": data.submissions,\"content\":studentSubmission[\"content\"],\n                    \"fileName\":studentSubmission[\"fileName\"]});\n\n            }\n            else{\n                _this.setState({\"submissions\":data.submissions});\n            }\n\n        });\n\n\n        Prism.highlightAll();\n    }\n\n\n    // function to handle submit button when clicked\n    handleSubmit() {\n        const cookies = new Cookies();\n        //const gotCookie =cookies.get('user');\n        if (typeof cookies.get('user') === \"undefined\") {\n            alert(\"session expired\");\n            this.props.onclickLogout()\n        } else {\n            const _this = this;\n            const addTask = {\n                \"assignment-name\": this.state[\"assignment-name\"], netId: this.state.netId,\n                content: this.state.content, fileName: this.state.fileName, submittedOn: new Date().toISOString()\n            };\n\n            // if already submitted, replace the submission\n            let index = this.state.submissions.findIndex((task) => {\n                return (task[\"assignment-name\"] === this.state[\"assignment-name\"] && task[\"netId\"] === this.state.netId);\n            });\n\n            if (index >= 0) {\n                fetch('/submissions/' + this.state[\"assignment-name\"] + '/student/' + this.state.netId, {\n                    method: 'PUT',\n                    headers: {\n                        \"Content-type\": \"application/json\"\n                    },\n                    body: JSON.stringify(addTask)\n                }).then(function (response) {\n                    _this.state.submissions.splice(index, 1, addTask);\n                    _this.setState({\n                        submissions: _this.state.submissions\n                    });\n                    //// console.log(\"submitted\",this.state.submissions);\n                    //_this.props.update();\n                    //event.preventDefault();\n                });\n\n            }\n            // if not submiited, add a new submission\n            else {\n                fetch('/submissions/' + this.state[\"assignment-name\"] + '/student/' + this.state.netId, {\n                    method: 'PUT',\n                    headers: {\n                        \"Content-type\": \"application/json\"\n                    },\n                    body: JSON.stringify(addTask)\n                }).then(function (response) {\n                    _this.state.submissions.push(addTask);\n                    let randomString = Math.random().toString(36);\n                    // reset the filename to null\n                    _this.setState({\n                        submissions: _this.state.submissions,\n                        theInputKey: randomString\n\n                    });\n                    //// console.log(\"submitted\",this.state.submissions);\n                    //// console.log(this.state.submissions);\n                    // _this.props.update();\n                    //event.preventDefault();\n                });\n            }\n            //// console.log(this.state.submissions);\n        }\n    }\n\n// handle the upload button when clicked. Read the markdown file and save it in the state\n    handleFile = async(e) => {\n\n        let reader = new FileReader();\n        let file = e.target.files[0];\n\n        if (e.target.value.length !== 0) {\n            reader.onloadend = async (e) => {\n                // The file's text will be printed here\n\n                this.setState({content: e.target.result, fileName: file.name});\n                //// console.log(this.state.content);\n            };\n\n            reader.readAsText(file);\n        }\n        else{\n            this.setState({content: this.state.content, fileName: this.state.fileName});\n        }\n    }\n\n\n\n        render(){\n        // console.log(\"state\", this.state);\n\n        // Get the submission time\n        let submissionStatus =\"\";\n        let submittedDate =\"\";\n        let taskSubmitted = this.state.submissions.find((task,index,array) => {\n            return (task[\"assignment-name\"] === this.state[\"assignment-name\"] && task[\"netId\"] === this.state.netId);\n            });\n        if(typeof taskSubmitted === \"undefined\"){\n             submissionStatus = \"Not Submitted\";\n        }\n        else{\n             submissionStatus = \"Submitted\";\n             submittedDate = new Date(taskSubmitted[\"submittedOn\"]).toLocaleString();\n        }\n\n        // Convert the markdown submission to highlighted syntax to display preview\n        const markdownInstruction = this.state.content;\n        const rawHtml = <div id=\"rawHtml\" className=\"language-html\">\n            <ReactCommonmark source={markdownInstruction} />\n        </div>\n\n\n        //// console.log(\"rawhtml\",rawHtml);\n            // Display details in page grid view\n        return<Grid.Row>\n           <Grid.Column computer={14}>\n            <Grid.Row>\n\n                    <Segment style={{boxShadow:\"none\"}}>\n\n                        <Label ribbon icon='star' content={`${submissionStatus} : ${submittedDate}`} color=\"blue\"/>\n                        <span><Header  textAlign={\"center\"} as={\"h4\"}>\n                            <Icon name='tag'/>\n                            {this.state.currentTask[\"task-name\"]}\n                        </Header>\n                        </span>\n\n                    </Segment>\n\n            </Grid.Row>\n\n            <Grid.Row >\n\n                <Grid.Column>\n                    <Form centered={\"true\"}>\n                        <Segment textAlign={\"center\"}>\n                        <Form.Group centered={\"true\"} widths='equal'>\n                            <Form.Field inline >\n                                <Label icon='calendar alternate' content=\"Due\"/>\n                                <Input readOnly>{new Date(this.state.currentTask[\"due\"]).toLocaleString()}</Input>\n                            </Form.Field>\n                            <Form.Field inline>\n                                <Label icon='lock open' content=\"Status\"/>\n\n                                <Input readOnly style={{color:\"green\"}}>Open</Input>\n                            </Form.Field>\n                        </Form.Group>\n                            <Form.Group centered={\"true\"} widths='equal'>\n                                <Form.Field>\n                                    <Label icon='file code' content=\"Markdown Preview \"/>\n                                    <Label basic>\n                                        <Icon name={'file'}/>\n                                        Filename : {this.state.fileName}\n                                    </Label>\n                                    <Segment style={{overflow: 'auto',minHeight:330,maxHeight:330,maxWidth:600,minWidth:200 }} >\n\n                                    <TextArea readOnly style={{ minHeight: 300, minWidth:200, }}\n                                              name={\"content\"}\n                                              value={this.state.content}\n                                              // onChange={(event)=> this.handleChange(event)}\n                                    />\n                                    </Segment>\n                                </Form.Field>\n                                <Form.Field>\n                                    <Label icon='code' content=\"Code Preview\"/>\n                                    <Segment style={{overflow: 'auto',minHeight:330,maxHeight:330,maxWidth:600,minWidth:200 }}\n                                             textAlign=\"left\">\n                                            {rawHtml}\n                                    </Segment>\n\n                                </Form.Field>\n                            </Form.Group>\n                            <input type=\"file\" accept=\".md\" onChange={ (e) => this.handleFile(e) }\n                                   key={this.state.theInputKey}\n                            />\n\n                            <Button icon='file' content='Submit' type={\"button\"} color={\"green\"}\n                                     onClick={() =>this.handleSubmit()}\n                            disabled={this.state.content === \"Upload a markdown file to view the submission\"}/>\n                        </Segment>\n\n                    </Form>\n\n                </Grid.Column>\n\n            </Grid.Row>\n        </Grid.Column>\n        </Grid.Row>\n\n\n    }\n}\n","/*This component is rendered when a student clicks a task to review peers*/\n\n\nimport React from 'react';\nimport {Button, Form, Grid, Header, Icon, Input, Label, Segment, Menu, Modal, Table, Dropdown} from \"semantic-ui-react\";\n// import studentsReview from \"../data/reviewTasksStudents\";\n// import studentAssignment from '../data/studentAssignment';\n// import submissions from '../data/submissionsHw';\nimport 'prismjs/themes/prism-coy.css';\nimport Prism from \"prismjs\";\nimport ReactCommonmark from \"react-commonmark\";\nimport Cookies from \"universal-cookie\";\n\n\n\nexport default class TaskReview extends React.Component{\n    constructor(props){\n        super(props);\n        this.state ={currentTask: this.props.currentTask , studentsReview:this.props.reviews, netId: this.props.netId,\n            \"assignment-name\":this.props.currentTask[\"peer-review-for\"],content:\"Click a review link to view the submission\",\n            totalQuestions:[],\n            reviewTasks:this.props.reviewTasks,\n            studentAssignment:this.props.studentAssignment,\n            submissions:this.props.submissions,\n            totalRubricsToReview:[],\n            rubric:[],\n            rubricName:\"\"}\n            //// console.log(this.state);\n    }\n\n    // called when a prop changed to return a new state\n    static getDerivedStateFromProps(props,state){\n        if(props.currentTask === state.currentTask){\n            return null;\n        }\n        else {\n                return {\n                    currentTask: props.currentTask, \"assignment-name\": props.currentTask[\"peer-review-for\"],\n                    content:\"Click a review link to view the submission\",\n                    reviewTasks:props.reviewTasks,\n                    studentAssignment:props.studentAssignment,\n                    submissions:props.submissions,\n                }\n            }\n    }\n\n\n    // Get the reviews of a particular student and set in state to display initially\n    componentDidMount() {\n        let _this = this;\n        fetch('/reviews/' + this.state[\"assignment-name\"] + '/reviewer/' + this.state.netId, {\n            method: \"GET\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        }).then(response => response.json()).then(function (data) {\n\n            //// console.log(\"this is what we got in task submit\" + data.reviews);\n            //_this.state.submissions.push(data.submission);\n            const reviewerReviews = data.reviews;\n           // // console.log(\"reviewerReviews\", reviewerReviews);\n\n            //Get all review details and set in state initially to display\n            let foundElements = reviewerReviews.map((element, index, array) => {\n                _this.setState({rubric:element[\"review\"][\"rubric\"]});\n                return [element[\"review\"][\"rubric\"].map((rubric, ind, arr) => {\n                    return _this.setState({\n                        [`pointGiven${element[\"reviewer-id\"]}${element[\"submitter-id\"]}${rubric[\"rubric-name\"]}`]:\n                            rubric[\"points-given\"],\n                        [`comment${element[\"reviewer-id\"]}${element[\"submitter-id\"]}${rubric[\"rubric-name\"]}`]:\n                            rubric[\"comments\"],\n\n                    })\n                }), _this.setState({[`submittedOn${element[\"submitter-id\"]}${element[\"reviewer-id\"]}`]:element[\"submittedOn\"]})]\n\n                // _this.setState({\"submissions\":data.reviews});\n\n            });\n        });\n        Prism.highlightAll();\n    }\n\n\n    // Get the reviews of a particular student and set in state to display when a different review task is clicked\n    componentDidUpdate(prevProps,prevState) {\n\n        if (prevState[\"assignment-name\"] !== this.state[\"assignment-name\"]) {\n\n            let _this = this;\n            fetch('/reviews/' + this.state[\"assignment-name\"] + '/reviewer/' + this.state.netId, {\n                method: \"GET\",\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json'\n                }\n            }).then(response => response.json()).then(function (data) {\n\n                //// console.log(\"this is what we got in task submit\" + data.reviews);\n                //_this.state.submissions.push(data.submission);\n                const reviewerReviews = data.reviews;\n               // // console.log(\"reviewerReviews\", reviewerReviews);\n\n                // get all review points and comments and set in state to display\n                let foundElements = reviewerReviews.map((element, index, array) => {\n                    _this.setState({rubric: element[\"review\"][\"rubric\"]});\n                    return [element[\"review\"][\"rubric\"].map((rubric, ind, arr) => {\n                        return _this.setState({\n                            [`pointGiven${element[\"reviewer-id\"]}${element[\"submitter-id\"]}${rubric[\"rubric-name\"]}`]:\n                                rubric[\"points-given\"],\n                            [`comment${element[\"reviewer-id\"]}${element[\"submitter-id\"]}${rubric[\"rubric-name\"]}`]:\n                                rubric[\"comments\"],\n\n                        })\n                    }), _this.setState({[`submittedOn${element[\"submitter-id\"]}${element[\"reviewer-id\"]}`]: element[\"submittedOn\"]})]\n\n                    // _this.setState({\"submissions\":data.reviews});\n\n                });\n\n            });\n\n        }\n        Prism.highlightAll();\n    }\n\n\n    // function to display the review a student screen when a submitter id is clicked\n    handleItemClick(event, review){\n\n        // Get the submission content of a submitter to be reviewed\n        let content = \"\";\n        let submission = this.state.submissions.find((element,index,array)=>{\n            return element[\"assignment-name\"] === this.state[\"assignment-name\"] && element[\"netId\"] === review;\n        });\n        if(typeof submission !== \"undefined\"){\n            content = submission[\"content\"];\n        }\n        // get all rubrics to review for the clicked task\n        let totalRubricsToReview = this.state.currentTask[\"rubric\"];\n       // // console.log(\"content when clicked\",submission[\"content\"]);\n\n\n            //Display all rubrics to be reviewed. Get points and comments values from state and display it .\n\n            let displayRubrics = this.state.totalRubricsToReview.map((item,index,array)=> {\n                 if (this.state[`pointGiven${this.state.netId}${review}${item[\"rubric-name\"]}`] &&\n                    this.state[`comment${this.state.netId}${review}${item[\"rubric-name\"]}`]) {\n                    // console.log(\"inside if....\");\n                    let rubric_task = {\n                        \"rubric-name\": item[\"rubric-name\"],\n                        \"possible-points\": item[\"points\"],\n                        \"points-given\": this.state[`pointGiven${this.state.netId}${review}${item[\"rubric-name\"]}`],\n                        \"comments\": this.state[`comment${this.state.netId}${review}${item[\"rubric-name\"]}`],\n                    };\n\n                     this.state.rubric.splice(index,1,rubric_task);\n                     // console.log(\"spliced array\",this.state.rubric);\n\n\n                }\n            });\n\n\n        // update the rubrics , submitter id and the submission content to state\n            this.setState({rubric:this.state.rubric,reviewNo:review,totalRubricsToReview:totalRubricsToReview,\n                content: content\n            });\n        //// console.log(\"state after \",this.state.content,this.state.rubric);\n    }\n\n\n    // function to handle input change\n    handleChange = async(e,rubrics,index) =>{\n\n        const target = e.target;\n        const value = target.value;\n        const name = target.name;\n       // // console.log(\"event:\",e, \"target\",target);\n\n\n        this.setState({\n            [name]:value\n        });\n\n\n    }\n\n    // function to handle points and comments input\n    afterHandleChange(e,rubrics,index){\n        // save the entered/changed details in state first\n        this.handleChange(e,rubrics,index).then(()=> {\n\n            let rubric_task = {\n                \"rubric-name\": rubrics[\"rubric-name\"],\n                \"possible-points\": rubrics[\"points\"],\n                \"points-given\": this.state[`pointGiven${this.state.netId}${this.state.reviewNo}${rubrics[\"rubric-name\"]}`],\n                \"comments\": this.state[`comment${this.state.netId}${this.state.reviewNo}${rubrics[\"rubric-name\"]}`],\n            }\n            //update the state values in the rubric array\n            this.state.rubric.splice(index, 1, rubric_task);\n            this.setState({\n                rubric: this.state.rubric, rubricName: rubrics[\"rubric-name\"],\n                \"possible-points\": rubrics[\"points\"]\n            });\n        });\n\n    }\n\n\n// function to handle submit button of reviews\n    handleSubmit(event) {\n        const cookies = new Cookies();\n        //const gotCookie =cookies.get('user');\n        if (typeof cookies.get('user') === \"undefined\") {\n            alert(\"session expired\");\n            this.props.onclickLogout()\n        } else {\n\n            let unacceptedPoints = this.state[\"rubric\"].filter((element,index,array)=>{\n                return parseInt(element[\"points-given\"] )> parseInt(element[\"possible-points\"]) ||\n                    parseInt(element[\"points-given\"]) < 0\n            });\n            if(unacceptedPoints.length > 0){\n                alert(\"Given points not valid. Please change them\");\n            }\n            else {\n                // get total points for each review\n                let totalPoints = 0;\n                for (let i = 0; i < this.state.rubric.length; i++) {\n                    totalPoints += parseInt(this.state.rubric[i][\"points-given\"]);\n                }\n\n                // find if a review has been posted already for the submitter\n                let reviewToPost = this.state.studentsReview.findIndex((element, index, array) => {\n                    return (element[\"assignment-name\"] === this.state[\"assignment-name\"] &&\n                        element[\"reviewer-id\"] === this.state.netId && element[\"submitter-id\"] === this.state.reviewNo);\n                });\n                //// console.log(\"length\", reviewToPost[\"tasksToReview\"]);\n\n                // if review not submitted, create a new review object and update in database and array\n                if (reviewToPost === -1) {\n                    // console.log(\"inside if\");\n                    let reviewTask = {\n                        \"reviewerId\": this.state.netId, \"submitter-id\": this.state.reviewNo,\n                        \"assignment-name\": this.state[\"assignment-name\"], review: {\n                            \"general-comments\": \"\", rubric: this.state.rubric,\n                            \"total-points\": totalPoints\n                        }\n                    };\n\n                    const _this = this;\n                    fetch('/reviews/' + this.state[\"assignment-name\"] + '/reviewer/' + this.state.netId + '/submitter/' + this.state.reviewNo\n                        , {\n                            method: 'PUT',\n                            headers: {\n                                \"Content-type\": \"application/json\"\n                            },\n                            body: JSON.stringify(reviewTask)\n                        }).then(function (response) {\n                        _this.state.studentsReview.push(reviewTask);\n                        _this.setState({\n                            studentsReview: _this.state.studentsReview,\n                            [`submittedOn${_this.state.reviewNo}${_this.state.netId}`]: new Date()\n                        });\n                        alert(\"submitted review for this submitter\");\n                        // console.log(\"submitted\", _this.state.studentsReview);\n                    });\n\n\n                }\n\n                // if review already submitted, update the submitted review in the array and database\n                else {\n                    let reviewTask = {\n                        \"reviewerId\": this.state.netId,\n                        \"submitter-id\": this.state.reviewNo,\n                        \"assignment-name\": this.state[\"assignment-name\"],\n                        review: {\"general-comments\": \"\", rubric: this.state.rubric},\n                        \"total-points\": totalPoints\n                    };\n\n                    const _this = this;\n                    fetch('/reviews/' + this.state[\"assignment-name\"] + '/reviewer/' + this.state.netId + '/submitter/' + this.state.reviewNo\n                        , {\n                            method: 'PUT',\n                            headers: {\n                                \"Content-type\": \"application/json\"\n                            },\n                            body: JSON.stringify(reviewTask)\n                        }).then(function (response) {\n                        _this.state.studentsReview.splice(reviewToPost, 1, reviewTask);\n                        //_this.state.studentsReview.push(reviewTask);\n                        _this.setState({\n                            studentsReview: _this.state.studentsReview,\n                            [`submittedOn${_this.state.reviewNo}${_this.state.netId}`]: new Date()\n                        });\n                        // console.log(\"submitted\", _this.state.studentsReview);\n                        alert(\"submitted review for this submitter\");\n                    });\n                }\n            }\n\n        }\n    }\n\n\n       // function to display the submission content in highlighted form\n    viewContent(){\n        const markdownInstruction = this.state.content;\n        const rawHtml1 = <div id=\"rawHtml\" className=\"language-html\">\n            <ReactCommonmark source={markdownInstruction} />\n        </div>\n        return <Segment style={{overflow: 'auto',minHeight:330,maxHeight:330,maxWidth:500,minWidth:200 }}\n                        textAlign=\"left\">\n\n            {rawHtml1}\n        </Segment>\n    }\n\n    // render function to display\n    render(){\n\n        // Condition to check if all fields are filled before submit or disable submit button\n        let isEnabled = true;\n        let count =this.state.totalRubricsToReview.length;\n        for(let i=0 ; i<this.state.totalRubricsToReview.length;i++){\n            if(this.state.rubric[i]){\n               // // console.log(\"inside this noe\")\n                //// console.log(\"comments\",this.state.rubric[i][\"comments\"] )\n                if(this.state.rubric[i][\"points-given\"] === undefined ||  this.state.rubric[i][\"comments\"] === undefined){\n                    //// console.log(\"comments\",this.state.rubric[i][\"comments\"] )\n                    isEnabled=false\n                }\n            }\n            else{\n                isEnabled =false;\n            }\n        }\n        if(count !== this.state.totalRubricsToReview.length){\n            isEnabled =false\n        }\n\n\n\n        let reviewsToPost;\n       // // console.log(\"content in state\", this.state);\n\n\n       //Get all students for which the reviewer needs to submit reviews without displaying the id or name\n        let currentReview = this.state.studentAssignment.find((review,index,array)=>{\n                return review[\"peer-review-for\"] === this.state[\"assignment-name\"];\n            });\n\n         if(typeof currentReview !== \"undefined\") {\n             let currentStudent = currentReview[\"studentsAssignment\"].find((student, index, array) => {\n                 //// console.log(\"student\",student[\"student\"] === this.state.netId);\n                 return student[\"student\"] === this.state.netId;\n             });\n              if(typeof currentStudent !== \"undefined\"){\n                  //// console.log(\"inside kkkk\");\n                  if(this.state.studentAssignment.length < 4){\n                      reviewsToPost = currentStudent[\"reviewees\"].map((review, index, array) => {\n\n                          //Display all reviews to be submitted in a menu\n                          return <Menu.Item\n                              name={`Review${index}`}\n                              active={review === this.state.reviewNo}\n                              as='a'\n                              onClick={(event) => this.handleItemClick(event, review)}\n                              key={`Review${review}${index}`}\n                          >\n                              {`Review${index}`}\n                          </Menu.Item>\n                      });\n                  }\n                  else{\n                      reviewsToPost = currentStudent[\"reviewees\"].map((review, index, array) => {\n                          return <Dropdown.Item\n                              name={`Review${index}`}\n                              active={review === this.state.reviewNo}\n                              as='a'\n                              onClick={(event) => this.handleItemClick(event, review)}\n                              key={`Review${review}${index}`}\n                          >\n                              {`Review${index}`}\n                          </Dropdown.Item>\n                      });\n                  }\n\n              }\n\n         }\n         else{\n             return \"nothing to display\"\n         }\n\n\n         // Display the general rubrics to follow for this assignment\n        const generalInstructionmarkdown = this.state.currentTask[\"instructions\"];\n        const generalInstruction = <div id=\"rawHtml\" className=\"language-html\">\n            <ReactCommonmark source={generalInstructionmarkdown} />\n        </div>\n\n        // display other rubrics to follow in a table\n        let tableBody = this.state.currentTask[\"rubric\"].map((item,index,array)=>{\n            const markdownInstruction = item[\"criteria\"];\n            const rawHtml = <div id=\"rawHtml\" className=\"language-html\">\n                <ReactCommonmark source={markdownInstruction} />\n            </div>\n            return <Table.Row key={`row${item[\"rubric-name\"]}${index}`}>\n                <Table.Cell key={`points${item[\"rubric-name\"]}${index}`}>{item[\"points\"]}</Table.Cell>\n                <Table.Cell key={`rubric${item[\"rubric-name\"]}${index}`}>{item[\"rubric-name\"]}</Table.Cell>\n                <Table.Cell key={`criteria${item[\"rubric-name\"]}${index}`}>{rawHtml}</Table.Cell>\n            </Table.Row>\n        });\n\n\n        // Input review details(points and comments) for each rubric for a student\n        let questionsToDisplay =  this.state.totalRubricsToReview.map((rubric,index,array)=>{\n            return <Form.Group key={`rubric${rubric[\"rubric-name\"]}${index}`}>\n                <Label tag content={rubric[\"rubric-name\"]}/>\n                <Label content={rubric[\"points\"]} />\n                <Form.Input name={`pointGiven${this.state.netId}${this.state.reviewNo}${rubric[\"rubric-name\"]}`}\n                            type= 'number'\n                            label='Points'\n                            placeholder='Points' width={4} min=\"0\" max={rubric[\"points\"]}\n                            required\n                            onChange={(e)=>this.afterHandleChange(e,rubric,index)}\n                            key={`pointGiven${this.state.netId}${this.state.reviewNo}${rubric[\"rubric-name\"]}`}\n                            value ={this.state[`pointGiven${this.state.netId}${this.state.reviewNo}${rubric[\"rubric-name\"]}`] || \"\"}/>\n                <Form.Input name={`comment${this.state.netId}${this.state.reviewNo}${rubric[\"rubric-name\"]}`}\n                            required label='Comments' placeholder='comments' width={10}\n                            onChange={(e)=>this.afterHandleChange(e,rubric,index)} key={`comment${this.state.netId}${this.state.reviewNo}${rubric[\"rubric-name\"]}`}\n                            value = {this.state[`comment${this.state.netId}${this.state.reviewNo}${rubric[\"rubric-name\"]}`] || \"\"} />\n\n            </Form.Group>\n        });\n\n\n\n        return <Grid  stackable>\n\n            <Grid.Column>\n               {/*Row for task name*/}\n                    <Grid.Row>\n\n                        <Segment style={{boxShadow:\"none\"}}>\n\n                            <span><Header  textAlign={\"center\"} as={\"h4\"}>\n                                <Icon name='tag'/>\n                                {this.state.currentTask[\"peer-review-for\"]}\n                            </Header>\n                            </span>\n\n                        </Segment>\n\n                    </Grid.Row>\n                {/*Form details that contain rest of task details*/}\n                    <Grid.Row >\n\n                       <Form centered={\"true\"}>\n                           <Segment textAlign={\"center\"}>\n                           <Form.Group centered={\"true\"} widths='equal'>\n                               <Form.Field inline >\n                                   <Label icon='calendar alternate' content=\"Due\"/>\n                                   <Input readOnly>{new Date(this.state.currentTask[\"due\"]).toLocaleString()}</Input>\n                               </Form.Field>\n                               <Form.Field inline >\n                                   <Label icon='lock open' content=\"Status\"/>\n\n                                   <Input readOnly style={{color:\"green\"}}>Open</Input>\n                               </Form.Field>\n                           </Form.Group>\n                           </Segment>\n                       </Form>\n\n                    </Grid.Row>\n\n               <Header  textAlign={\"center\"} as={\"h4\"}>\n                    <Icon name='code'/>\n                    Submit Review\n                </Header>\n                {/*Modal to display the rubrics info to follow for the assignment*/}\n                <span> <Modal trigger={<Button>View Rubrics</Button>}>\n                    <Modal.Header>Rubrics</Modal.Header>\n                    <Modal.Content  scrolling>\n\n                        <Modal.Description>\n                            <Header>Rubrics for {this.state.currentTask[\"peer-review-for\"]}</Header>\n                            <div>\n                                General Instructions: {generalInstruction}\n                            </div>\n                            <Table>\n                                <Table.Header>\n                                    <Table.Row>\n                                    <Table.HeaderCell> Possible points</Table.HeaderCell>\n                                        <Table.HeaderCell> Rubric name</Table.HeaderCell>\n                                        <Table.HeaderCell> Criteria</Table.HeaderCell>\n                                    </Table.Row>\n                                </Table.Header>\n                                <Table.Body>\n                                    {/*rubric details to display*/}\n                                    {tableBody}\n                                </Table.Body>\n                            </Table>\n\n                        </Modal.Description>\n                    </Modal.Content>\n                </Modal>\n                    </span>\n\n                {/*Form part where the review part starts*/}\n                <Grid.Row columns={2}>\n\n                    <Grid celled>\n                        {/*View sample code*/}\n                    <Grid.Column width={8}>\n\n                        {/*display submitter ids to review in a menu*/}\n                        {this.state.studentAssignment.length < 4 ?\n                            <Menu pointing secondary>\n                                {reviewsToPost}\n                            </Menu>\n                            :\n                            <Dropdown button color={\"teal\"} text='Submission tasks' labeled className='icon' floating  icon='tasks'>\n                                <Dropdown.Menu>\n                                    {reviewsToPost}\n                                </Dropdown.Menu>\n                            </Dropdown>\n                        }\n\n                        {/*Display the submission content*/}\n                        {this.viewContent()}\n\n                    </Grid.Column>\n                        {/*enter actual reviews*/}\n                    <Grid.Column width={8}>\n                        <Header  textAlign={\"center\"} as={\"h4\"}>\n                            <Icon name='code'/>\n                            Enter points here\n                        </Header>\n                        <hr/>\n\n                        <Segment style={{overflow: 'auto',minHeight:330,maxHeight:330,maxWidth:500,minWidth:200 }}\n                                 textAlign=\"left\">\n\n                            <Form>\n                                {/*Display each rubric for reviewer to enter points and comments*/}\n                               {questionsToDisplay}\n\n                                {this.state.reviewNo ?\n                                    <Button icon='file'\n                                            content='Submit'\n                                            type={\"button\"}\n                                            color={\"green\"}\n                                            onClick={(event) =>this.handleSubmit(event)}\n                                            disabled={!isEnabled || this.state.rubric.length <= 0}\n                                />\n                                :\n                                    /*if no submitter id exists or clicked, display this*/\n                                <div>Click on a review id to submit reviews</div>}\n\n\n\n\n\n                            </Form>\n                            &nbsp;\n                            {/*get the submitted time for a review submitted*/}\n                            {this.state.reviewNo?\n                                this.state[`submittedOn${this.state.reviewNo}${this.state.netId}`]?\n                                <div>\n                                    <Label ribbon icon='star' content={`Submitted :\n                             ${new Date(this.state[`submittedOn${this.state.reviewNo}${this.state.netId}`]).toLocaleString()}`}\n                                           color=\"blue\"/>\n                                </div>\n                                :\n                                    <div>\n                                        <Label ribbon icon='star' content={`Submitted : Not submitted`}\n                                               color=\"blue\"/>\n                                    </div>\n                                    :\n                                <div></div>\n                            }\n\n                        </Segment>\n                    </Grid.Column>\n                    </Grid>\n                </Grid.Row>\n\n\n            </Grid.Column>\n        </Grid>\n    }\n}","/*This component is rendered when a student clicks on a submission task that has been closed.\n* Students can view their submissions for previous assignments */\n\nimport React from 'react';\nimport Prism from 'prismjs';\nimport ReactCommonmark from 'react-commonmark';\n//import submissions from '../data/submissionsHw';\nimport 'prismjs/themes/prism-coy.css';\nimport {Grid,Segment,Header,Label,Icon,Form,Input,TextArea,Button} from \"semantic-ui-react\";\n\n\nexport default class ViewSubmission extends React.Component{\n    constructor(props){\n        super(props);\n        this.state ={currentTask: this.props.currentTask , submissions:props.submissions, netId: this.props.netId,\n            \"assignment-name\":this.props.currentTask[\"task-name\"]}\n        //// console.log(this.state.newTask);\n    }\n\n\n    // called when a prop changed to return a new state\n    static getDerivedStateFromProps(props,state){\n        if(props.currentTask === state.currentTask){\n            return null;\n        }\n        else{\n            return {\n                currentTask: props.currentTask , submissions:props.submissions,\n                \"assignment-name\":props.currentTask[\"task-name\"]\n            }\n        }\n    }\n\n    componentDidUpdate() {\n        Prism.highlightAll();\n    }\n\n    componentDidMount() {\n        Prism.highlightAll();\n    }\n\n\n    render(){\n        // get all the submissions of the student for clciked task\n        let content=\"\", fileName=\"\"\n        let mySubmission =  this.state.submissions.find((item,index,array)=>{\n            return item[\"netId\"] === this.state.netId && item[\"assignment-name\"]=== this.state[\"assignment-name\"]\n        });\n        if(typeof mySubmission !== \"undefined\"){\n             content = mySubmission[\"content\"];\n             fileName = mySubmission[\"fileName\"];\n        }\n\n        // get the submission status and time details\n         let submissionStatus =\"\";\n        let submittedDate =\"\";\n        let taskSubmitted = this.state.submissions.find((task,index,array) => {\n            return (task[\"assignment-name\"] === this.state[\"assignment-name\"] && task[\"netId\"] === this.state.netId);\n        });\n        if(typeof taskSubmitted === \"undefined\"){\n            submissionStatus = \"Not Submitted\";\n        }\n        else{\n            submissionStatus = \"Submitted\";\n            submittedDate = new Date(taskSubmitted[\"submittedOn\"]).toLocaleString();\n        }\n\n        // Display the submission content as highlighted syntax\n        const markdownInstruction = content;\n        const rawHtml = <div id=\"rawHtml\" className=\"language-html\">\n            <ReactCommonmark source={markdownInstruction} />\n        </div>\n\n\n        //// console.log(\"rawhtml\",rawHtml);\n        return<Grid.Row>\n            <Grid.Column computer={14}>\n                <Grid.Row>\n                    <Segment style={{boxShadow:\"none\"}}>\n                        <Label ribbon icon='star' content={`${submissionStatus} : ${submittedDate}`} color=\"blue\"/>\n                        <span><Header  textAlign={\"center\"} as={\"h4\"}>\n                            <Icon name='tag'/>\n                            {this.state.currentTask[\"task-name\"]}\n                        </Header>\n                        </span>\n                    </Segment>\n                </Grid.Row>\n\n                <Grid.Row >\n                    <Grid.Column>\n                        <Form centered={\"true\"}>\n                            <Segment textAlign={\"center\"}>\n                                <Form.Group centered={\"true\"} widths='equal'>\n                                    <Form.Field inline >\n                                        <Label icon='calendar alternate' content=\"Due\"/>\n                                        <Input readOnly>{new Date(this.state.currentTask[\"due\"]).toLocaleString()}</Input>\n                                    </Form.Field>\n                                    <Form.Field inline>\n                                        <Label icon='lock open' content=\"Status\"/>\n\n                                        <Input readOnly style={{color:\"red\"}}>Closed</Input>\n                                    </Form.Field>\n                                </Form.Group>\n                                <Form.Group centered={\"true\"} widths='equal'>\n                                    <Form.Field>\n                                        <Label icon='file code' content=\"Markdown Preview \"/>\n                                        <Label basic>\n                                            <Icon name={'file'}/>\n                                            Filename : {fileName}\n                                        </Label>\n\n                                        {/*Display the submission content in markdown format*/}\n                                        <Segment style={{overflow: 'auto',minHeight:330,maxHeight:330,maxWidth:600,minWidth:200 }} >\n                                            <TextArea readOnly style={{ minHeight: 300, minWidth:200, }}\n                                                      name={\"content\"}\n                                                      value={content}\n                                                      // onChange={(event)=> this.handleChange(event)}\n                                            />\n                                        </Segment>\n                                    </Form.Field>\n                                    <Form.Field>\n                                        {/*Display the highlighted submission content*/}\n                                        <Label icon='code' content=\"Code Preview\"/>\n                                        <Segment\n                                            style={{overflow: 'auto',minHeight:330,maxHeight:330,maxWidth:600,minWidth:200 }}\n                                            textAlign=\"left\">\n                                            {rawHtml}\n                                        </Segment>\n                                    </Form.Field>\n                                </Form.Group>\n                            </Segment>\n\n                        </Form>\n                    </Grid.Column>\n\n                </Grid.Row>\n            </Grid.Column>\n        </Grid.Row>\n\n\n    }\n}\n","/*This component is rendered when a student clicks on a review task that has been closed.\nStudents can view feedback for their assignment.\n* Students can view reviews given by their peers for previous assignments */\n\nimport React from 'react';\nimport Prism from 'prismjs';\nimport ReactCommonmark from 'react-commonmark';\n//import submissions from '../data/submissionsHw';\nimport 'prismjs/themes/prism-coy.css';\nimport {Grid, Segment, Header, Label, Icon, Form, Input, TextArea, Button, Modal, Menu, Table} from \"semantic-ui-react\";\n\n\nexport default class ViewReviewed extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentTask: this.props.currentTask, reviews: this.props.reviews, netId: this.props.netId,\n            \"assignment-name\": this.props.currentTask[\"peer-review-for\"], content: \"\",\n            theInputKey: \"\", fileName: \"\", rubric:[],\n            submissions:props.submissions\n        }\n        //// console.log(this.state.newTask);\n    }\n\n    // called when a prop changed to return a new state\n    static getDerivedStateFromProps(props,state){\n        if(props.currentTask === state.currentTask){\n            return null;\n        }\n        else{\n            return {\n                currentTask: props.currentTask , reviews:props.reviews,\n                \"assignment-name\":props.currentTask[\"peer-review-for\"],rubric:[],\n                submissions:props.submissions,\n                content: \"\"\n            }\n        }\n    }\n\n    componentDidUpdate() {\n        Prism.highlightAll();\n    }\n\n    componentDidMount() {\n        Prism.highlightAll();\n    }\n\n    //function to set the review details and reviewer id in state when a reviewer-id is clicked\n    handleItemClick(event,review){\n        this.setState({rubric:review[\"review\"][\"rubric\"], \"reviewer-id\":review});\n    }\n\n\n    render() {\n        //get my submission\n        let mySubmission =  this.state.submissions.find((item,index,array)=>{\n            return item[\"netId\"] === this.state.netId && item[\"assignment-name\"]=== this.state[\"assignment-name\"]\n        });\n        let content =\"\"\n\n        if(typeof mySubmission !== \"undefined\") {\n             content = mySubmission[\"content\"];\n        }\n\n\n        // get the number of reviewers for a particular submitter\n        let reviewsToPost;\n        // console.log(\"content in state\", this.state);\n\n        let currentReview = this.state.reviews.filter((review,index,array)=>{\n            return review[\"assignment-name\"] === this.state[\"assignment-name\"] &&\n                review[\"submitter-id\"] === this.state.netId;\n        });\n        //// console.log(\"aaaa\",currentReview);\n\n            // display all the reviewers in a menu without displaying the reviewer id or name\n            reviewsToPost = currentReview.map((review, index, array) => {\n\n                //// console.log(\"printed this\",count+1,\"times\");\n                return <Menu.Item\n                    name={`Review${index}`}\n                    as='a'\n                    onClick={(event) => this.handleItemClick(event, review)}\n                    key={`Review${review}${index}`}\n                    active={review=== this.state[\"reviewer-id\"]}\n                >\n                    {`Review${index}`}\n                </Menu.Item>\n            });\n\n        // display the submission content with syntax highlighting\n        const markdownInstruction = content;\n        const rawHtml = <div id=\"rawHtml\" className=\"language-html\">\n            <ReactCommonmark source={markdownInstruction} />\n        </div>\n\n\n        // Display the review details in a table for each review\n        let data = this.state.rubric.map((item,index,array)=>{\n            const comment = item[\"comments\"];\n            const rawHtml1 = <div id=\"rawHtml\" className=\"language-html\">\n                <ReactCommonmark source={comment} />\n            </div>\n            return <Table.Row key={`roww${index}${item[\"rubric-name\"]}`}>\n                <Table.Cell key={`rubric${index}${item[\"rubric-name\"]}`}>\n                    {item[\"rubric-name\"]}\n                </Table.Cell>\n                <Table.Cell key={`possiblepts${index}${item[\"rubric-name\"]}`}>\n                    {item[\"possible-points\"]}\n                </Table.Cell>\n                <Table.Cell key={`pointsGiven${index}${item[\"rubric-name\"]}`}>\n                    {item[\"points-given\"]}\n                </Table.Cell>\n                <Table.Cell key={`comment${index}${item[\"rubric-name\"]}`}>\n                    {rawHtml1}\n                </Table.Cell>\n            </Table.Row>\n        });\n\n        // Display the ngeneral instruction in rubrics to follow\n        const generalInstructionmarkdown = this.state.currentTask[\"instructions\"];\n        const generalInstruction = <div id=\"rawHtml\" className=\"language-html\">\n            <ReactCommonmark source={generalInstructionmarkdown} />\n        </div>\n\n        //Display all other rubrics to follow details in table\n        let tableBody = this.state.currentTask[\"rubric\"].map((item,index,array)=>{\n            const markdownInstruction = item[\"criteria\"];\n            const rawHtml = <div id=\"rawHtml\" className=\"language-html\">\n                <ReactCommonmark source={markdownInstruction} />\n            </div>\n            return <Table.Row key={`row${item[\"rubric-name\"]}${index}`}>\n                <Table.Cell key={`points${item[\"rubric-name\"]}${index}`}>{item[\"points\"]}</Table.Cell>\n                <Table.Cell key={`rubric${item[\"rubric-name\"]}${index}`}>{item[\"rubric-name\"]}</Table.Cell>\n                <Table.Cell key={`criteria${item[\"rubric-name\"]}${index}`}>{rawHtml}</Table.Cell>\n            </Table.Row>\n        });\n\n\n        return  <Grid  stackable>\n            <Grid.Column>\n                {/*Row for task name*/}\n                <Grid.Row>\n                    <Segment style={{boxShadow:\"none\"}}>\n                            <span><Header  textAlign={\"center\"} as={\"h4\"}>\n                                <Icon name='tag'/>\n                                {this.state.currentTask[\"peer-review-for\"]}\n                            </Header>\n                            </span>\n                    </Segment>\n\n                </Grid.Row>\n                {/*Form details that contain rest of task details*/}\n                <Grid.Row >\n\n                    <Form centered={\"true\"}>\n                        <Segment textAlign={\"center\"}>\n                            <Form.Group centered={\"true\"} widths='equal'>\n                                <Form.Field inline >\n                                    <Label icon='calendar alternate' content=\"Due\"/>\n                                    <Input readOnly>{new Date(this.state.currentTask[\"due\"]).toLocaleString()}</Input>\n                                </Form.Field>\n                                <Form.Field inline>\n                                    <Label icon='lock open' content=\"Status\"/>\n                                    <Input readOnly style={{color:\"red\"}}>Closed</Input>\n                                </Form.Field>\n                            </Form.Group>\n                        </Segment>\n                    </Form>\n\n                </Grid.Row>\n\n                <Header  textAlign={\"center\"} as={\"h4\"}>\n                    <Icon name='code'/>\n                    View Reviews for my assignments\n                </Header>\n\n                {/*Display all rubrics to follow in modal*/}\n                <span> <Modal className={\"modal1\"} trigger={<Button>View Rubrics</Button>}>\n                    <Modal.Header>Rubrics</Modal.Header>\n                    <Modal.Content  scrolling>\n                        <Modal.Description>\n                            <Header>Rubrics for {this.state.currentTask[\"peer-review-for\"]}</Header>\n                            <div>\n                                General Instructions: {generalInstruction}\n                            </div>\n                            <Table>\n                                <Table.Header>\n                                    <Table.Row>\n                                    <Table.HeaderCell> Possible points</Table.HeaderCell>\n                                        <Table.HeaderCell> Rubric name</Table.HeaderCell>\n                                        <Table.HeaderCell> Criteria</Table.HeaderCell>\n                                    </Table.Row>\n                                </Table.Header>\n                                <Table.Body>\n                                    {tableBody}\n                                </Table.Body>\n                            </Table>\n                        </Modal.Description>\n                    </Modal.Content>\n                </Modal>\n                    </span>\n\n                {/*Form part where the review part starts*/}\n                <Grid.Row columns={2}>\n\n                    <Grid celled>\n                        {/*View sample code*/}\n                        <Grid.Column width={8}>\n                            {/*Display the reviewers that have posted reviews for the submitter*/}\n                            <Menu pointing secondary>\n                                {reviewsToPost}\n                            </Menu>\n                            <hr/>\n                            <Table>\n                                <Table.Header>\n                                    <Table.Row>\n                                        <Table.HeaderCell>Rubric name</Table.HeaderCell>\n                                        <Table.HeaderCell>Possible pts</Table.HeaderCell>\n                                        <Table.HeaderCell>Points given</Table.HeaderCell>\n                                        <Table.HeaderCell>Comments</Table.HeaderCell>\n                                    </Table.Row>\n                                </Table.Header>\n                                <Table.Body>\n                                    {/*Display the review details(points and comments) in a table*/}\n                                    {data}\n                                </Table.Body>\n                            </Table>\n\n                        </Grid.Column>\n                        {/*enter review*/}\n                        <Grid.Column width={8}>\n\n                            {/*Display the submission content of the submitter*/}\n                            <Segment style={{overflow: 'auto',minHeight:330,maxHeight:330,maxWidth:500,minWidth:200 }}\n                                     textAlign=\"left\">\n                                {rawHtml}\n                            </Segment>\n                        </Grid.Column>\n                    </Grid>\n                </Grid.Row>\n\n            </Grid.Column>\n        </Grid>\n    }\n}\n","// Component to display buttons that links to Linkedin and project source profile\n\nimport React from 'react';\nimport {Button, Grid, Icon, Rail, Sticky} from \"semantic-ui-react\";\n\nexport default class ExternalLinks extends React.Component{\n    render() {\n        {/*Added github and linkedin profile*/}\n       return <div style={{ padding: \"1em\" }} >\n            <Rail\n                icon={'linkedin'}\n                internal\n                position=\"right\"\n                attached\n                style={{ top: \"auto\", height: \"auto\", width: \"30em\" }}\n            >\n                <Sticky >\n                    <Button.Group>\n\n                        <Button attached='right' color=\"linkedin\"\n                                onClick ={()=>\n                                    window.open(`https://www.linkedin.com/in/sandhya-sankaran/`,'_blank')}>\n                            <Icon name={\"linkedin\"}/> About the developer\n                        </Button>\n                        <Button attached='left' color=\"teal\"\n                                style={{marginLeft:\"1em\"}}\n                                onClick={()=>\n                                    window.open(\"https://github.com/sandhyas23/capstone-peer-review-system\",'_blank')}>\n                            <Icon name={\"github\"}/> Source\n                        </Button>\n                    </Button.Group>\n\n                </Sticky>\n            </Rail>\n\n        </div>\n\n    }\n\n}","/* Basic view for students\n* This content is rendered when user is logged in as student*/\n\nimport React from 'react';\nimport TaskSubmit from \"./taskSubmit\";\nimport {\n    Grid,\n    Icon,\n    Menu,\n    Sidebar,\n    Container,\n    Segment,\n    Header,\n    Button, Rail, Sticky\n} from 'semantic-ui-react';\nimport TaskReview from \"./taskReview\";\nimport ViewSubmission from \"./viewSubmission\";\nimport ViewReviewed from './viewReviewed';\nimport Prism from \"prismjs\";\nimport Cookies from 'universal-cookie';\nimport ExternalLinks from \"../externalLinks\";\n\n\nexport default class StudentView extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {submissionTasks:[] ,reviewTasks:[], mode:\"\", submissions:[], studentAssignment:[],\n        reviews:[], firstName:props.firstName , lastName:props.lastName}\n\n    }\n\n    // Get all tasks and submission details from database to display initially\n    componentDidMount() {\n        let _this = this;\n        fetch('/submissionTask',{\n            method: \"GET\",\n            headers : {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        }).then(response => response.json()).then(function(data) {\n\n            // console.log(\"this is what we got\" +data.submissionTasks);\n            _this.setState({submissionTasks: data.submissionTasks});\n\n        });\n\n        fetch('/reviewTask',{\n            method: \"GET\",\n            headers : {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        }).then(response => response.json()).then(function(data) {\n\n            // console.log(\"this is what we got\" +data.reviewTasks);\n            _this.setState({reviewTasks: data.reviewTasks});\n\n        });\n\n\n        fetch('/submissions/',{\n            method: \"GET\",\n            headers : {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        }).then(response => response.json()).then(function(data) {\n\n            // console.log(\"this is what we got in task submit\" +data.submissions);\n            //_this.state.submissions.push(data.submission);\n            _this.setState({\"submissions\": data.submissions});\n\n\n        });\n\n        fetch('/reviews/',{\n            method: \"GET\",\n            headers : {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        }).then(response => response.json()).then(function(data) {\n\n            // console.log(\"this is what we got in task submit\" +data.reviews);\n            //_this.state.submissions.push(data.submission);\n            _this.setState({\"reviews\": data.reviews});\n\n\n        });\n\n        fetch('/studentAssignment/',{\n            method: \"GET\",\n            headers : {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        }).then(response => response.json()).then(function(data) {\n\n            // console.log(\"this is what we got in task submit\" +data.studentAssignment);\n            //_this.state.submissions.push(data.submission);\n            _this.setState({\"studentAssignment\": data.studentAssignment});\n\n\n        });\n        Prism.highlightAll();\n    }\n\n    // function to set state of current open submission task that is clicked\n    handleOpenSubmissionItemClick(event, task){\n       // // console.log(\"taskclicked\" +task[\"task-name\"]);\n        this.setState({mode:\"submit\", currentTask:task})\n        //// console.log(\"ccc\",this.state.currentTask);\n    }\n\n    // function to set state of current closed submission task that is clicked\n    handleClosedSubmissionItemClick(event, task){\n        // // console.log(\"taskclicked\" +task[\"task-name\"]);\n        this.setState({mode:\"submitted\", currentTask:task})\n        //// console.log(\"ccc\",this.state.currentTask);\n    }\n\n    // function to set state of current open review task that is clicked\n    handleOpenReviewItemClick(event, task){\n        //// console.log(\"taskclicked\" +task[\"task-name\"]);\n        this.setState({mode:\"review\", currentTask:task})\n        //// console.log(\"ddd\",this.state.currentTask);\n    }\n\n    // function to set state of current closed review task that is clicked\n    handleClosedReviewItemClick(event, task){\n        //// console.log(\"taskclicked\" +task[\"task-name\"]);\n        this.setState({mode:\"reviewed\", currentTask:task})\n        //// console.log(\"ddd\",this.state.currentTask);\n    }\n\n    // toggle between different views for student based on the task type clicked\n    handleViewComponent(){\n        const viewMode = this.state.mode;\n        if(viewMode === \"submit\"){\n            const cookies = new Cookies();\n            //const gotCookie =cookies.get('user');\n            if(typeof cookies.get('user') === \"undefined\") {\n                this.props.onlogoutClick()\n            }\n            //// console.log(\"cliked\" +this.state.currentTask[\"task-name\"]);\n            return <TaskSubmit currentTask = {this.state.currentTask} netId={this.props.netId}\n                               onclickLogout= {()=>this.props.onlogoutClick()}/>\n\n\n        }\n        else if(viewMode === \"review\"){\n           // // console.log(\"cliked\" +this.state.currentTask[\"task-name\"]);\n            const cookies = new Cookies();\n            //const gotCookie =cookies.get('user');\n            if(typeof cookies.get('user') === \"undefined\") {\n                this.props.onlogoutClick()\n            }\n            return <TaskReview currentTask = {this.state.currentTask} netId={this.props.netId}\n            reviewTask = {this.state.reviewTasks} studentAssignment={this.state.studentAssignment}\n            submissions={this.state.submissions} reviews={this.state.reviews}\n                               onclickLogout= {()=>this.props.onlogoutClick()}/>\n        }\n        else if(viewMode === \"submitted\"){\n            const cookies = new Cookies();\n            //const gotCookie =cookies.get('user');\n            if(typeof cookies.get('user') === \"undefined\") {\n                this.props.onlogoutClick()\n            }\n            // // console.log(\"cliked\" +this.state.currentTask[\"task-name\"]);\n            return <ViewSubmission currentTask = {this.state.currentTask} netId={this.props.netId}\n                               reviewTask = {this.state.reviewTasks} studentAssignment={this.state.studentAssignment}\n                               submissions={this.state.submissions} reviews={this.state.reviews}\n                                   onclickLogout= {()=>this.props.onlogoutClick()}/>\n        }\n\n        else if(viewMode === \"reviewed\"){\n            const cookies = new Cookies();\n            //const gotCookie =cookies.get('user');\n            if(typeof cookies.get('user') === \"undefined\") {\n                this.props.onlogoutClick()\n            }\n            // // console.log(\"cliked\" +this.state.currentTask[\"task-name\"]);\n            return <ViewReviewed currentTask = {this.state.currentTask} netId={this.props.netId}\n                               reviewTask = {this.state.reviewTasks} studentAssignment={this.state.studentAssignment}\n                               submissions={this.state.submissions} reviews={this.state.reviews}\n                                 onclickLogout= {()=>this.props.onlogoutClick()}/>\n        }\n\n        else{\n            // in homepage, display the tasks to complete both, submission and review\n            let openSubmissionTaskItems = this.state.submissionTasks.map((task , index , array) => {\n                let taskDue = new Date(task[\"due\"]).getTime();\n                let now = new Date().getTime();\n                const timeDifference = now-taskDue;\n                //// console.log(\"time of\",task[\"task-name\"],timeDifference);\n                if(timeDifference < 0){\n                    return <Menu.Item\n                        name={task[\"task-name\"]}\n                        key = {`osstask${index}`}\n                        onClick={(event) => this.handleOpenSubmissionItemClick(event,task)}\n                        active={task === this.state.currentTask}\n                    >\n                    <span>\n                        <Icon name =\"tag\" />\n                        {task[\"task-name\"]}\n                    </span>\n                    </Menu.Item>\n\n                }\n            });\n\n\n            // get all open review tasks to display in the menu\n            let openReviewTaskItems = this.state.reviewTasks.map((task , index , array) => {\n                let taskDue = new Date(task[\"due\"]).getTime();\n                let now = new Date().getTime();\n                const timeDifference = now-taskDue;\n                //// console.log(\"time of\",task[\"task-name\"],timeDifference);\n                if(timeDifference < 0){\n                    return <Menu.Item\n                        name={task[\"peer-review-for\"]}\n                        key = {`ortask${index}`}\n                        onClick={(event) => this.handleOpenReviewItemClick(event,task)}\n                        active={task === this.state.currentTask}\n                    >\n                    <span>\n                        <Icon name =\"tag\" />\n                        {task[\"peer-review-for\"]}\n                    </span>\n                    </Menu.Item>\n\n                }\n            });\n\n\n            return <div><Segment placeholder style={{overflow: 'auto',minHeight:230,maxHeight:330,minWidth:200 }}>\n                <Header >\n                    <Icon name='tasks' circular inverted color={\"blue\"}/>\n                    <Header.Content>You have the following assignments to submit</Header.Content>\n                </Header>\n                <Menu>\n                    {openSubmissionTaskItems}\n                </Menu>\n            </Segment>\n                <Segment placeholder style={{overflow: 'auto',minHeight:230,maxHeight:330,minWidth:200 }}>\n                    <Header >\n                        <Icon name='tasks' circular inverted color={\"blue\"} />\n                        <Header.Content>You have the following reviews to submit</Header.Content>\n                    </Header>\n                    <Menu>\n                        {openReviewTaskItems}\n                    </Menu>\n                </Segment>\n\n            </div>\n        }\n    }\n\n\n\n    render(){\n        // get all open submission tasks to display in the menu\n        let openSubmissionTaskItems = this.state.submissionTasks.map((task , index , array) => {\n            let taskDue = new Date(task[\"due\"]).getTime();\n            let now = new Date().getTime();\n            const timeDifference = now-taskDue;\n            //// console.log(\"time of\",task[\"task-name\"],timeDifference);\n            if(timeDifference < 0){\n                return <Menu.Item\n                    name={task[\"task-name\"]}\n                    key = {`ostask${index}`}\n                    onClick={(event) => this.handleOpenSubmissionItemClick(event,task)}\n                    active={task === this.state.currentTask}\n                >\n                    <span>\n                        <Icon name =\"tag\" color='teal' />\n                        {task[\"task-name\"]}\n                    </span>\n                </Menu.Item>\n\n            }\n        });\n\n        // get all closed submission tasks to display in the menu\n        let closedSubmissionTaskItems = this.state.submissionTasks.map((task , index , array) => {\n            let taskDue = new Date(task[\"due\"]).getTime();\n            let now = new Date().getTime();\n            const timeDifference = now-taskDue;\n            if(timeDifference >= 0){\n                return <Menu.Item\n                    name={task[\"task-name\"]}\n                    key = {`cstask${index}`}\n                    onClick={(event) => this.handleClosedSubmissionItemClick(event,task)}\n                    active={task === this.state.currentTask}\n                >\n                    <span>\n                        <Icon name =\"tag\" color='teal'  />\n                        {task[\"task-name\"]}\n                    </span>\n                </Menu.Item>\n\n            }\n        });\n\n        // get all open review tasks to display in the menu\n        let openReviewTaskItems = this.state.reviewTasks.map((task , index , array) => {\n            let taskDue = new Date(task[\"due\"]).getTime();\n            let now = new Date().getTime();\n            const timeDifference = now-taskDue;\n            //// console.log(\"time of\",task[\"task-name\"],timeDifference);\n            if(timeDifference < 0){\n                return <Menu.Item\n                    name={task[\"peer-review-for\"]}\n                    key = {`ortask${index}`}\n                    onClick={(event) => this.handleOpenReviewItemClick(event,task)}\n                    active={task === this.state.currentTask}\n                >\n                    <span>\n                        <Icon name =\"tag\" color='teal' />\n                        {task[\"peer-review-for\"]}\n                    </span>\n                </Menu.Item>\n\n            }\n        });\n\n        // get all closed review tasks to display in the menu\n        let closedReviewTaskItems = this.state.reviewTasks.map((task , index , array) => {\n            let taskDue = new Date(task[\"due\"]).getTime();\n            let now = new Date().getTime();\n            const timeDifference = now-taskDue;\n            //// console.log(\"time of\",task[\"task-name\"],timeDifference);\n            if(timeDifference >= 0){\n                return <Menu.Item\n                    name={task[\"peer-review-for\"]}\n                    key = {`crtask${index}`}\n                    onClick={(event) => this.handleClosedReviewItemClick(event,task)}\n                    active={task === this.state.currentTask}\n                >\n                    <span>\n                        <Icon name =\"tag\" color='teal' />\n                        {task[\"peer-review-for\"]}\n                    </span>\n                </Menu.Item>\n\n            }\n        });\n\n    return<div>\n        <div>\n        <Sidebar\n            as={Menu}\n            animation='push'\n            direction='left'\n            icon='labeled'\n            inverted\n            visible={true}\n            vertical\n            width='thin'\n\n\n        >\n            {/*Sidebar with all task names*/}\n\n            <Menu.Item>\n                <Icon   name =\"tasks\"  color={\"blue\"}></Icon><Menu.Header>Tasks to submit</Menu.Header>\n                <Menu.Menu>\n                    {openSubmissionTaskItems}\n                </Menu.Menu>\n            </Menu.Item>\n\n            <Menu.Item>\n                <Icon name =\"tasks\" color={\"blue\"}></Icon><Menu.Header>Tasks to Review</Menu.Header>\n\n                <Menu.Menu>\n                    {openReviewTaskItems}\n                </Menu.Menu>\n            </Menu.Item>\n\n            <Menu.Item>\n                <Icon name =\"tasks\" color={\"red\"}></Icon><Menu.Header>my Submissions</Menu.Header>\n\n                <Menu.Menu>\n                    {closedSubmissionTaskItems}\n                </Menu.Menu>\n\n            </Menu.Item>\n\n            <Menu.Item>\n                <Icon name =\"tasks\" color={\"red\"}></Icon><Menu.Header>View reviews for my assignments</Menu.Header>\n\n                <Menu.Menu>\n                    {closedReviewTaskItems}\n                </Menu.Menu>\n\n            </Menu.Item>\n\n        </Sidebar>\n\n            {/*Top fixed menu with user details and Logout button*/}\n        </div>\n        <Menu fixed='top' stackable inverted>\n            <Container>\n                <Menu.Item as='h4'\n                           header\n                           position={\"right\"}\n                            onClick={()=> this.setState({mode:\"\",currentTask:\"\"})}>\n                    <Icon name={\"home\"} />\n                    Peer Review System\n                </Menu.Item>\n                <Menu.Item\n                    as='a'\n                    position={\"right\"}\n                >{`Welcome, ${this.props.netId} -- ${this.props.firstName}, ${this.props.lastName}`}</Menu.Item>\n                <Menu.Item\n                    as='a'\n                    position={\"right\"}\n                    margin-right={\"150px\"}\n                    onClick ={this.props.onlogoutClick}\n                ><Icon name={\"sign-out\"} />\n                          Logout</Menu.Item>\n            </Container>\n        </Menu>\n\n\n        <div style={{marginLeft: 170, minWidth: 550, marginTop:50}}>\n        <Grid padded  stackable>\n\n            <Grid.Column >\n           {/*toggle different between views for student based on task click*/}\n            {this.handleViewComponent()}\n                {/*Added github and linkedin profile*/}\n                <ExternalLinks/>\n            </Grid.Column>\n\n        </Grid>\n    </div>\n\n    </div>\n\n    }\n}\n\n","import React from 'react';\nimport { Form, Grid} from \"semantic-ui-react\";\n\n\n\nexport default class ViewTask extends React.Component{\n    constructor(props){\n        super(props);\n        this.state={createdTask:props.createdTask, type:props.type , studentAssignment:props.studentAssignment}\n    }\n\n    render() {\n        if (this.state.type === \"submission\"){\n            console.log(this.state.createdTask);\n            return   <div style={{marginLeft: 170, minWidth: 550, marginTop:50}}>\n            <Grid padded stackable>\n                <Form>\n                    <Form.Field inline>\n                        <Form.Input fluid label='Task Name' content={this.state.createdTask[\"task-name\"]} readOnly />\n                    </Form.Field>\n                </Form>\n            </Grid>\n            </div>\n        }\n\n    }\n}","/* This view is rendered when teacher clicks on the create task button\n* */\n\nimport React from 'react';\nimport {\n    Input,\n    Grid,\n    Icon,\n    TextArea,\n    Select,\n    Header,\n    Segment,\n    Form,\n    Modal,\n    Button, Label,Table\n} from 'semantic-ui-react';\n//import createdTasks from '../data/createdSubmissionTasks';\n\nimport Prism from \"prismjs\";\n//import ReactCommonmark from \"react-commonmark\";\nimport DatePicker from \"react-datepicker\";\n\nimport \"react-datepicker/dist/react-datepicker.css\";\n//import submissions from '../data/submissionsHw';\n//import studentAssignment from '../data/studentAssignment';\nimport ViewTask from './viewTask';\nimport Cookies from \"universal-cookie\";\n\n//import TaskReview from \"./taskReview\"\n\n\nexport default class CreateReviewTask extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            submissionTasks: this.props.submissionTasks,\n            reviewTasks: this.props.reviewTasks,\n            selectedType: \"submission\",\n            instructions: \"\",\n            selectedReview: \"\",\n            dueDate: new Date(),\n            rubricIds: [1],\n            rubric: [],\n            submissions:this.props.submissions,\n            newAssignments:[],\n            reviews:[],\n            num:0,\n            studentAssignment:[],\n            isSubmitted:false\n        }\n\n    }\n\n\n    componentDidUpdate() {\n        Prism.highlightAll();\n\n    }\n\n    componentDidMount() {\n        Prism.highlightAll();\n    }\n\n\n   // function to handle dropdown values\n    handleChange(e, data) {\n        this.setState({\n            [data.name]: data.value\n        });\n        //// console.log(\"onchanges\", data.name);\n    }\n    \n    // function to handle input change\n    handleChanges = async(e) => {\n        const target = e.target;\n        const value = target.value;\n        const name = target.name;\n        this.setState({\n            [name]: value\n        });\n        //// console.log(\"onchanges\", value);\n    }\n\n    // function to handle when only  rubric input\n    handleRubricChange(e,element,index){\n        // handle the input of rubric fields\n        this.handleChanges(e).then(()=> {\n            // create object for each rubric\n            let rubric_task = {\n                \"rubric-name\":this.state[`rubric${element}`],\n                \"points\":this.state[`point${element}`],\n                \"criteria\":this.state[`criteria${element}`],\n            }\n            // Add each rubric into an array and set in state\n            this.state.rubric.splice(index, 1, rubric_task);\n            this.setState({\n                rubric: this.state.rubric,\n            });\n\n        });\n\n    }\n\n    //function to handle submit button \n    handleSubmit(e,num) {\n        const cookies = new Cookies();\n        //const gotCookie =cookies.get('user');\n        if(typeof cookies.get('user') === \"undefined\") {\n            alert(\"session expired\");\n            this.props.onclickLogout()\n        }\n        else {\n            const _this = this;\n            // When task type is submission\n            if (this.state.selectedType === \"submission\") {\n                let submissionTask = {\n                    type: this.state.selectedType, \"task-name\": this.state.selectedReview,\n                    due: this.state.dueDate.toISOString()\n                };\n                let createdSubmissionTask = this.state.submissionTasks.find((element, index, array) => {\n                    return element[\"task-name\"] === this.state.selectedReview\n                });\n                if (typeof createdSubmissionTask === \"undefined\") {\n                    // console.log(\"inside if\");\n                    fetch('/submissionTask', {\n                        method: 'POST',\n                        headers: {\n                            \"Content-type\": \"application/json\"\n                        },\n                        body: JSON.stringify((submissionTask))\n                    })\n                        .then(function (response) {\n                            _this.state.submissionTasks.push(submissionTask);\n                            _this.setState({\n                                selectedType: \"submission\", instructions: \"\",\n                                selectedReview: \"\", dueDate: new Date(),\n                                submissionTasks: _this.state.submissionTasks, currentTask: submissionTask\n                            });\n                            _this.props.update();\n                            alert(\"submission task created successfully\");\n                            // console.log(\"submitted\", _this.state.submissionTasks);\n                            _this.props.viewHome();\n                            //e.preventDefault();\n                        })\n                } else {\n                    alert(\"Submission task already exists\");\n                    this.setState({selectedReview: \"\"});\n                }\n\n            }\n            // if type of task is review, handle submit\n            else {\n                let currentSubmissions = this.state.submissions.filter((item,index,array)=>{\n                    return item[\"assignment-name\"] === this.state.selectedReview;\n                });\n                if(parseInt(this.state.num) <= currentSubmissions.length && parseInt(this.state.num) >0) {\n                   // // console.log(\"inside true\")\n                    // Assignment of students for review task before submit\n                    this.assignTask(e, num).then(() => {\n                        //// console.log(\"submission task\", submissionTask);\n                        let reviewTask = {\n                            \"peer-review-for\": this.state.selectedReview,\n                            due: this.state.dueDate.toISOString(), rubric: this.state.rubric,\n                            instructions: this.state.instructions\n                        };\n                        // console.log(this.state.newAssignments);\n                        let studentAssignments = {\n                            \"peer-review-for\": this.state.selectedReview, studentsAssignment: this.state.newAssignments\n                        }\n                        fetch('/reviewTask', {\n                            method: 'POST',\n                            headers: {\n                                \"Content-type\": \"application/json\"\n                            },\n                            body: JSON.stringify((reviewTask))\n                        })\n                            .then(function (response) {\n                                _this.state.reviewTasks.push(reviewTask);\n                                _this.state.studentAssignment.push(studentAssignments);\n                                _this.setState({\n                                    selectedType: \"review\",\n                                    instructions: \"\",\n                                    dueDate: new Date(),\n                                    num: 0,\n                                    reviewTasks: _this.state.reviewTasks,\n                                    studentAssignment: _this.state.studentAssignment,\n                                    currentTask: reviewTask,\n                                    // selectedReview: \"\",isSubmitted:true,\n                                });\n                                //_this.props.update();\n                                alert(\"review task created successfully\");\n                                // console.log(\"review task\", _this.state.reviewTasks);\n                                _this.props.viewHome();\n                                //e.preventDefault();\n                            });\n                    });\n                }\n                else{\n                    alert(\"Number of reviews is not valid\");\n                }\n            }\n        }\n\n\n\n    }\n    \n    // function to handle addition of new rubric\n    addRubrics(e) {\n        let lastElement = this.state.rubricIds[this.state.rubricIds.length-1];\n        this.setState({rubricCount: this.state.rubricIds.push(lastElement + 1)});\n    }\n\n    // function to handle deletion of a rubric\n    deleteRubrics(e,element,index){\n\n        // console.log(element);\n        this.state.rubric.splice(index,1);\n        let i = this.state.rubricIds.indexOf(element);\n        this.state.rubricIds.splice(i,1);\n        if(i > -1){\n            this.setState({[`point${element}`]:undefined, [`rubric${element}`]:undefined,\n                [`criteria${element}`]:undefined,rubric:this.state.rubric,rubricIds:this.state.rubricIds});\n        }\n        //// console.log(\"deleted\", this.state.rubricIds);\n\n    }\n    \n    // function to handle the view of rubrics. Based on the number of rubrics in array, all rubrics are displayed\n    displayRubrics() {\n        let rubricsDisplay = this.state.rubricIds.map((element, index, array) => {\n            // console.log(\"displayed for loop\", index + 1, \"times\");\n            //return <div key={`index${element}`}>aaa</div>\n        return <Form.Group key={`group${index}`} >\n            <Label content={\"Rubric\"}/>\n            <Form.Input name={`point${element}`}\n                        type='number' label='Points' placeholder='Points' width={6}\n                        onChange={(e) => this.handleRubricChange(e,element,index)}\n                        key={`point${element}`}\n                        required\n                        min=\"1\"\n                        value={this.state[`point${element}`] || \"\"}/>\n            <Form.Input name={`rubric${element}`}\n                        label='rubric-name' placeholder='rubric-name'\n                        required\n                        width={8}\n                        key={`rubric${element}`}\n                        onChange={(e) => this.handleRubricChange(e,element,index)}\n                        value={this.state[`rubric${element}`] || \"\"}/>\n            <Form.TextArea name={`criteria${element}`}\n                           label='criteria' placeholder='criteria'\n                           width={12}\n                           required\n                           key={`criteria${element}`}\n                           onChange={(e) => this.handleRubricChange(e,element,index)}\n                           value={this.state[`criteria${element}`] ||\"\" }/>\n            <Button basic icon size={\"mini\"} circular\n                    onClick={(e) => this.addRubrics(e)}\n                    disabled={!this.state[`point${element}`] ||!this.state[`rubric${element}`] ||\n                    !this.state[`criteria${element}`] }>\n                <Icon name='add'/>\n            </Button>\n            <Button basic icon size={\"mini\"} circular\n                    onClick={(e) => this.deleteRubrics(e,element,index)}\n                    disabled={this.state.rubricIds.length === 1}>\n                <Icon name='delete'/>\n            </Button>\n        </Form.Group>\n        });\n        return rubricsDisplay;\n    }\n\n    // function to handle assignment of students \n     assignTask = async(e,num) => {\n        // console.log(\"called first\");\n        /* Algorithm 4 for peer review assignment problem.\n\n        Dr. Greg M. Bernstein\n        October 30th, 2019\n\n        Fixed assignment, with array shuffle\n        */\n        let currentSubmissions = this.state.submissions.filter((item,index,array)=>{\n           return item[\"assignment-name\"] === this.state.selectedReview;\n        });\n        // console.log(currentSubmissions);\n        //const numStudents = 15;\n        const numReviews = num;\n        const length = currentSubmissions.length;\n\n        // produce shuffled array\n        let ordering = [];\n        for (let i=0; i < length; i++) {\n            ordering[i] = i;\n        }\n\n        shuffle(ordering);\n\n        //// console.log(ordering);\n        // Keep track of who is reviewing each students assignment\n        let assignments = [];\n        for (let i = 0; i < length; i++) {\n            let submitterId = currentSubmissions[ordering[i]].netId;\n            let assignInfo = {student: submitterId, reviewers: new Set()};\n            assignments.push(assignInfo);\n        }\n\n        // Keep track of the assignments each student is reviewing\n        let reviews = [];\n        for (let i = 0; i < length; i++) {\n            let reviewerID = currentSubmissions[ordering[i]].netId;\n            let reviewInfo = {student: reviewerID, reviewees: new Set()};\n            reviews.push(reviewInfo);\n        }\n\n        // console.log(\"Starting Algorithm\");\n\n        // Fixed mapping of reviewers to assignments based on\n        // a circular pass the papers around notion.\n        for (let i = 0; i < length; i++) {\n            let assignment = assignments[i];\n            let increment = 1;\n            while (assignment.reviewers.size < numReviews) {\n                let trial = (i+increment)%length;\n                if (reviews[trial].reviewees.size >= numReviews) continue;\n                let toBeReview = currentSubmissions[ordering[trial]].netId;\n                assignment.reviewers.add(toBeReview);\n                let whoToReview = currentSubmissions[ordering[i]].netId;\n                //// console.log(\"ordering\",toBeReview);\n                reviews[trial].reviewees.add(whoToReview);\n                increment++;\n            }\n        }\n\n        function sortFunc(a, b) {\n            if (a.student > b.student) {\n                return 1;\n            } else {\n                return -1;\n            }\n        }\n        assignments.sort(sortFunc);\n        reviews.sort(sortFunc);\n\n        // Look at the results\n        let newAssignments =[];\n        for (let i = 0; i < length; i++) {\n            // console.log(assignments[i]);\n            let assignedReviewers = Array.from(assignments[i][\"reviewers\"]);\n            let assignedReviewees = Array.from(reviews[i][\"reviewees\"]);\n            newAssignments.push({student:assignments[i][\"student\"],reviewers:assignedReviewers,\n                reviewees:assignedReviewees});\n            // console.log(\"newAssignments\",newAssignments);\n            //// console.log(reviews[i]);\n            //// console.log(\"\\n\");\n        }\n\n        let assignmentsOfStudents ={\"peer-review-for\":this.state.selectedReview,\n            \"studentsAssignment\": newAssignments};\n        // console.log(\"assignment\",assignmentsOfStudents);\n\n\n            const _this = this;\n\n             fetch('/studentAssignment/'+this.state.selectedReview, {\n                method: 'PUT',\n                headers: {\n                    \"Content-type\": \"application/json\"\n                },\n                body: JSON.stringify(assignmentsOfStudents)\n            }).then(function (response) {\n                _this.setState({newAssignments:newAssignments,reviews:reviews,\n                    });\n            });\n\n\n\n        //this.setState({newAssignments:newAssignments,reviews:reviews});\n\n        /**\n         From: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random\n         */\n        // function getRandomIntInclusive(min, max) {\n        //     min = Math.ceil(min);\n        //     max = Math.floor(max);\n        //     return Math.floor(Math.random() * (max - min + 1)) + min; //The maximum is inclusive and the minimum is inclusive\n        // }\n\n        /* Shuffle an array in JavaScript the right way.\n            From: https://medium.com/@nitinpatel_20236/how-to-shuffle-correctly-shuffle-an-array-in-javascript-15ea3f84bfb\n        */\n        function shuffle(array) {\n            for (let i = array.length - 1; i > 0; i--) {\n                const j = Math.floor(Math.random() * i)\n                const temp = array[i];\n                array[i] = array[j];\n                array[j] = temp;\n            }\n        }\n        //return [assignments,reviews];\n    }\n\n\n    // Display how the students are assigned for peer-review\n    display(){\n        if(this.state.newAssignments.length > 0){\n            //// console.log(this.state.assignments);\n             return this.displayAssignments();\n        }\n    }\n\n    displayAssignments(){\n              //// console.log(\"function called\");\n        //function to display the reviewers for each student\n                function viewStudents(element){\n                    let reviewers = element[\"reviewers\"].map((item,index,array)=>{\n                        return <Table.Cell key={`cell2${index}`}>\n                            {item}\n                        </Table.Cell>\n                    });\n                    return reviewers;\n                }\n\n\n             // Display all submitters for each task\n            let submitterId = this.state.newAssignments.map((element,index,array)=>{\n                return <Table.Row key={`row${index}`}>\n                    <Table.Cell key={`cell${index}`}>\n                        <Input transparent\n                               key={`AssignmentValue${index}`}\n                               name={`AssignmentValue${index}`}\n                        >{element[\"student\"]}\n                        </Input>\n                    </Table.Cell>\n                    {viewStudents(element)}\n                </Table.Row>\n            });\n\n\n       // return all the details in a modal\n        return  <Modal trigger={<Button >View assignments</Button>}>\n            <Modal.Header>Rubrics</Modal.Header>\n            <Modal.Content  scrolling>\n\n                <Modal.Description>\n                    <Header>Modal Header</Header>\n                    <Table celled>\n                        <Table.Header>\n                            <Table.Row>\n                                <Table.HeaderCell>Submitter Id</Table.HeaderCell>\n                                <Table.HeaderCell colSpan={this.state.num}>Reviewed by\n                                </Table.HeaderCell>\n\n                            </Table.Row>\n                        </Table.Header>\n\n                        <Table.Body>\n                            {submitterId}\n                        </Table.Body>\n                    </Table>\n\n                </Modal.Description>\n            </Modal.Content>\n        </Modal>\n    }\n\n\n    render(){\n        //// console.log(\"STATE\",this.state);\n        let options=[];\n        // Get all closed submission tasks to display in a dropdown in create review task screen\n        const reviewTasksDisplayed = this.state.submissionTasks.filter((element)=>{\n            let taskDue = new Date(element[\"due\"]).getTime();\n            let now = new Date().getTime();\n            const timeDifference = now-taskDue;\n            if(timeDifference >= 0) {\n                //// console.log(element[\"task-name\"]);\n                return element;\n            }\n        });\n\n        // Check if  a review task has been created for the above filtered tasks, then remove them from the dropdown\n        if(reviewTasksDisplayed.length >0){\n            let len = reviewTasksDisplayed.length;\n            for(let i=0;i< this.state.reviewTasks.length;i++){\n                for(let j=0; j< len;j++){\n                    //// console.log(\"www\",reviewTasksDisplayed[j][\"task-name\"],this.state.reviewTasks[i][\"peer-review-for\"]);\n                   if(reviewTasksDisplayed[j][\"task-name\"] === this.state.reviewTasks[i][\"peer-review-for\"]){\n                       //// console.log(\"inside if\");\n                       reviewTasksDisplayed.splice(j, 1);\n                       len=reviewTasksDisplayed.length;\n\n                       //// console.log(\"options\" ,options);\n                   }\n                }\n            }\n          let submitterId = reviewTasksDisplayed.map((element,index,array)=>{\n              options.push({key:`hw${index}${element[\"task-name\"]}`,\n                  text:element[\"task-name\"],\n                  value:element[\"task-name\"] });\n          });\n        }\n\n        // get submissions for an assignment\n        let currentSubmissions = this.state.submissions.filter((item,index,array)=>{\n            return item[\"assignment-name\"] === this.state.selectedReview;\n        });\n\n\n        //// console.log(\"review tasks\",options)\n        const taskType = this.state.selectedType;\n\n         if(this.state.isSubmitted === true){\n             return <ViewTask createdTask={this.state.currentTask} type={this.state.selectedType}\n                              studentAssignment={this.state.studentAssignment}/>\n         }\n         else{\n             return<div>\n                 <div style={{marginLeft:10,marginRight:10,  minWidth: 550, marginTop:50}}>\n                     <Grid  stackable>\n                         <Grid.Column>\n\n                             <Grid.Row >\n\n                                 <Segment style={{boxShadow:\"none\"}} textAlign={\"center\"}>\n\n                                     <Header  textAlign={\"center\"} as={\"h4\"}>\n                                         <Icon name='tag'/>\n                                         Create Task\n                                     </Header>\n\n                                 </Segment>\n                             </Grid.Row>\n                             <Grid.Row  textAlign={\"center\"}>\n                                 <Segment align=\"center\" >\n                                     <Form align=\"center\">\n                                         <Form.Field inline required>\n                                             <label>Task Type</label>\n                                             <Select placeholder='task type'\n                                                     value={this.state.selectedType}\n                                                     name=\"selectedType\" options={[\n                                                 { key: 'submission', text: 'Submission', value: 'submission' },\n                                                 { key: 'review', text: 'Review', value: 'review' },\n                                             ]} onChange={(e,data)=>this.handleChange(e,data)}/>\n                                         </Form.Field>\n                                         {  /*Change display for screen if review or submission*/\n                                             taskType === \"review\" ?\n                                                 <div>\n                                                     <Form.Field inline required>\n                                                         <label>Task name</label>\n                                                         <Select placeholder='Select the task name'\n                                                                 name={\"selectedReview\"}\n                                                                 value={this.state.selectedReview} options={options}\n                                                                 onChange={(e,data)=>this.handleChange(e,data)}/>\n                                                     </Form.Field>\n                                                     <Form.Field inline required>\n                                                         <label>Due</label>\n                                                         <DatePicker\n                                                             selected={this.state.dueDate}\n                                                             onChange={date => this.setState({dueDate:date})}\n                                                             showTimeSelect\n                                                             timeFormat=\"p\"\n                                                             timeIntervals={15}\n                                                             dateFormat=\"Pp\"\n                                                         />\n                                                     </Form.Field>\n                                                     <Form.Field inline required>\n                                                         <label>General Instructions</label>\n                                                         <TextArea style={{ minHeight: 100, minWidth:200, maxHeight: 100, maxWidth:300,}}\n                                                                   placeholder={\"markdown instructions\"}\n                                                                   name={\"instructions\"}\n                                                                   value={this.state.instructions}\n                                                                   onChange={(e)=>{this.handleChanges(e)}}/>\n                                                     </Form.Field>\n                                                     <Grid textAlign={\"center\"}>\n                                                         <Grid.Column width={10}>\n                                                             {this.displayRubrics()}\n                                                         </Grid.Column>\n                                                     </Grid>\n\n                                                     <Form.Field inline required>\n                                                         <label>Enter number of reviews</label>\n                                                         <Input name={`num`}\n                                                                type='number' label='num' placeholder='num' width={4}\n                                                                onChange={(e) => this.handleChanges(e)}\n                                                                min={0} max={currentSubmissions.length}\n                                                                value={this.state.num}/>\n                                                     </Form.Field>\n                                                     {this.display()}\n                                                     {/*<Button onClick={(e)=> this.assignTask(e,this.state.num)} disabled={!this.state.selectedReview}>*/}\n                                                     {/*    Assign students for peer review*/}\n                                                     {/*</Button>*/}\n                                                     <span>\n                                <Button type='submit' onClick={(e)=> this.handleSubmit(e,this.state.num)}\n                                        disabled={!this.state.selectedReview ||\n                                        !this.state.instructions || !this.state.rubric || this.state.num <=0 }>Submit</Button>\n                                </span>\n                                                 </div>\n                                                 /*Display for create submission task screen*/\n                                                 :\n                                                 <div>\n                                                     <Form.Field inline required>\n                                                         <label>Task name</label>\n                                                         <Input placeholder='Eg: HW3'\n                                                                name={\"selectedReview\"}\n                                                                value={this.state.selectedReview}\n                                                                onChange={(e)=>this.handleChanges(e)}/>\n                                                     </Form.Field>\n                                                     <Form.Field inline required>\n                                                         <label>Due</label>\n                                                         <DatePicker\n                                                             selected={this.state.dueDate}\n                                                             onChange={date => this.setState({dueDate:date})}\n                                                             showTimeSelect\n                                                             timeFormat=\"p\"\n                                                             timeIntervals={15}\n                                                             dateFormat=\"Pp\"\n                                                         />\n                                                     </Form.Field>\n                                                     <span>\n                                <Button type='submit' onClick={(e)=> this.handleSubmit(e)}\n                                disabled={!this.state.selectedReview}>Submit</Button>\n                                </span>\n                                                 </div>\n\n                                         }\n                                     </Form>\n                                 </Segment>\n\n                             </Grid.Row>\n                         </Grid.Column>\n\n                     </Grid>\n                 </div>\n\n             </div>\n\n         }\n         }\n\n}\n\n","/*This view is rendered when teacher clicks on a task under submission tasks.\n* Teacher can view all submissions posted by each student for a task and can delete any inappropriate submissions.\n* Teacher can also task details like due date*/\nimport React from 'react';\nimport {\n    Icon,\n    Grid,\n    Table,\n    Header,\n    Segment,\n    Label, Form, Input, Select,Button,Confirm\n} from 'semantic-ui-react';\n\n\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport 'prismjs/themes/prism-coy.css';\nimport Prism from \"prismjs\";\nimport ReactCommonmark from \"react-commonmark\";\nimport DatePicker from \"react-datepicker\";\nimport Cookies from \"universal-cookie\";\n\n\n\nexport default class StudentSubmissionSummary extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {specificSubmissions:props.specificSubmissions, currentSTask:props.currentSTask,\n            content:\"Click on a student ID to view their submission\",\n        \"task-name\":props.currentSTask[\"task-name\"],open:false,isDeleted:false,\n        due:new Date(props.currentSTask[\"due\"]),\n        mode:props.mode, isEdited:false,submittedOn:\"\",\n        submissionTasks:props.submissionTasks}\n\n    }\n\n    //When a props is changed, a new state is returned\n    static getDerivedStateFromProps(props,state){\n        if(props.currentSTask === state.currentSTask){\n            return null;\n        }\n        else{\n            return {currentSTask:props.currentSTask ,specificSubmissions:props.specificSubmissions,\n                content:\"Click on a student ID to view their submission\",\n                \"task-name\":props.currentSTask[\"task-name\"],\n                due:new Date(props.currentSTask[\"due\"])}\n        }\n\n    }\n    componentDidUpdate() {\n        Prism.highlightAll();\n\n    }\n    componentDidMount() {\n        Prism.highlightAll();\n    }\n\n    // function to set the state with the submission of each student when a student id is clicked\n    handleClick(event,item){\n        //// console.log(item[\"content\"]);\n        this.setState({content:item[\"content\"], \"student-id\":item[\"netId\"],submittedOn:item[\"submittedOn\"]});\n    }\n\n    // function to display the content of submission of each student with syntax highlighting\n    viewContent(){\n        const markdownInstruction = this.state.content;\n        const rawHtml = <div id=\"rawHtml\" className=\"language-html\">\n            <ReactCommonmark source={markdownInstruction} />\n        </div>\n        return <Segment style={{overflow: 'auto',minHeight:500,maxHeight:330,maxWidth:1000,minWidth:200 }}>\n            <Button onClick={(e)=>this.handleDeleteSubmission(e)} color={\"red\"}\n                disabled={this.state.content===\"Click on a student ID to view their submission\"}>\n                Delete submission</Button>\n            <Label>Submitted on:{new Date(this.state.submittedOn).toLocaleString()}</Label>\n            {rawHtml}\n        </Segment>\n    }\n\n    // function to handle delete submission button when clicked by instructor\n    handleDeleteSubmission(e)\n    {\n        const cookies = new Cookies();\n        const gotCookie =cookies.get('user');\n        if(typeof cookies.get('user') === \"undefined\") {\n            alert(\"session expired\");\n            this.props.onclickLogout()\n        }\n        else {\n            // let nextStudent=\"\";\n            let clickedStudentIndex = this.state.specificSubmissions.findIndex((item, index, array) => {\n                return item[\"netId\"] === this.state[\"student-id\"];\n            });\n            // if(clickedStudentIndex === 0){\n            //     nextStudent = this.state.specificSubmissions\n            // }\n            const _this = this;\n            fetch('/submissions/' + this.state.currentSTask[\"task-name\"] + '/student/' + this.state[\"student-id\"], {\n                method: 'DELETE',\n                headers: {\n                    \"Content-type\": \"application/json\"\n                }\n            }).then(function (response) {\n                // console.log(\"inside this\");\n                _this.state.specificSubmissions.splice(clickedStudentIndex, 1);\n                _this.setState({specificSubmissions: _this.state.specificSubmissions, content: \"\"});\n                _this.props.update();\n            })\n        }\n    }\n\n    // function to handle the edit task button\n    handleEditTask(e){\n        const cookies = new Cookies();\n        const gotCookie =cookies.get('user');\n        if(typeof cookies.get('user') === \"undefined\") {\n            alert(\"session expired\");\n            this.props.onclickLogout()\n        }\n        else {\n            let taskIndex = this.state.submissionTasks.findIndex((item, index, arry) => {\n                return item[\"task-name\"] === this.state[\"task-name\"];\n            });\n            const _this = this;\n            let submissionTask = {\n                type: \"submission\", \"task-name\": this.state[\"task-name\"],\n                due: this.state.due.toISOString()\n            };\n            fetch('/submissionTask/' + this.state.currentSTask[\"task-name\"], {\n                method: 'PUT',\n                headers: {\n                    \"Content-type\": \"application/json\"\n                },\n                body: JSON.stringify(submissionTask)\n            }).then(function (response) {\n                alert(\"Task has been edited\");\n                _this.state.submissionTasks.splice(taskIndex, 1, submissionTask);\n                _this.setState({isEdited: true, submissionTasks: _this.state.submissionTasks});\n                _this.props.update();\n            })\n        }\n    }\n\n\n    // function to handle the delete task. Displays a confirm dialog box with cancel and yes buttons\n    handleDeleteTask(){\n        const cookies = new Cookies();\n        //const gotCookie =cookies.get('user');\n        if(typeof cookies.get('user') === \"undefined\") {\n            alert(\"session expired\");\n            this.props.onclickLogout()\n        }\n        else {\n            this.setState({open: true})\n        }\n    }\n   // function to handle cancel button in the delete confirm dialog box\n    handleCancel =() =>{\n        console.log(\"fffffff\");\n        this.setState({open:false})\n    }\n\n    // function to handle yes button in the delete conform dialog box\n    handleConfirm = ()=>{\n        console.log(\"deeeeeeee\");\n        const _this = this;\n        let taskIndex = _this.state.submissionTasks.findIndex((item, index, arry) => {\n            return item[\"task-name\"] === this.state[\"task-name\"];\n        });\n            // Deleted the submission task\n            fetch('/submissionTask/' + this.state.currentSTask[\"task-name\"], {\n                method: 'DELETE',\n                headers: {\n                    \"Content-type\": \"application/json\"\n                }\n            }).then(() => {\n                // Deleted the submissions from the deleted submission task\n                // console.log(\"deleteeeeee\", this.state.currentSTask[\"task-name\"]);\n                fetch('/submissions/' + this.state.currentSTask[\"task-name\"], {\n                    method: 'DELETE',\n                    headers: {\n                        \"Content-type\": \"application/json\"\n                    }\n                }).then(function (response) {\n                    //// console.log(\"inside this\");\n                    alert(\"Task has been deleted\");\n                    _this.state.submissionTasks.splice(taskIndex, 1);\n                    _this.state.specificSubmissions = [];\n                    _this.setState({\n                        isDeleted: true, submissionTasks: _this.state.submissionTasks,\n                        specificSubmissions: _this.state.specificSubmissions,\n                        open: false\n                    });\n                    //Display homepage after deletion\n                    _this.props.viewHome();\n                })\n            });\n    }\n\n\n// function to render all details\n    render(){\n     // console.log(this.state);\n        // function to display all student ids that have submitted the assignment\n       let students = this.state.specificSubmissions.map((item,index,array)=>{\n           return <Table.Row key={`row${item[\"netId\"]}`}><Table.Cell key={`submission${item[\"netId\"]}`}\n           onClick={(event)=>this.handleClick(event,item)} active={this.state[\"student-id\"] === item[\"netId\"]}>\n               {item[\"netId\"]}\n           </Table.Cell>\n           </Table.Row>\n       })\n\n\n        return <Grid stackable>\n            <Grid.Column>\n                <Grid.Row>\n                    <Segment style={{boxShadow:\"none\"}}>\n                        <span><Header  textAlign={\"center\"} as={\"h4\"}>\n                            <Input label={\"Submission Task-name\"} size='small' icon={\"tag\"} name={\"task-name\"}\n                                   value={this.state[\"task-name\"]}\n                                   readOnly\n                                   onChange={(e)=> this.setState({\"task-name\":e.target.value})}/>\n                        </Header>\n                        </span>\n                    </Segment>\n                </Grid.Row>\n                <Grid.Row>\n                    <Grid.Column>\n                        <Form centered={\"true\"}>\n                            <Segment textAlign={\"center\"}>\n                                <Form.Group centered={\"true\"} widths='equal'>\n                                    <Form.Field inline required>\n                                        <Label icon='calendar alternate' content=\"Due\"/>\n                                        <DatePicker\n                                            selected={this.state.due}\n                                            onChange={date => this.setState({due:date})}\n                                            showTimeSelect\n                                            timeFormat=\"p\"\n                                            timeIntervals={15}\n                                            dateFormat=\"Pp\"\n                                        />\n                                    </Form.Field>\n                                    <Button onClick={(e)=>this.handleEditTask(e)}>Save task details!</Button>\n                                    <Button onClick={(e)=>this.handleDeleteTask(e)}> Delete task</Button>\n                                    {/*Display the confirm dialog box for delete button*/}\n                                    <Confirm\n                                        open={this.state.open}\n                                        onCancel={this.handleCancel}\n                                        onConfirm={this.handleConfirm}\n                                    />\n                                </Form.Group>\n\n                            </Segment>\n                        </Form>\n                    </Grid.Column>\n\n                </Grid.Row>\n                <Grid.Row>\n                    <Grid>\n                        <Grid.Row>\n                    <Grid.Column width={4}>\n                        {/*Table that displays all submitter ids of an assignment*/}\n                        <Table color={\"blue\"}>\n                            <Table.Header>\n                                <Table.Row>\n                                <Table.HeaderCell>Student Ids submitted</Table.HeaderCell>\n                                </Table.Row>\n                            </Table.Header>\n                            <Table.Body>\n                                {/*Display all the students that have submitted the assignment*/}\n                                {students}\n                            </Table.Body>\n                        </Table>\n                    </Grid.Column>\n                    <Grid.Column width={12}>\n                        {/*Display the content submitted by each student*/}\n                        {this.viewContent()}\n                    </Grid.Column>\n                        </Grid.Row>\n                    </Grid>\n                </Grid.Row>\n            </Grid.Column>\n\n        </Grid>\n    }\n}","/*This view is rendered when teacher clicks on a task under review tasks.\n* Teacher can view all reviews given for each student for a task and can edit any of the reviews given by their peers.\n* Teacher can also task details like due date, rubrics*/\nimport React from 'react';\nimport {\n    Menu,\n    Icon,\n    Grid,\n    Header,\n    Segment,\n    Table, Input, Form, Label, Select, Button, Modal, Confirm, TextArea\n} from 'semantic-ui-react';\n\nimport 'prismjs/themes/prism-coy.css';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport Prism from \"prismjs\";\nimport ReactCommonmark from \"react-commonmark\";\nimport DatePicker from \"react-datepicker\";\nimport Cookies from \"universal-cookie\";\n\n\n\nexport default class StudentReviewSummary extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {specificReviews:props.specificReviews, currentRTask:props.currentRTask ,content:\"\",\n                      specSubmissions:props.specSubmissions, reviewDetails:[],reviewRubric:[],\n            \"peer-review-for\":props.currentRTask[\"peer-review-for\"],\n            due:new Date(props.currentRTask[\"due\"]), specAssignments:props.specAssignments,\n            teacherRubrics:props.currentRTask[\"rubric\"],\n        open:false, reviewTasks:props.reviewTasks,isDeleted:false,isEdited:false,isTaskEdited:false,isSaved:false,\n        instructions:props.currentRTask[\"instructions\"]}\n\n    }\n\n    //When a props is changed, a new state is returned\n    static getDerivedStateFromProps(props,state){\n        if(props.currentRTask === state.currentRTask){\n            return null;\n        }\n        else{\n            return {specificReviews:props.specificReviews, currentRTask:props.currentRTask ,\n                specSubmissions:props.specSubmissions,\n                \"peer-review-for\":props.currentRTask[\"peer-review-for\"],\n                due:new Date(props.currentRTask[\"due\"]), specAssignments:props.specAssignments,\n                teacherRubrics:props.currentRTask[\"rubric\"],\n                reviewTasks:props.reviewTasks,\n                instructions:props.currentRTask[\"instructions\"]}\n        }\n\n    }\n    \n    componentDidUpdate(prevProps, prevState) {\n        //// console.log('Component did update!',);\n        // // console.log(\"prevprops\",prevProps);\n        // // console.log(\"prevState\",prevState);\n\n        // When another task is selected,  change the rubric details and review details in the state\n        if(prevState[\"peer-review-for\"] !== this.state[\"peer-review-for\"]){\n            // set rubric details\n            let rubricsDisplay = this.state.currentRTask[\"rubric\"].map((element, index, array) => {\n                //// console.log(\"displayed for loop\", index + 1, \"times\");\n\n                this.setState({\n                    [`point${index}`]: element[\"points\"],\n                    [`rubric${index}`]: element[\"rubric-name\"],\n                    [`criteria${index}`]: element[\"criteria\"],\n                });\n            });\n            // set review details of students\n            let reviewsDisplay = this.state.specificReviews.map((element,index,array)=>{\n                element[\"review\"][\"rubric\"].map((item,ind,arr)=>{\n                    // console.log(\"elementin update\",element);\n                    this.setState({\n                        [`inputPoint${item[\"rubric-name\"]}${element[\"submitter-id\"]}${element[\"reviewer-id\"]}`]: item[\"points-given\"],\n                        [`inputComment${item[\"rubric-name\"]}${element[\"submitter-id\"]}${element[\"reviewer-id\"]}`]: item[\"comments\"]\n\n                    });\n                });\n            });\n        }\n\n        Prism.highlightAll();\n\n    }\n\n    componentDidMount() {\n        // set the rubric details and review details in the state when the component is initially mounted\n        let rubricsDisplay = this.state.currentRTask[\"rubric\"].map((element, index, array) => {\n            //// console.log(\"displayed for loop\", index + 1, \"times\");\n\n            this.setState({\n                [`point${index}`]: element[\"points\"],\n                [`rubric${index}`]: element[\"rubric-name\"],\n                [`criteria${index}`]: element[\"criteria\"],\n            });\n        });\n\n        let reviewsDisplay = this.state.specificReviews.map((element,index,array)=>{\n            element[\"review\"][\"rubric\"].map((item,ind,arr)=>{\n                // console.log(\"elementin mount\",element);\n                this.setState({\n                    [`inputPoint${item[\"rubric-name\"]}${element[\"submitter-id\"]}${element[\"reviewer-id\"]}`]: item[\"points-given\"],\n                    [`inputComment${item[\"rubric-name\"]}${element[\"submitter-id\"]}${element[\"reviewer-id\"]}`]: item[\"comments\"]\n\n                });\n            });\n        });\n\n        Prism.highlightAll();\n    }\n    \n    // function to display the total points  for a student\n    viewPoints(item){\n\n            let submitters = this.state.specificReviews.filter((element ,index,array)=>{\n                return element[\"submitter-id\"] === item\n            });\n            let totalPoints = submitters.map((element,index,array)=>{\n                //// console.log(element[\"total-points\"]);\n                if(element[\"review\"][\"total-points\"] < 10){\n                    return <Table.Cell negative key={`review${element[\"reviewer-id\"]}`}>\n                        {element[\"review\"][\"total-points\"]}\n                    </Table.Cell>\n                }\n                else{\n                    return <Table.Cell  key={`review${element[\"reviewer-id\"]}`}>\n                        {element[\"review\"][\"total-points\"]}\n                    </Table.Cell>\n                }\n\n            });\n            return totalPoints;\n        }\n\n\n    // function to get all reviewer details and submission content for each submitter and set in state\n    handleItemClick(event,item){\n        // console.log(\"clicked review item\");\n        let content=\"\";\n        let submission = this.state.specSubmissions.find((element,index,array)=>{\n            //// console.log(element[\"assignment-name\"]);\n            return element[\"netId\"] === item;\n        });\n        if(typeof submission !=\"undefined\"){\n            content=submission[\"content\"];\n        }\n\n        let reviewDetails = this.state.specificReviews.filter((element,index,array)=>{\n            return element[\"submitter-id\"] === item;\n\n        });\n        // console.log(\"reviewDetails\",reviewDetails);\n\n        //// console.log(\"content\",content)\n        this.setState({content:content, reviewDetails:reviewDetails,\"student-id\":item,\n            viewReviews:false, \"reviewer-id\":\"\"});\n    }\n    \n    // function to display the submission content of each submitter\n    viewContents(){\n        const markdownInstruction = this.state.content;\n        const rawHtml = <div id=\"rawHtml\" className=\"language-html\">\n            <ReactCommonmark source={markdownInstruction} />\n        </div>\n        return <Segment style={{overflow: 'auto',minHeight:500,maxHeight:330,maxWidth:1000,minWidth:150 }}>\n            {rawHtml}\n        </Segment>\n    }\n\n    // function to set the state with the review points and comments for each submitter when a reviewer is clicked\n    handleReviewClick(event,review){\n        // console.log(\"clicked\",review, review[\"review\"][\"rubric\"]);\n        this.setState({\"reviewRubric\": review[\"review\"][\"rubric\"], \"reviewer-id\":review[\"reviewer-id\"],\n                     viewReviews:true\n        });\n\n    }\n\n    //  function to add a rubric for a review task\n    addRubrics(e) {\n        this.state.teacherRubrics.push({\"points\": \"\", \"rubric-name\": \"\",\n            \"criteria\": \"\"});\n        //let lastElement = this.state.rubricIds[this.state.rubricIds.length-1];\n        this.setState({teacherRubrics: this.state.teacherRubrics});\n    }\n\n    // toggle the view when edit review button is clicked\n    handleEditReviews(e){\n        this.setState({isEdited:true});\n    }\n    \n    // toggle the view when edit task button is clicked\n    handleEditTaskDetails(e){\n        this.setState({isTaskEdited:true});\n    }\n\n    // deleteRubrics(e,element,index){\n    //\n    //     let ad = this.state.currentRTask[\"rubric\"].findIndex((item,index,arr)=>{\n    //         return item[\"rubric-name\"] == element[\"rubric-name\"];\n    //     })\n    //\n    //    delete this.state.currentRTask[\"rubric\"][ad];\n    //     this.setState({[`point${element}[\"rubric-name\"]}${index}`]:undefined,\n    //         [`rubric${element}[\"rubric-name\"]}${index}`]:undefined,\n    //         [`criteria${element}[\"rubric-name\"]}${index}`]:undefined,\n    //         rubrics:this.state.currentRTask[\"rubric\"]})\n\n        // // console.log(element);\n        // this.state.rubric.splice(index,1);\n        // let i = this.state.rubricIds.indexOf(element);\n        // this.state.rubricIds.splice(i,1);\n        // if(i > -1){\n        //     this.setState({[`point${element}`]:undefined, [`rubric${element}`]:undefined,\n        //         [`criteria${element}`]:undefined,rubric:this.state.rubric,rubricIds:this.state.rubricIds});\n        // }\n        //// console.log(\"deleted\", this.state.rubricIds);\n\n    //}\n\n    // function to handle when only  rubric input\n    handleRubricChange(e,element,index) {\n        // handle the input of rubric fields\n        this.handleEachChange(e).then(() => {\n            // create object for each rubric\n            let rubric_task = {\n                \"rubric-name\": this.state[`rubric${index}`],\n                \"points\": this.state[`point${index}`],\n                \"criteria\": this.state[`criteria${index}`],\n            }\n            // Add each rubric into an array and set in state\n            this.state.teacherRubrics.splice(index, 1, rubric_task);\n            this.setState({\n                teacherRubrics: this.state.teacherRubrics,\n            });\n        });\n    }\n\n    // function to edit the review task details\n    handleEditTask(e){\n        const cookies = new Cookies();\n        const gotCookie =cookies.get('user');\n        if(typeof cookies.get('user') === \"undefined\") {\n            alert(\"session expired\");\n            this.props.onclickLogout()\n        }\n        else {\n            let taskIndex = this.state.reviewTasks.findIndex((item, index, arry) => {\n                return item[\"peer-review-for\"] === this.state[\"peer-review-for\"];\n            });\n            const _this = this;\n            let reviewTask = {\n                \"peer-review-for\": this.state[\"peer-review-for\"],\n                due: this.state.due.toISOString(), rubric: this.state.teacherRubrics,\n                instructions: this.state.instructions\n            };\n            let studentAssign = this.state.specAssignments;\n            // Update the review task details\n            fetch('/reviewTask/' + this.state.currentRTask[\"peer-review-for\"], {\n                method: 'PUT',\n                headers: {\n                    \"Content-type\": \"application/json\"\n                },\n                body: JSON.stringify(reviewTask)\n            }).then(() => {\n                // change task details in studentAssignment as well\n                fetch('/studentAssignment/' + this.state.currentRTask[\"task-name\"], {\n                    method: 'PUT',\n                    headers: {\n                        \"Content-type\": \"application/json\"\n                    },\n                    body: JSON.stringify(studentAssign)\n                }).then(function (response) {\n                    // console.log(\"inside this\");\n                    _this.props.update();\n                })\n            }).then(function (response) {\n                _this.state.reviewTasks.splice(taskIndex, 1, reviewTask);\n                _this.setState({isTaskEdited: false, reviewTasks: _this.state.reviewTasks,});\n            });\n        }\n    }\n\n    // function to handle the input change\n    handleEachChange = async(e,rubrics,index) =>{\n        const target = e.target;\n        const value = target.value;\n        const name = target.name;\n        this.setState({\n            [name]:value\n        });\n\n\n    }\n\n    // function to edit a review posted by a student\n    handleEditOneReview(e,item,index){\n        // function to handle input changes for review points and comment posted by a student\n        this.handleEachChange(e).then(()=> {\n\n            let rubric_task = {\n                \"rubric-name\": item[\"rubric-name\"],\n                \"possible-points\": item[\"possible-points\"],\n                \"points-given\": this.state[`inputPoint${item[\"rubric-name\"]}${this.state[\"student-id\"]}${this.state[\"reviewer-id\"]}`],\n                \"comments\": this.state[`inputComment${item[\"rubric-name\"]}${this.state[\"student-id\"]}${this.state[\"reviewer-id\"]}`],\n            }\n            this.state.reviewRubric.splice(index, 1, rubric_task);\n            this.setState({\n                reviewRubric: this.state.reviewRubric\n            });\n        });\n\n    }\n\n    // function to handle save button when clicked\n    handleSaveReviews(e){\n        const cookies = new Cookies();\n        //const gotCookie =cookies.get('user');\n        if(typeof cookies.get('user') === \"undefined\") {\n            alert(\"session expired\");\n            this.props.onclickLogout()\n        }\n        else {\n            //Get total points\n            let totalPoints = 0;\n            for (let i = 0; i < this.state.reviewRubric.length; i++) {\n                totalPoints += parseInt(this.state.reviewRubric[i][\"points-given\"]);\n            }\n\n            // get index of the review that is edited\n            let reviewIndex = this.state.specificReviews.findIndex((element) => {\n                return element[\"reviewer-id\"] === this.state[\"reviewer-id\"] && element[\"submitter-id\"] === this.state[\"student-id\"];\n            })\n\n            const _this = this;\n\n            let editedReviews = {\n                \"assignment-name\": this.state[\"peer-review-for\"], \"reviewer-id\": this.state[\"reviewer-id\"],\n                \"submitter-id\": this.state[\"student-id\"],\n                review: {\"total-points\": totalPoints, \"general-comments\": \"\", rubric: this.state.reviewRubric}\n            };\n\n            // Update the review details in the database\n            fetch('/reviews/' + this.state[\"peer-review-for\"] + '/reviewer/' + this.state[\"reviewer-id\"] + '/submitter/' + this.state[\"student-id\"]\n                , {\n                    method: 'PUT',\n                    headers: {\n                        \"Content-type\": \"application/json\"\n                    },\n                    body: JSON.stringify(editedReviews)\n                }).then(function (response) {\n                _this.state.specificReviews.splice(reviewIndex, 1, editedReviews);\n                _this.setState({\n                    specificReviews: _this.state.specificReviews, isEdited: false\n                });\n            });\n        }\n\n    }\n\n    // function to handle the delete task. Displays a confirm dialog box with cancel and yes buttons\n    handleDeleteTask(){\n        const cookies = new Cookies();\n        //const gotCookie =cookies.get('user');\n        if(typeof cookies.get('user') === \"undefined\") {\n            alert(\"session expired\");\n            this.props.onclickLogout()\n        }\n        else {\n            this.setState({open: true});\n        }\n\n    }\n\n// function to handle cancel button in the delete confirm dialog box\n    handleCancel =() =>{\n        this.setState({open:false})\n    }\n\n    // function to handle yes button in the delete conform dialog box\n    handleConfirm = ()=> {\n            const _this = this;\n            let taskIndex = _this.state.reviewTasks.findIndex((item, index, arry) => {\n                return item[\"peer-review-for\"] === this.state[\"peer-review-for\"];\n            });\n            //Delete task from database\n            fetch('/ReviewTask/' + this.state.currentRTask[\"peer-review-for\"], {\n                method: 'DELETE',\n                headers: {\n                    \"Content-type\": \"application/json\"\n                }\n            }).then(() => {\n                // Delete reviews after deleting the review task\n                fetch('/reviews/' + this.state.currentRTask[\"peer-review-for\"], {\n                    method: 'DELETE',\n                    headers: {\n                        \"Content-type\": \"application/json\"\n                    }\n                }).then(() => {\n                    //Delete the student assignments for a review task after deleting the task\n                    fetch('/studentAssignment/' + this.state.currentRTask[\"peer-review-for\"], {\n                        method: 'DELETE',\n                        headers: {\n                            \"Content-type\": \"application/json\"\n                        }\n                    }).then(function (response) {\n                        // console.log(\"specass\", _this.state.specAssignments);\n                        alert(\"Task has been deleted\");\n                        //Remove task from array and change student assignments object to empty\n                        _this.state.reviewTasks.splice(taskIndex, 1);\n                        _this.state.specAssignments[\"studentsAssignment\"] =[]\n                        _this.state.specificReviews = [];\n                        _this.setState({\n                            isDeleted: true, reviewTasks: _this.state.reviewTasks,\n                            specAssignments: _this.state.specAssignments, specificReviews: _this.state.specificReviews,\n                            open: false\n                        });\n                        //Display homepage after deletion\n                        _this.props.viewHome();\n                    });\n                });\n            });\n        }\n\n\n\n    // function to handle the view of rubrics. Based on the number of rubrics in array, all rubrics are displayed\n    displayRubrics() {\n        let rubricsDisplay = this.state.teacherRubrics.map((element, index, array) => {\n            //// console.log(\"displayed for loop\", index + 1, \"times\");\n            const criteriaMarkdown = this.state[`criteria${index}`];\n            const criteriaHighlighted = <div id=\"rawHtml\" className=\"language-html\">\n                <ReactCommonmark source={criteriaMarkdown} />\n            </div>\n\n\n            //return <div key={`index${element}`}>aaa</div>\n            return <div key={`divvv${index}`}>\n                {/*toggle between edit task screen and task view screen*/}\n                {this.state.isTaskEdited ?\n                  <Form.Group key={`group${index}`}>\n                    <Label content={\"Rubric\"}/>\n                      <Form.Input name={`rubric${index}`}\n                                  label='rubric-name' placeholder='rubric-name'\n                                  width={8}\n                                  disabled={this.state.specificReviews.length > 0}\n                                  key={`rubric${index}`}\n                                  required\n                                  onChange={(e) => this.handleRubricChange(e, element, index)}\n                                  value={this.state[`rubric${index}`]}/>\n                        <Form.Input name={`point${index}`}\n                                    type='number' label='Points' placeholder='Points' width={6}\n                                    onChange={(e) => this.handleRubricChange(e, element, index)}\n                                    disabled={this.state.specificReviews.length > 0 ||\n                                    this.state[`rubric${index}`]=== \"\"}\n                                    key={`point${index}`}\n                                    required\n                                    value={this.state[`point${index}`]}/>\n\n                        <Form.TextArea name={`criteria${index}`}\n                                       label='criteria' placeholder='criteria'\n                                       width={12}\n                                       disabled={this.state.specificReviews.length > 0 ||\n                                       this.state[`rubric${index}`]=== \"\"}\n                                       required\n                                       key={`criteria${index}`}\n                                       onChange={(e) => this.handleRubricChange(e, element, index)}\n                                       value={this.state[`criteria${index}`]}/>\n                    <Button basic icon size={\"mini\"} circular\n                            onClick={(e) => this.addRubrics(e)}\n                            disabled={!this.state[`point${index}`] ||\n                            !this.state[`rubric${index}`] ||\n                            !this.state[`criteria${index}`]}>\n                        <Icon name='add'/>\n                    </Button>\n                    {/*<Button basic icon size={\"mini\"} circular*/}\n                    {/*        onClick={(e) => this.deleteRubrics(e,element,index)}*/}\n                    {/*        disabled={this.state.rubrics.length === 1}>*/}\n                    {/*    <Icon name='delete'/>*/}\n                    {/*</Button>*/}\n                </Form.Group>\n                    /*display normal task view screen*/\n            :\n                 <Form.Group key={`group${index}`}>\n                    <Label content={\"Rubric\"}/>\n                     <Form.Input key={`rubric${index}`}\n                                 label='rubric-name'\n                                 width={4}\n                                 readOnly\n                                 value={this.state[`rubric${index}`] || \"\"}/>\n                        <Form.Input key={`point${index}`}\n                                    label='Points'\n                                    width={3}\n                                    readOnly\n                                    value={this.state[`point${index}`] || \"\"}/>\n\n                        <Segment style={{\n                            overflow: 'auto',\n                            minHeight: 100, maxHeight: 100, maxWidth: 250, minWidth: 250\n                        }}\n                                 textAlign=\"left\">\n                            {criteriaHighlighted}\n                        </Segment>\n\n\n                    {/*<Button basic icon size={\"mini\"} circular*/}\n                    {/*        onClick={(e) => this.deleteRubrics(e,element,index)}*/}\n                    {/*        disabled={this.state.rubrics.length === 1}>*/}\n                    {/*    <Icon name='delete'/>*/}\n                    {/*</Button>*/}\n                </Form.Group>\n            }\n            </div>\n        });\n        return rubricsDisplay;\n    }\n\n    // Display how the students are assigned for peer-review\n    displayAssignments(){\n        //// console.log(\"function called\");\n        //function to display the reviewers for each student\n        function viewStudents(element){\n            let reviewers = element[\"reviewers\"].map((item,index,array)=>{\n                return <Table.Cell key={`cell2${index}`}>\n                    {item}\n\n                </Table.Cell>\n\n            });\n            return reviewers;\n        }\n\n        // Display all submitters for each task\n        let submitterId = this.state.specAssignments[\"studentsAssignment\"].map((element,index,array)=>{\n            return <Table.Row key={`row${index}`}>\n                <Table.Cell key={`cell${index}`}>\n                  {element[\"student\"]}\n                </Table.Cell>\n                {viewStudents(element)}\n            </Table.Row>\n        });\n\n\n        // return all the details in a modal\n        return  <Modal trigger={<Button >View assignments</Button>}>\n            <Modal.Header>Rubrics</Modal.Header>\n            <Modal.Content  scrolling>\n\n                <Modal.Description>\n                    <Header>Modal Header</Header>\n                    <Table color={\"blue\"} celled >\n                        <Table.Header>\n                            <Table.Row>\n                                <Table.HeaderCell>Submitter Id</Table.HeaderCell>\n                                <Table.HeaderCell colSpan={this.state.num}>Reviewed by\n                                </Table.HeaderCell>\n\n                            </Table.Row>\n                        </Table.Header>\n\n                        <Table.Body>\n                            {submitterId}\n                        </Table.Body>\n                    </Table>\n\n                </Modal.Description>\n            </Modal.Content>\n\n        </Modal>\n    }\n\n\n\n\n\n    render(){\n        //// console.log(\"state\",this.state);\n\n        // Condition to check if all fields are filled before submit or disable submit button\n        let isEnabled = true;\n        let count =this.state.reviewRubric.length;\n        for(let i=0 ; i<this.state.reviewRubric.length;i++){\n            if(this.state.reviewRubric[i][\"points-given\"] ===\"\" ||  this.state.reviewRubric[i][\"comments\"] === \"\"){\n                count = count-1;\n            }\n        }\n        if(count !== this.state.reviewRubric.length){\n            isEnabled =false\n        }\n\n\n        // Show all submitter Ids who have submitted assignments for a Homework in a table\n        let submittersSet = new Set();\n        let students = this.state.specificReviews.map((item,index,array)=>{\n            submittersSet.add(item[\"submitter-id\"]);\n        });\n\n        let newArray = Array.from(submittersSet);\n        //// console.log(\"newarray\",newArray);\n        let studentsSubmissions = newArray.map((item,index,array)=>{\n            return <Table.Row key={`row${item}`}>\n                <Table.Cell key={`submission${item}`}\n                            onClick={(event)=>this.handleItemClick(event,item)}\n                            active={this.state[\"student-id\"] === item}>\n                    {item}\n                </Table.Cell>\n                    {this.viewPoints(item)}\n                </Table.Row>\n        });\n\n\n             let reviewerIds = this.state.reviewDetails.map((review,index,array)=> {\n                 // console.log(\"getting printd\");\n\n                     return <Menu.Item\n                         name={`ReviewDisplay${index}`}\n                         as='a'\n                         onClick={(event) => this.handleReviewClick(event, review)}\n                         active={review[\"reviewer-id\"] === this.state[\"reviewer-id\"]}\n                         key={`ReviewDisplay${review}${index}`}\n                     >\n                         {review[\"reviewer-id\"]}\n                     </Menu.Item>\n\n\n             });\n             // convert markdown instructions to highlighted syntax\n        const markdownInstruction = this.state.instructions;\n        const highlightedInstruction = <div id=\"rawHtml\" className=\"language-html\">\n            <ReactCommonmark source={markdownInstruction} />\n        </div>\n\n\n        // Dsiplay all points and comments(review details ) of each review\n         let data = this.state.reviewRubric.map((item,index,array)=>{\n            const comment = item[\"comments\"];\n            const rawHtml1 = <div id=\"rawHtml\" className=\"language-html\">\n                <ReactCommonmark source={comment} />\n            </div>\n\n                return <Table.Row key={`roww${index}${item[\"rubric-name\"]}`}>\n                    <Table.Cell key={`rubric${index}${item[\"rubric-name\"]}`}>\n                        {item[\"rubric-name\"]}\n                    </Table.Cell>\n                    <Table.Cell key={`possiblepts${index}${item[\"rubric-name\"]}`}>\n                        {item[\"possible-points\"]}\n                    </Table.Cell>\n                    <Table.Cell key={`pointsGiven${index}${item[\"rubric-name\"]}`}>\n                        {/*toggle between edit view and normal view of reviews*/}\n                        {this.state.isEdited ?\n                            <input type=\"number\"\n                                   style={{width: \"4em\"}}\n                                   name={`inputPoint${item[\"rubric-name\"]}${this.state[\"student-id\"]}${this.state[\"reviewer-id\"]}`}\n                                   required\n                                   onChange={(e)=>this.handleEditOneReview(e,item,index)}\n                                   key={`inputPoint${item[\"rubric-name\"]}${this.state[\"student-id\"]}${this.state[\"reviewer-id\"]}`}\n                                   value={item[\"points-given\"] ||\n                                   this.state[`inputPoint${item[\"rubric-name\"]}${this.state[\"student-id\"]}${this.state[\"reviewer-id\"]}`]}/>\n                                   :\n                            item[\"points-given\"]\n                        }\n\n                    </Table.Cell>\n                    <Table.Cell key={`comment${index}${item[\"rubric-name\"]}`}>\n                        {this.state.isEdited ?\n                            <Input\n                                key={`inputComment${item[\"rubric-name\"]}${this.state[\"student-id\"]}${this.state[\"reviewer-id\"]}`}\n                                name={`inputComment${item[\"rubric-name\"]}${this.state[\"student-id\"]}${this.state[\"reviewer-id\"]}`}\n                                onChange={(e) => this.handleEditOneReview(e, item, index)}\n                                required\n                                value={comment ||\n                                this.state[`inputComment${item[\"rubric-name\"]}${this.state[\"student-id\"]}${this.state[\"reviewer-id\"]}`]}/>\n                            :\n                            rawHtml1\n                        }\n                    </Table.Cell>\n                </Table.Row>\n        });\n\n\n        return <div style={{marginLeft:10,marginRight:10,  minWidth: 550, marginTop:50}}>\n            <Grid stackable>\n            <Grid.Column>\n                <Grid.Row>\n                    <Segment style={{boxShadow:\"none\"}}>\n                        <span><Header  textAlign={\"center\"} as={\"h5\"}>\n                            {this.state.isTaskEdited ?\n                                <Input label={\"peer-review-for\"} icon={\"tag\"} name={\"peer-review-for\"}\n                                       value={this.state[\"peer-review-for\"]}\n                                       readOnly\n                                       onChange={(e)=> this.setState({\"peer-review-for\":e.target.value})}/>\n                                       :\n\n                                <Input label={\"peer-review-for\"}\n                                       value={this.state[\"peer-review-for\"]}\n                                       icon={\"tag\"}\n                                readOnly/>\n                            }\n\n                        </Header>\n                        </span>\n                    </Segment>\n                </Grid.Row>\n\n                <Grid.Row textAlign={\"center\"}>\n                            <Segment textAlign={\"center\"}>\n                                <Form centered={\"true\"}>\n                                    <Form.Field inline required>\n                                        <Label icon='calendar alternate' content=\"Due\"/>\n                                        {this.state.isTaskEdited ?\n                                            <DatePicker\n                                                selected={this.state.due}\n                                                onChange={date => this.setState({due:date})}\n                                                showTimeSelect\n                                                timeFormat=\"p\"\n                                                timeIntervals={15}\n                                                dateFormat=\"Pp\"\n                                            />\n                                            :\n                                            new Date(this.state.due).toLocaleString()\n                                        }\n                                    </Form.Field>\n                                    <Form.Field inline required>\n                                        <Label>General Instructions</Label>\n                                        {this.state.isTaskEdited ?\n                                            <TextArea\n                                                style={{minHeight: 100, minWidth: 200, maxHeight: 100, maxWidth: 300,}}\n                                                name={\"instructions\"}\n                                                required\n                                                value={this.state.instructions}\n                                                onChange={(e) => {\n                                                    this.handleEachChange(e)\n                                                }}/>\n                                            :\n\n                                            <Segment style={{overflow: 'auto', marginLeft:\"25em\", marginRight:\"25em\",\n                                                minHeight:300,maxHeight:300,maxWidth:600,minWidth:200 }}\n                                                     textAlign=\"left\">\n                                                {highlightedInstruction}\n                                            </Segment>\n\n                                        }\n                                    </Form.Field>\n\n\n                                    <Grid textAlign={\"center\"}>\n                                        <Grid.Column width={8}>\n                                            {this.displayRubrics()}\n                                        </Grid.Column>\n                                    </Grid>\n\n\n                                <Button onClick={(e)=>this.handleEditTaskDetails(e)} color={\"blue\"}\n                                        disabled={this.state.isTaskEdited}>Edit this task</Button>\n                                <Button onClick={(e)=>this.handleEditTask(e)} color={\"teal\"}\n                                        disabled={!this.state.isTaskEdited}>Save task details!</Button>\n                                <Button onClick={(e)=>this.handleDeleteTask(e)} color={\"red\"}> Delete task</Button>\n                                    {this.displayAssignments()}\n                                    {/*Display confirm dialog box when edit button is clicked*/}\n                                <Confirm\n                                    open={this.state.open}\n                                    onCancel={this.handleCancel}\n                                    onConfirm={this.handleConfirm}\n                                />\n\n                        </Form>\n                            </Segment>\n\n\n                </Grid.Row>\n                <Grid.Row>\n                    <Grid>\n                        <Grid.Row>\n                            <Grid.Column width={5}>\n                                {this.viewContents()}\n                            </Grid.Column>\n                            <Grid.Column width={6}>\n                                <Table color={\"teal\"}>\n                                    <Table.Header>\n                                        <Table.Row>\n                                            <Table.HeaderCell>Student Ids submitted</Table.HeaderCell>\n                                            <Table.HeaderCell colSpan={3}>Review total points</Table.HeaderCell>\n                                        </Table.Row>\n                                    </Table.Header>\n                                    <Table.Body>\n                                        {/*Display all submitter ids for an assignment*/}\n                                        {studentsSubmissions}\n                                    </Table.Body>\n                                </Table>\n                            </Grid.Column>\n                            <Grid.Column width={4}>\n                                {/*Display all reviewer ids for each submitter*/}\n                                <Segment style={{overflow: 'auto',minHeight:300,maxHeight:400,maxWidth:3000,minWidth:400 }}>\n                                <Menu pointing secondary>\n                                    {reviewerIds}\n                                </Menu>\n                                    {/*Display all review details for each review*/}\n                                {this.state.viewReviews === true ?\n                                    <div>\n                                  <Table color={\"blue\"}>\n                                    <Table.Header>\n                                    <Table.Row>\n                                    <Table.HeaderCell>Rubric name</Table.HeaderCell>\n                                    <Table.HeaderCell>Possible pts</Table.HeaderCell>\n                                    <Table.HeaderCell>Points given</Table.HeaderCell>\n                                    <Table.HeaderCell>Comments</Table.HeaderCell>\n                                    </Table.Row>\n                                    </Table.Header>\n                                    <Table.Body>\n                                        {/*Display all details of reviews*/}\n                                    {data}\n                                    </Table.Body>\n                                    </Table>\n                                    <span><Button onClick={(e)=>this.handleEditReviews(e)} color={\"blue\"}\n                                    disabled={this.state.isEdited}>Edit review</Button> </span>\n                                    <span><Button onClick={(e)=>this.handleSaveReviews(e)} color={\"teal\"}\n                                    disabled={!this.state.isEdited || !isEnabled}>Save review</Button> </span>\n                                    </div>\n                                    /*tif a reviewer id is not clicked, display this*/\n                                    :\n                                    <div>Click on a Reviewer id</div>\n\n                                }\n                                </Segment>\n\n                            </Grid.Column>\n                        </Grid.Row>\n                    </Grid>\n                </Grid.Row>\n            </Grid.Column>\n        </Grid>\n        </div>\n\n    }\n\n\n}","/*Basic view for teacher or instructor\n* This is rendered when a user is logged in as a teacher\n* */\n\nimport React from 'react';\nimport {\n    Menu,\n    Grid,\n    Dropdown, Icon, Segment, Header, Rail, Sticky, Checkbox, Button, Container\n\n} from 'semantic-ui-react';\n//import createdSubmissionTasks from '../data/createdSubmissionTasks';\n//import createdReviewTasks from '../data/createdReviewTasks'\nimport Prism from \"prismjs\";\nimport CreateReviewTask from \"./createReviewTask\";\nimport StudentSubmissionSummary from \"./studentSubmissionSummary\";\nimport ExternalLinks from \"../externalLinks\";\n//import submissionsHW from '../data/submissionsHw';\n//import reviews from '../data/reviewTasksStudents';\nimport StudentReviewSummary from './studentReviewSummary';\nimport Cookies from \"universal-cookie\";\n\n\nexport default class TeacherView extends React.Component{\n    _isMounted = false;\n    constructor(props){\n        super(props);\n        this.state = {submissionTasks:[] ,reviewTasks:[], mode:\"\",\n        submissions:[],reviews:[], specificSubmissions:[], currentSubmissionTask:\"\",specificReviews:[],\n        currentReviewTask:\"\", studentAssignment:[],specAssignments:[]}\n    }\n\n\n    componentDidUpdate(prevProps, prevState) {\n\n        // console.log(\"teacher view updated\");\n        // console.log(\"prevState sub\", prevState[\"submissionTasks\"] === this.state[\"submissionTasks\"]);\n        // console.log(\"prevState rev\", prevState[\"reviewTasks\"] , this.state[\"reviewTasks\"]);\n        //// console.log(\"nowstate\", this.state[\"submissionTasks\"]);\n        if(prevState[\"specificSubmissions\"] !== this.state[\"specificSubmissions\"]) {\n            const _this = this;\n            fetch('/submissions/', {\n                method: \"GET\",\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json'\n                }\n            }).then(response => response.json()).then(function (data) {\n\n                //// console.log(\"this is what we got in submissions\" + data.submissions);\n                //_this.state.submissions.push(data.submission);\n                _this.setState({\"submissions\": data.submissions});\n\n\n            });\n        }\n\n        else if(prevState[\"specificReviews\"] !== this.state[\"specificReviews\"]) {\n                const _this = this;\n                fetch('/reviews/', {\n                    method: \"GET\",\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Accept': 'application/json'\n                    }\n                }).then(response => response.json()).then(function (data) {\n                        fetch('/studentAssignment/',{\n                            method: \"GET\",\n                            headers : {\n                                'Content-Type': 'application/json',\n                                'Accept': 'application/json'\n                            }\n                        }).then(response => response.json()).then(function(data) {\n\n                            // console.log(\"this is what we got in stu ass\" +data.studentAssignment);\n                            //_this.state.submissions.push(data.submission);\n                            _this.setState({\"studentAssignment\": data.studentAssignment});\n\n\n                        });\n\n                    //// console.log(\"this is what we got in reviews\" + data.reviews);\n                    //_this.state.submissions.push(data.submission);\n                    _this.setState({\"reviews\": data.reviews});\n\n\n                });\n\n        }\n        //\n        // else if(prevState[\"currentSubmissionTask\"] !== this.state[\"currentSubmissionTask\"]) {\n        //     const _this = this;\n        //     fetch('/submissionTask', {\n        //         method: \"GET\",\n        //         headers: {\n        //             'Content-Type': 'application/json',\n        //             'Accept': 'application/json'\n        //         }\n        //     }).then(response => response.json()).then(function (data) {\n        //\n        //         //// console.log(\"this is what we got in sub tasks\" +data);\n        //         _this.setState({submissionTasks: data.submissionTasks});\n        //\n        //     });\n        // }\n        // else if(prevState[\"currentReviewTask\"] !== this.state[\"currentReviewTask\"]) {\n        //         const _this = this;\n        //         fetch('/reviewTask',{\n        //             method: \"GET\",\n        //             headers : {\n        //                 'Content-Type': 'application/json',\n        //                 'Accept': 'application/json'\n        //             }\n        //         }).then(response => response.json()).then(function(data) {\n        //             fetch('/studentAssignment/',{\n        //                 method: \"GET\",\n        //                 headers : {\n        //                     'Content-Type': 'application/json',\n        //                     'Accept': 'application/json'\n        //                 }\n        //             }).then(response => response.json()).then(function(data) {\n        //\n        //                 // console.log(\"this is what we got in stu ass\" +data.studentAssignment);\n        //                 //_this.state.submissions.push(data.submission);\n        //                 _this.setState({\"studentAssignment\": data.studentAssignment});\n        //\n        //\n        //             });\n        //\n        //             //// console.log(\"this is what we got in sub tasks\" +data);\n        //             _this.setState({reviewTasks: data.reviewTasks});\n        //\n        //         });\n        //\n        // }\n\n        Prism.highlightAll();\n\n    }\n\n    // Get all submission tasks, submissions, reviews and review tasks when component is mounted\n    componentDidMount() {\n        this._isMounted = true;\n        let _this = this;\n        fetch('/submissionTask',{\n            method: \"GET\",\n            headers : {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        }).then(response => response.json()).then(function(data) {\n\n            // console.log(\"this is what we got\" +data);\n            _this.setState({submissionTasks: data.submissionTasks});\n\n        });\n\n        fetch('/submissions/',{\n            method: \"GET\",\n            headers : {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        }).then(response => response.json()).then(function(data) {\n\n            // console.log(\"this is what we got in task submit\" +data.submissions);\n            //_this.state.submissions.push(data.submission);\n                _this.setState({\"submissions\": data.submissions});\n\n\n        });\n        fetch('/reviewTask',{\n            method: \"GET\",\n            headers : {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        }).then(response => response.json()).then(function(data) {\n\n            // console.log(\"this is what we got\" +data);\n            _this.setState({reviewTasks: data.reviewTasks});\n\n        });\n        fetch('/reviews/',{\n            method: \"GET\",\n            headers : {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        }).then(response => response.json()).then(function(data) {\n\n            // console.log(\"this is what we got in task submit\" +data.reviews);\n            //_this.state.submissions.push(data.submission);\n            _this.setState({\"reviews\": data.reviews});\n\n\n        });\n\n        fetch('/studentAssignment/',{\n            method: \"GET\",\n            headers : {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        }).then(response => response.json()).then(function(data) {\n\n            // console.log(\"this is what we got in stu ass\" +data.studentAssignment);\n            //_this.state.submissions.push(data.submission);\n            _this.setState({\"studentAssignment\": data.studentAssignment});\n\n\n        });\n        Prism.highlightAll();\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n\n    updateArray() {\n        this.setState({ submissionTasks: this.state.submissionTasks });\n    }\n\n\n    // Display different view components for teacher based on user click\n    handleViewComponent(){\n        if(this.state.mode === \"createTask\"){\n            const cookies = new Cookies();\n           // const gotCookie =cookies.get('user');\n            if(typeof cookies.get('user') === \"undefined\") {\n                this.props.onlogoutClick()\n            }\n\n            return <CreateReviewTask submissionTasks={this.state.submissionTasks} reviewTasks={this.state.reviewTasks}\n                                     update={this.updateArray.bind(this)} submissions={this.state.submissions}\n                                     mode={this.state.mode}\n                                     viewHome={()=>this.handleHomeClick()}\n                                     onclickLogout= {()=>this.props.onlogoutClick()}\n                                     />\n        }\n        else if(this.state.mode === \"viewSubmissionSummary\"){\n\n             return <StudentSubmissionSummary specificSubmissions={this.state.specificSubmissions}\n                                              currentSTask={this.state.currentSubmissionTask}\n                                              update={this.updateArray.bind(this)}\n                                              mode={this.state.mode}\n                                              submissionTasks={this.state.submissionTasks}\n                                              viewHome={()=>this.handleHomeClick()}\n                                              onclickLogout= {()=>this.props.onlogoutClick()}/>\n         }\n        else if(this.state.mode === \"viewReviewSummary\"){\n            return <StudentReviewSummary specificReviews={this.state.specificReviews}\n                                         currentRTask={this.state.currentReviewTask}\n                                         specSubmissions ={this.state.specSubmissions}\n                                         specAssignments = {this.state.specAssignments}\n                                         update={this.updateArray.bind(this)}\n                                         mode={this.state.mode}\n                                         reviewTasks={this.state.reviewTasks}\n                                         viewHome={()=>this.handleHomeClick()}\n                                         onclickLogout= {()=>this.props.onlogoutClick()}/>\n        }\n        else{\n            // in homepage, display the tasks to complete both, submission and review\n            let createdTasks = this.state.submissionTasks.map((element,index,array)=>{\n                return <Menu.Item\n                    onClick={(e)=>this.handleSubmissionTaskClick(e,element)}\n                    key={`sstasks${index}`}\n                    active={element=== this.state.currentSubmissionTask }>\n                    {element[\"task-name\"]}\n                </Menu.Item>\n            });\n\n            let createdReview = this.state.reviewTasks.map((element,index,array)=>{\n                return <Menu.Item\n                    onClick={(e)=>this.handleReviewTaskClick(e,element)}\n                    key={`rrtasks${index}`}\n                    active={element=== this.state.currentReviewTask }>\n                    {element[\"peer-review-for\"]}\n                </Menu.Item>\n            });\n\n            return <div><Segment placeholder\n                                 style={{overflow: 'auto',minHeight:230,maxHeight:330,minWidth:200,\n                                 marginLeft:\"10em\", marginTop:\"3em\", marginRight:\"10em\"}}>\n                <Header>\n                    <Icon name='tasks' circular inverted color={\"blue\"}/>\n                    <Header.Content>You have the created the following assignments to submit.\n                        Click on each to view progress.</Header.Content>\n                </Header>\n                <Menu>\n                    {createdTasks}\n                </Menu>\n            </Segment>\n                <Segment placeholder\n                         style={{overflow: 'auto',minHeight:230,maxHeight:330,minWidth:200,\n                             marginLeft:\"10em\", marginTop:\"3em\", marginRight:\"10em\"}}>\n                    <Header>\n                        <Icon name='tasks' circular inverted color={\"blue\"}/>\n                        <Header.Content>You have created the following review tasks to submit.\n                            Click on each to view progress. </Header.Content>\n                    </Header>\n                    <Menu>\n                        {createdReview}\n                    </Menu>\n                </Segment>\n\n            </div>\n        }\n\n    }\n    // function to get submissions of submission task clicked and set in state\n    handleSubmissionTaskClick(e,element){\n        const cookies = new Cookies();\n        // const gotCookie =cookies.get('user');\n        if(typeof cookies.get('user') === \"undefined\") {\n            this.props.onlogoutClick()\n        }\n        else {\n\n            let specificSubmissions = this.state.submissions.filter((item, index, array) => {\n                return item[\"assignment-name\"] === element[\"task-name\"];\n            });\n            // console.log(\"specsss sub\", specificSubmissions);\n            this.setState({\n                mode: \"viewSubmissionSummary\",\n                currentSubmissionTask: element,\n                specificSubmissions: specificSubmissions\n            });\n        }\n    }\n\n    // Change mode to createTask when create task button is clicked\n    handleCreateTaskClick(event){\n        const cookies = new Cookies();\n        // const gotCookie =cookies.get('user');\n        if(typeof cookies.get('user') === \"undefined\") {\n            this.props.onlogoutClick()\n        }\n        else {\n            this.setState({mode: \"createTask\"});\n        }\n    }\n\n    // function to get reviews of review task clicked and set in state\n    handleReviewTaskClick(e,element){\n        const cookies = new Cookies();\n        // const gotCookie =cookies.get('user');\n        if(typeof cookies.get('user') === \"undefined\") {\n            this.props.onlogoutClick()\n        }\n        else {\n            let specificReviews = this.state.reviews.filter((item, index, array) => {\n                return item[\"assignment-name\"] === element[\"peer-review-for\"]\n            });\n            let specSubmissions = this.state.submissions.filter((item, index, array) => {\n                return item[\"assignment-name\"] === element[\"peer-review-for\"];\n            });\n\n            let specAssignments = this.state.studentAssignment.find((item, index, array) => {\n                return item[\"peer-review-for\"] === element[\"peer-review-for\"];\n            })\n            //// console.log(\"spec sub\",ppp);\n            this.setState({\n                mode: \"viewReviewSummary\", currentReviewTask: element, specificReviews: specificReviews,\n                specSubmissions: specSubmissions, specAssignments: specAssignments\n            });\n        }\n    }\n\n    handleHomeClick() {\n        let _this = this;\n        fetch('/submissionTask',{\n            method: \"GET\",\n            headers : {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        }).then(response => response.json()).then(function(data) {\n\n            // console.log(\"this is what we got\" +data);\n            _this.setState({submissionTasks: data.submissionTasks});\n\n        });\n\n        fetch('/reviewTask',{\n            method: \"GET\",\n            headers : {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        }).then(response => response.json()).then(function(data) {\n\n            // console.log(\"this is what we got\" +data);\n            _this.setState({reviewTasks: data.reviewTasks});\n\n        });\n        fetch('/studentAssignment/',{\n            method: \"GET\",\n            headers : {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        }).then(response => response.json()).then(function(data) {\n\n            //// console.log(\"this is what we got in stu assi\" +data.studentAssignment);\n            //_this.state.submissions.push(data.submission);\n            _this.setState({\"studentAssignment\": data.studentAssignment});\n\n\n        });\n\n        this.setState({mode: \"\", currentSubmissionTask: \"\", currentReviewTask: \"\"\n        });\n    }\n\n    // Render all elements\n    render(){\n        //// console.log(\"state teacher view\", this.state);\n        let createdTasks = this.state.submissionTasks.map((element,index,array)=>{\n            return <Dropdown.Item\n                onClick={(e)=>this.handleSubmissionTaskClick(e,element)}\n                key={`stasks${index}`}\n                active={element=== this.state.currentSubmissionTask }>\n                {element[\"task-name\"]}\n            </Dropdown.Item>\n        });\n\n        let createdReview = this.state.reviewTasks.map((element,index,array)=>{\n            return <Dropdown.Item\n                onClick={(e)=>this.handleReviewTaskClick(e,element)}\n                key={`rtasks${index}`}\n                active={element=== this.state.currentReviewTask }>\n                {element[\"peer-review-for\"]}\n            </Dropdown.Item>\n        });\n\n       // Actual rendering of JSX elements\n        return<div>\n<div>\n\n            <Menu fixed='top' fluid stackable inverted>\n\n                    <Menu.Item as='h4'\n                               header\n                               position={\"right\"}\n                    onClick={()=>this.handleHomeClick()}>\n                        <Icon name={\"home\"} />\n                        Peer Review System\n                    </Menu.Item>\n                    <Menu.Item\n                        as='a'\n                        position={\"right\"}\n                    >{`Welcome, ${this.props.netId} -- Instructor`} </Menu.Item>\n                    <Menu.Item\n                        as='a'\n                        position={\"right\"}\n                        margin-right={\"150px\"}\n                        onClick ={this.props.onlogoutClick}\n                    >\n                        <Icon name={\"sign-out\"} />Logout</Menu.Item>\n\n            </Menu>\n</div>\n\n\n\n            <div style={{marginLeft:10,marginRight:10,  minWidth: 550, marginTop:50}}>\n                <Grid   stackable>\n                    <Grid.Column>\n\n                    <Grid.Row >\n\n                        <Menu fluid stackable >\n\n                            <Dropdown button color={\"teal\"} text='Submission tasks' labeled className='icon' floating  icon='tasks'>\n                                <Dropdown.Menu>\n                                    {createdTasks}\n                                </Dropdown.Menu>\n                            </Dropdown>\n                            <Dropdown button text='Review tasks' labeled className='icon' floating  icon='tasks'>\n                                <Dropdown.Menu>\n                                    {createdReview}\n                                </Dropdown.Menu>\n                            </Dropdown>\n\n                            <Menu.Item\n                                as='a'\n                                position={\"right\"}\n                                onClick = {(event)=> this.handleCreateTaskClick(event)}\n                                active={this.state.mode=== \"createTask\"}\n                                color={\"blue\"}>\n                            Create task</Menu.Item>\n                        </Menu>\n                    </Grid.Row>\n                    <Grid.Row>\n                        {/*Call function to change the view for teacher */}\n                        {this.handleViewComponent()}\n                    </Grid.Row>\n\n                        {/*Added github and linkedin profile*/}\n                       <ExternalLinks/>\n\n                    </Grid.Column>\n\n                </Grid>\n            </div>\n\n        </div>\n\n    }\n}\n\n","/*Main app  that renders the student or teacher view based on login*/\n//Project Owner: Sandhya Sankaran\n\nimport React from 'react';\nimport {Button, Form, Grid, Header, Segment, Message, Menu, Container, Icon,Rail,Sticky,Checkbox} from 'semantic-ui-react'\n//import students from './data/students.json';\nimport StudentView from './student/studentView';\nimport TeacherView from './teacher/teacherView';\nimport Cookies from 'universal-cookie';\nimport ExternalLinks from \"./externalLinks\";\n//import Cookies from 'js-cookie';\n//import submissionTasks from './data/createdSubmissionTasks';\n//import reviewTasks from './data/createdReviewTasks'\n//import Prism from \"prismjs\";\n\n\n\n\nexport default class App extends React.Component {\n    constructor(props) {\n        super(props);\n        const cookies = new Cookies();\n        const gotCookie =cookies.get('user');\n         // console.log(\"cookies\",cookies.get('user'));\n        // const gotCookie = JSON.parse(Cookies.get('user'));\n        if(typeof cookies.get('user') !== \"undefined\"){\n            //// console.log(\"kkkk\",\"cookies\",JSON.parse(Cookies.get('user')).role);\n            this.state = { netId: gotCookie.netId , role:gotCookie.role,firstName:gotCookie.firstName,\n                lastName:gotCookie.lastName};\n        }\n        else {\n            this.state = {netId: \"\", password: \"\", role: \"\", message: \"\"};\n        }\n    }\n\n    // function to handle change in input\n    handleChange(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n        this.setState({\n            [name]: value\n        });\n\n    }\n    // function to handle login button\n    login() {\n      const _this =this;\n        const loginDetails ={netId:this.state.netId,password:this.state.password}\n        fetch('/login',{\n            method:'POST',\n            headers:{\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n            body:JSON.stringify(loginDetails)\n        }).then(response => response.json())\n            .then(function(data) {\n                // console.log (data);\n                // change role in state based on the user details\n                if(!data.netId || data.netId !== _this.state.netId ){\n                    _this.setState({netId: \"\" , password: \"\" ,message:data.message, firstName:\"\",lastName:\"\"})\n                }\n                else {\n                    if(data.role === \"instructor\"){\n                        _this.setState({role:data.role,firstName:data.firstName,lastName:data.lastName});\n                    }\n                    else if(data.role === \"student\"){\n                        _this.setState({role:data.role,firstName:data.firstName,lastName:data.lastName});\n                    }\n                    else{\n                        _this.setState({ role:\"none\"});\n                    }\n                }\n\n            });\n    }\n    // function to handle logout button\n    logout(){\n        // console.log(\"clicked logout in app\");\n        const _this = this;\n        fetch('/logout', {\n            method:\"GET\" ,\n            headers:{\n                'Content-Type': \"application/json\",\n                'Accept': 'application/json'\n            }\n        }).then(function(response) {\n            // console.log(\"logged out\");\n            _this.setState({netId:\"\", password:\"\", role:\"\", message:\"\"});\n        })\n    }\n\n    // Render the elements\n    render() {\n        // console.log(\"state,\", this.state);\n        if(this.state.role === \"\") {\n            return <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\n                <Grid.Column style={{ maxWidth: 450 }}>\n                    <Menu fixed='top' stackable inverted>\n                        <Menu.Item\n                        style={{marginLeft:'45em',marginRight:'45em'}}>Peer Review System</Menu.Item>\n\n                    </Menu>\n                    <Header as='h2' color='blue' textAlign='center'>\n                         Log-in to your account\n                    </Header>\n                    <Form size='large'>\n                        <Segment stacked>\n                            <Form.Input\n                                fluid icon='user'\n                                iconPosition='left'\n                                placeholder='Net ID'\n                                name=\"netId\"\n                                value={this.state.netId}\n                                onChange={(event) => this.handleChange(event)}/>\n                            <Form.Input\n                                fluid\n                                icon=\"lock\"\n                                iconPosition=\"left\"\n                                placeholder=\"Password\"\n                                type=\"password\"\n                                name=\"password\"\n                                value={this.state.password}\n                                onChange={(event) => this.handleChange(event)}\n                            />\n\n                            <Button type =\"button\" color='blue' onClick={() => this.login()} fluid size='large'>\n                                Login\n                            </Button>\n                        </Segment>\n                    </Form>\n                    <Message>\n                        <Header as='h4' color='red'>\n                            {this.state.message}\n                        </Header>\n                        Having trouble ? Contact the Instructor\n                    </Message>\n                    {/*Added github and linkedin profile*/}\n                    <ExternalLinks/>\n                </Grid.Column>\n\n\n            </Grid>\n        }\n        // Display different components based on the role of user\n        else if(this.state.role === \"instructor\"){\n            return <TeacherView netId={this.state.netId} role={this.state.role}\n                                     onlogoutClick={()=>this.logout()}/>\n        }\n\n        else if(this.state.role === \"student\"){\n            return <StudentView netId={this.state.netId} role={this.state.role}\n                                onlogoutClick={()=>this.logout()} firstName={this.state.firstName} lastName={this.state.lastName}\n            />\n        }\n\n        else if(this.state.role === \"none\"){\n            return <div>not authorized</div>\n        }\n    }\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './app'\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}