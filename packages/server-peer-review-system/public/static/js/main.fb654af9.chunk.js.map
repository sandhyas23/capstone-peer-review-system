{"version":3,"sources":["student/taskSubmit.js","student/taskReview.js","student/viewSubmission.js","student/viewReviewed.js","student/studentView.js","teacher/viewTask.js","teacher/createReviewTask.js","teacher/studentSubmissionSummary.js","teacher/studentReviewSummary.js","teacher/teacherView.js","app.js","index.js"],"names":["TaskSubmit","props","handleFile","e","a","reader","FileReader","file","target","files","value","length","onloadend","setState","content","result","fileName","name","readAsText","state","currentTask","submissions","netId","theInputKey","Prism","highlightAll","_this","this","fetch","method","headers","then","response","json","data","studentSubmission","find","element","index","array","addTask","submittedOn","Date","toISOString","findIndex","task","body","JSON","stringify","splice","push","randomString","Math","random","toString","console","log","submissionStatus","submittedDate","taskSubmitted","toLocaleString","markdownInstruction","rawHtml","id","className","source","Grid","Row","Column","computer","Segment","style","boxShadow","Label","ribbon","icon","color","Header","textAlign","as","Icon","Form","centered","Group","widths","Field","inline","Input","readOnly","basic","overflow","minHeight","maxHeight","maxWidth","minWidth","TextArea","type","accept","onChange","key","Button","onClick","handleSubmit","disabled","React","Component","TaskReview","handleChange","rubrics","studentsReview","reviews","totalQuestions","reviewTasks","studentAssignment","totalRubricsToReview","rubric","rubricName","map","ind","arr","prevProps","prevState","event","review","submission","item","rubric_task","reviewNo","totalPoints","i","parseInt","reviewToPost","reviewTask","alert","rawHtml1","reviewsToPost","currentReview","currentStudent","student","Menu","Item","active","handleItemClick","generalInstructionmarkdown","generalInstruction","tableBody","Table","Cell","questionsToDisplay","tag","label","placeholder","width","min","max","required","afterHandleChange","stackable","Modal","trigger","Content","scrolling","Description","HeaderCell","Body","columns","celled","pointing","secondary","viewContent","ViewSubmission","mySubmission","ViewReviewed","filter","comment","StudentView","submissionTasks","mode","firstName","lastName","viewMode","openSubmissionTaskItems","taskDue","getTime","handleOpenSubmissionItemClick","openReviewTaskItems","handleOpenReviewItemClick","closedSubmissionTaskItems","handleClosedSubmissionItemClick","closedReviewTaskItems","handleClosedReviewItemClick","Sidebar","animation","direction","inverted","visible","vertical","fixed","Container","header","position","margin-right","onlogoutClick","marginLeft","marginTop","padded","handleViewComponent","ViewTask","createdTask","fluid","CreateReviewTask","handleChanges","assignTask","num","sortFunc","shuffle","j","floor","temp","b","currentSubmissions","selectedReview","numReviews","ordering","assignments","submitterId","assignInfo","reviewers","Set","reviewerID","reviewInfo","reviewees","assignment","increment","size","trial","toBeReview","add","whoToReview","sort","newAssignments","assignedReviewers","Array","from","assignedReviewees","assignmentsOfStudents","selectedType","instructions","dueDate","rubricIds","isSubmitted","submissionTask","due","update","studentAssignments","studentsAssignment","lastElement","rubricCount","indexOf","undefined","handleRubricChange","circular","addRubrics","deleteRubrics","displayAssignments","transparent","viewStudents","colSpan","options","reviewTasksDisplayed","len","text","taskType","marginRight","align","Select","selected","date","showTimeSelect","timeFormat","timeIntervals","dateFormat","displayRubrics","display","StudentSubmissionSummary","handleCancel","open","handleConfirm","taskIndex","arry","currentSTask","specificSubmissions","isDeleted","viewHome","isEdited","handleDeleteSubmission","clickedStudentIndex","students","handleClick","handleEditTask","handleDeleteTask","Confirm","onCancel","onConfirm","StudentReviewSummary","handleEachChange","currentRTask","specAssignments","specificReviews","specSubmissions","reviewDetails","reviewRubric","teacherRubrics","isTaskEdited","isSaved","negative","viewReviews","studentAssign","reviewIndex","editedReviews","criteriaMarkdown","criteriaHighlighted","submittersSet","studentsSubmissions","viewPoints","reviewerIds","handleReviewClick","highlightedInstruction","handleEditOneReview","handleEditTaskDetails","viewContents","handleEditReviews","handleSaveReviews","TeacherView","currentSubmissionTask","currentReviewTask","updateArray","bind","handleHomeClick","createdTasks","handleSubmissionTaskClick","createdReview","handleReviewTaskClick","createdReviewTask","Dropdown","handleCreateTaskClick","App","cookies","Cookies","gotCookie","get","role","password","message","loginDetails","height","verticalAlign","stacked","iconPosition","login","Message","logout","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fb654af9.chunk.js","sourcesContent":["/*This component is rendered when a student clicks a task to\nupload a submission for an assigment*/\n\nimport React from 'react';\nimport Prism from 'prismjs';\nimport ReactCommonmark from 'react-commonmark';\n//import submissions from '../data/submissionsHw';\nimport 'prismjs/themes/prism-coy.css';\nimport {Grid,Segment,Header,Label,Icon,Form,Input,TextArea,Button} from \"semantic-ui-react\";\n\n\n\n\nexport default class TaskSubmit extends React.Component{\n    constructor(props){\n        super(props);\n        this.state ={currentTask: this.props.currentTask , submissions:[], netId: this.props.netId,\n            \"assignment-name\":this.props.currentTask[\"task-name\"], content:\"Upload a markdown file to view the submission\",\n            theInputKey: \"\", fileName:\"\"}\n        //console.log(this.state.newTask);\n    }\n\n    // called when a prop changed to return a new state\n    static getDerivedStateFromProps(props, state){\n        //console.log(props,state);\n        if(props.currentTask === state.currentTask){\n            return null;\n        }\n        else {\n           // find if the student has already submitted an assignment.\n            // Get the content and set the state\n            let studentSubmission = state.submissions.find((element,index,array)=>{\n                return element[\"assignment-name\"] === props.currentTask[\"task-name\"];\n            });\n            //console.log(\"cc\",studentSubmission);\n\n                if (typeof studentSubmission !== \"undefined\") {\n                    let randomString = Math.random().toString(36);\n\n                    let content = studentSubmission.content;\n                    let fileName = studentSubmission.fileName;\n                    //_this.setState({\"submissions\": _this.state.submissions, \"content\": content});\n                    return {\n                        currentTask: props.currentTask, \"assignment-name\": props.currentTask[\"task-name\"],\n                        content: content,\n                        fileName: fileName,\n                        theInputKey: randomString\n                    }\n                } else {\n                    let randomString = Math.random().toString(36);\n\n                    return {\n\n                        currentTask: props.currentTask, \"assignment-name\": props.currentTask[\"task-name\"],\n                        content: \"Upload a markdown file to view the submission\",\n                        fileName: \"\",\n                        theInputKey: randomString\n                    }\n                }\n            }\n    }\n\n\n    componentDidUpdate() {\n        Prism.highlightAll();\n\n    }\n\n    // Get the submissions of a particular student and set in state to display initially\n    componentDidMount() {\n        let _this = this;\n        fetch('/submissions/student/'+this.state.netId,{\n            method: \"GET\",\n            headers : {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        }).then(response => response.json()).then(function(data) {\n\n            let studentSubmission = data.submissions.find((element,index,array)=>{\n                return element[\"assignment-name\"] === _this.state.currentTask[\"task-name\"];\n            })\n\n            //console.log(\"this is what we got in task submit\" +data.submissions);\n            //_this.state.submissions.push(data.submission);\n            if(typeof studentSubmission !== \"undefined\"){\n                _this.setState({\"submissions\": data.submissions,\"content\":studentSubmission[\"content\"],\n                    \"fileName\":studentSubmission[\"fileName\"]});\n\n            }\n            else{\n                _this.setState({\"submissions\":data.submissions});\n            }\n\n        });\n\n\n        Prism.highlightAll();\n    }\n\n\n    // function to handle submit button when clicked\n    handleSubmit(){\n       const _this = this;\n        const addTask = {\"assignment-name\":this.state[\"assignment-name\"] , netId:this.state.netId,\n            content:this.state.content, fileName:this.state.fileName, submittedOn:new Date().toISOString()};\n\n        // if already submitted, replace the submission\n        let index = this.state.submissions.findIndex((task) => {\n            return (task[\"assignment-name\"] === this.state[\"assignment-name\"] && task[\"netId\"] === this.state.netId);\n        });\n\n        if (index >= 0 ){\n            fetch('/submissions/'+this.state[\"assignment-name\"]+'/student/'+this.state.netId, {\n                method: 'PUT',\n                headers: {\n                    \"Content-type\": \"application/json\"\n                },\n                body: JSON.stringify(addTask)\n            }).then(function (response) {\n                _this.state.submissions.splice(index,1,addTask);\n                _this.setState({\n                    submissions:_this.state.submissions\n                });\n                //console.log(\"submitted\",this.state.submissions);\n                //_this.props.update();\n                //event.preventDefault();\n            });\n\n        }\n        // if not submiited, add a new submission\n        else{\n            fetch('/submissions/'+this.state[\"assignment-name\"]+'/student/'+this.state.netId, {\n                method: 'PUT',\n                headers: {\n                    \"Content-type\": \"application/json\"\n                },\n                body: JSON.stringify(addTask)\n            }).then(function (response) {\n                _this.state.submissions.push(addTask);\n                let randomString = Math.random().toString(36);\n                // reset the filename to null\n                _this.setState({\n                   submissions:_this.state.submissions,\n                    theInputKey: randomString\n\n                });\n                //console.log(\"submitted\",this.state.submissions);\n                //console.log(this.state.submissions);\n               // _this.props.update();\n                //event.preventDefault();\n            });\n        }\n       //console.log(this.state.submissions);\n    }\n\n// handle the upload button when clicked. Read the markdown file and save it in the state\n    handleFile = async(e) => {\n\n        let reader = new FileReader();\n        let file = e.target.files[0];\n\n        if (e.target.value.length !== 0) {\n            reader.onloadend = async (e) => {\n                // The file's text will be printed here\n\n                this.setState({content: e.target.result, fileName: file.name});\n                //console.log(this.state.content);\n            };\n\n            reader.readAsText(file);\n        }\n        else{\n            this.setState({content: this.state.content, fileName: this.state.fileName});\n        }\n    }\n\n\n\n        render(){\n        console.log(\"state\", this.state);\n\n        // Get the submission time\n        let submissionStatus =\"\";\n        let submittedDate =\"\";\n        let taskSubmitted = this.state.submissions.find((task,index,array) => {\n            return (task[\"assignment-name\"] === this.state[\"assignment-name\"] && task[\"netId\"] === this.state.netId);\n            });\n        if(typeof taskSubmitted === \"undefined\"){\n             submissionStatus = \"Not Submitted\";\n        }\n        else{\n             submissionStatus = \"Submitted\";\n             submittedDate = new Date(taskSubmitted[\"submittedOn\"]).toLocaleString();\n        }\n\n        // Convert the markdown submission to highlighted syntax to display preview\n        const markdownInstruction = this.state.content;\n        const rawHtml = <div id=\"rawHtml\" className=\"language-html\">\n            <ReactCommonmark source={markdownInstruction} />\n        </div>\n\n\n        //console.log(\"rawhtml\",rawHtml);\n            // Display details in page grid view\n        return<Grid.Row>\n           <Grid.Column computer={14}>\n            <Grid.Row>\n\n                    <Segment style={{boxShadow:\"none\"}}>\n\n                        <Label ribbon icon='star' content={`${submissionStatus} : ${submittedDate}`} color=\"blue\"/>\n                        <span><Header  textAlign={\"center\"} as={\"h4\"}>\n                            <Icon name='tag'/>\n                            {this.state.currentTask[\"task-name\"]}\n                        </Header>\n                        </span>\n\n                    </Segment>\n\n            </Grid.Row>\n\n            <Grid.Row >\n\n                <Grid.Column>\n                    <Form centered={\"true\"}>\n                        <Segment textAlign={\"center\"}>\n                        <Form.Group centered={\"true\"} widths='equal'>\n                            <Form.Field inline >\n                                <Label icon='calendar alternate' content=\"Due\"/>\n                                <Input readOnly>{new Date(this.state.currentTask[\"due\"]).toLocaleString()}</Input>\n                            </Form.Field>\n                            <Form.Field inline>\n                                <Label icon='lock open' content=\"Status\"/>\n\n                                <Input readOnly style={{color:\"green\"}}>Open</Input>\n                            </Form.Field>\n                        </Form.Group>\n                            <Form.Group centered={\"true\"} widths='equal'>\n                                <Form.Field>\n                                    <Label icon='file code' content=\"Markdown Preview \"/>\n                                    <Label basic>\n                                        <Icon name={'file'}/>\n                                        Filename : {this.state.fileName}\n                                    </Label>\n                                    <Segment style={{overflow: 'auto',minHeight:330,maxHeight:330,maxWidth:600,minWidth:200 }} >\n\n                                    <TextArea readOnly style={{ minHeight: 300, minWidth:200, }}\n                                              name={\"content\"}\n                                              value={this.state.content}\n                                              // onChange={(event)=> this.handleChange(event)}\n                                    />\n                                    </Segment>\n                                </Form.Field>\n                                <Form.Field>\n                                    <Label icon='code' content=\"Code Preview\"/>\n                                    <Segment style={{overflow: 'auto',minHeight:330,maxHeight:330,maxWidth:600,minWidth:200 }}\n                                             textAlign=\"left\">\n                                            {rawHtml}\n                                    </Segment>\n\n                                </Form.Field>\n                            </Form.Group>\n                            <input type=\"file\" accept=\".md\" onChange={ (e) => this.handleFile(e) }\n                                   key={this.state.theInputKey}\n                            />\n\n                            <Button icon='file' content='Submit' type={\"button\"} color={\"green\"}\n                                     onClick={() =>this.handleSubmit()}\n                            disabled={this.state.content === \"Upload a markdown file to view the submission\"}/>\n                        </Segment>\n\n                    </Form>\n\n                </Grid.Column>\n\n            </Grid.Row>\n        </Grid.Column>\n        </Grid.Row>\n\n\n    }\n}\n","/*This component is rendered when a student clicks a task to review peers*/\n\n\nimport React from 'react';\nimport {Button, Form, Grid, Header, Icon, Input, Label, Segment,Menu,Modal,Table} from \"semantic-ui-react\";\n// import studentsReview from \"../data/reviewTasksStudents\";\n// import studentAssignment from '../data/studentAssignment';\n// import submissions from '../data/submissionsHw';\nimport 'prismjs/themes/prism-coy.css';\nimport Prism from \"prismjs\";\nimport ReactCommonmark from \"react-commonmark\";\n\n\n\nexport default class TaskReview extends React.Component{\n    constructor(props){\n        super(props);\n        this.state ={currentTask: this.props.currentTask , studentsReview:this.props.reviews, netId: this.props.netId,\n            \"assignment-name\":this.props.currentTask[\"peer-review-for\"],content:\"Click a review link to view the submission\",\n            totalQuestions:[],\n            reviewTasks:this.props.reviewTasks,\n            studentAssignment:this.props.studentAssignment,\n            submissions:this.props.submissions,\n            totalRubricsToReview:[],\n            rubric:[],\n            rubricName:\"\"}\n            //console.log(this.state);\n    }\n\n    // called when a prop changed to return a new state\n    static getDerivedStateFromProps(props,state){\n        if(props.currentTask === state.currentTask){\n            return null;\n        }\n        else {\n                return {\n                    currentTask: props.currentTask, \"assignment-name\": props.currentTask[\"peer-review-for\"],\n                    content:\"Click a review link to view the submission\",\n                    reviewTasks:props.reviewTasks,\n                    studentAssignment:props.studentAssignment,\n                    submissions:props.submissions,\n                }\n            }\n    }\n\n\n    // Get the reviews of a particular student and set in state to display initially\n    componentDidMount() {\n        let _this = this;\n        fetch('/reviews/' + this.state[\"assignment-name\"] + '/reviewer/' + this.state.netId, {\n            method: \"GET\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        }).then(response => response.json()).then(function (data) {\n\n            //console.log(\"this is what we got in task submit\" + data.reviews);\n            //_this.state.submissions.push(data.submission);\n            const reviewerReviews = data.reviews;\n           // console.log(\"reviewerReviews\", reviewerReviews);\n\n            //Get all review details and set in state initially to display\n            let foundElements = reviewerReviews.map((element, index, array) => {\n                _this.setState({rubric:element[\"review\"][\"rubric\"]});\n                return [element[\"review\"][\"rubric\"].map((rubric, ind, arr) => {\n                    return _this.setState({\n                        [`pointGiven${element[\"reviewer-id\"]}${element[\"submitter-id\"]}${rubric[\"rubric-name\"]}`]:\n                            rubric[\"points-given\"],\n                        [`comment${element[\"reviewer-id\"]}${element[\"submitter-id\"]}${rubric[\"rubric-name\"]}`]:\n                            rubric[\"comments\"],\n\n                    })\n                }), _this.setState({[`submittedOn${element[\"submitter-id\"]}${element[\"reviewer-id\"]}`]:element[\"submittedOn\"]})]\n\n                // _this.setState({\"submissions\":data.reviews});\n\n            });\n        });\n        Prism.highlightAll();\n    }\n\n\n    // Get the reviews of a particular student and set in state to display when a different review task is clicked\n    componentDidUpdate(prevProps,prevState) {\n\n        if (prevState[\"assignment-name\"] !== this.state[\"assignment-name\"]) {\n\n            let _this = this;\n            fetch('/reviews/' + this.state[\"assignment-name\"] + '/reviewer/' + this.state.netId, {\n                method: \"GET\",\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json'\n                }\n            }).then(response => response.json()).then(function (data) {\n\n                //console.log(\"this is what we got in task submit\" + data.reviews);\n                //_this.state.submissions.push(data.submission);\n                const reviewerReviews = data.reviews;\n               // console.log(\"reviewerReviews\", reviewerReviews);\n\n                // get all review points and comments and set in state to display\n                let foundElements = reviewerReviews.map((element, index, array) => {\n                    _this.setState({rubric: element[\"review\"][\"rubric\"]});\n                    return [element[\"review\"][\"rubric\"].map((rubric, ind, arr) => {\n                        return _this.setState({\n                            [`pointGiven${element[\"reviewer-id\"]}${element[\"submitter-id\"]}${rubric[\"rubric-name\"]}`]:\n                                rubric[\"points-given\"],\n                            [`comment${element[\"reviewer-id\"]}${element[\"submitter-id\"]}${rubric[\"rubric-name\"]}`]:\n                                rubric[\"comments\"],\n\n                        })\n                    }), _this.setState({[`submittedOn${element[\"submitter-id\"]}${element[\"reviewer-id\"]}`]: element[\"submittedOn\"]})]\n\n                    // _this.setState({\"submissions\":data.reviews});\n\n                });\n\n            });\n\n        }\n        Prism.highlightAll();\n    }\n\n\n    // function to display the review a student screen when a submitter id is clicked\n    handleItemClick(event, review){\n\n        // Get the submission content of a submitter to be reviewed\n        let content = \"\";\n        let submission = this.state.submissions.find((element,index,array)=>{\n            return element[\"assignment-name\"] === this.state[\"assignment-name\"] && element[\"netId\"] === review;\n        });\n        if(typeof submission !== \"undefined\"){\n            content = submission[\"content\"];\n        }\n        // get all rubrics to review for the clicked task\n        let totalRubricsToReview = this.state.currentTask[\"rubric\"];\n       // console.log(\"content when clicked\",submission[\"content\"]);\n\n\n            //Display all rubrics to be reviewed. Get points and comments values from state and display it .\n\n            let displayRubrics = this.state.totalRubricsToReview.map((item,index,array)=> {\n                 if (this.state[`pointGiven${this.state.netId}${review}${item[\"rubric-name\"]}`] &&\n                    this.state[`comment${this.state.netId}${review}${item[\"rubric-name\"]}`]) {\n                    console.log(\"inside if....\");\n                    let rubric_task = {\n                        \"rubric-name\": item[\"rubric-name\"],\n                        \"possible-points\": item[\"points\"],\n                        \"points-given\": this.state[`pointGiven${this.state.netId}${review}${item[\"rubric-name\"]}`],\n                        \"comments\": this.state[`comment${this.state.netId}${review}${item[\"rubric-name\"]}`],\n                    };\n\n                     this.state.rubric.splice(index,1,rubric_task);\n                     console.log(\"spliced array\",this.state.rubric);\n\n\n                }\n            });\n\n\n        // update the rubrics , submitter id and the submission content to state\n            this.setState({rubric:this.state.rubric,reviewNo:review,totalRubricsToReview:totalRubricsToReview,\n                content: content\n            });\n        //console.log(\"state after \",this.state.content,this.state.rubric);\n    }\n\n\n    // function to handle input change\n    handleChange = async(e,rubrics,index) =>{\n\n        const target = e.target;\n        const value = target.value;\n        const name = target.name;\n       // console.log(\"event:\",e, \"target\",target);\n\n\n        this.setState({\n            [name]:value\n        });\n\n\n    }\n\n    // function to handle points and comments input\n    afterHandleChange(e,rubrics,index){\n        // save the entered/changed details in state first\n        this.handleChange(e,rubrics,index).then(()=> {\n\n            let rubric_task = {\n                \"rubric-name\": rubrics[\"rubric-name\"],\n                \"possible-points\": rubrics[\"points\"],\n                \"points-given\": this.state[`pointGiven${this.state.netId}${this.state.reviewNo}${rubrics[\"rubric-name\"]}`],\n                \"comments\": this.state[`comment${this.state.netId}${this.state.reviewNo}${rubrics[\"rubric-name\"]}`],\n            }\n            //update the state values in the rubric array\n            this.state.rubric.splice(index, 1, rubric_task);\n            this.setState({\n                rubric: this.state.rubric, rubricName: rubrics[\"rubric-name\"],\n                \"possible-points\": rubrics[\"points\"]\n            });\n        });\n\n    }\n\n\n// function to handle submit button of reviews\n    handleSubmit(event){\n        // get total points for each review\n        let totalPoints =0;\n        for (let i=0;i<this.state.rubric.length;i++){\n            totalPoints += parseInt(this.state.rubric[i][\"points-given\"]);\n        }\n\n       // find if a review has been posted already for the submitter\n       let reviewToPost = this.state.studentsReview.findIndex((element,index,array)=>{\n           return (element[\"assignment-name\"] === this.state[\"assignment-name\"] &&\n               element[\"reviewer-id\"] === this.state.netId  && element[\"submitter-id\"]=== this.state.reviewNo);\n       });\n        //console.log(\"length\", reviewToPost[\"tasksToReview\"]);\n\n        // if review not submitted, create a new review object and update in database and array\n       if(reviewToPost === -1){\n           console.log(\"inside if\");\n            let reviewTask ={\"reviewerId\": this.state.netId , \"submitter-id\":this.state.reviewNo,\n            \"assignment-name\":this.state[\"assignment-name\"],review:{\"general-comments\":\"\", rubric:this.state.rubric,\n                \"total-points\":totalPoints}};\n\n            const _this =this;\n           fetch('/reviews/'+this.state[\"assignment-name\"]+'/reviewer/'+this.state.netId+'/submitter/'+this.state.reviewNo\n               , {\n               method: 'PUT',\n               headers: {\n                   \"Content-type\": \"application/json\"\n               },\n               body: JSON.stringify(reviewTask)\n           }).then(function (response) {\n               _this.state.studentsReview.push(reviewTask);\n               _this.setState({\n                   studentsReview:_this.state.studentsReview,\n                   [`submittedOn${_this.state.reviewNo}${_this.state.netId}`]: new Date()\n               });\n               alert(\"submitted review for this submitter\");\n               console.log(\"submitted\",_this.state.studentsReview);\n           });\n\n\n       }\n\n       // if review already submitted, update the submitted review in the array and database\n       else {\n           let reviewTask = {\n               \"reviewerId\": this.state.netId,\n               \"submitter-id\": this.state.reviewNo,\n               \"assignment-name\": this.state[\"assignment-name\"],\n               review: {\"general-comments\": \"\", rubric: this.state.rubric},\n               \"total-points\":totalPoints\n           };\n\n           const _this = this;\n           fetch('/reviews/' + this.state[\"assignment-name\"] + '/reviewer/' + this.state.netId + '/submitter/' + this.state.reviewNo\n               , {\n                   method: 'PUT',\n                   headers: {\n                       \"Content-type\": \"application/json\"\n                   },\n                   body: JSON.stringify(reviewTask)\n               }).then(function (response) {\n               _this.state.studentsReview.splice(reviewToPost, 1,reviewTask);\n               //_this.state.studentsReview.push(reviewTask);\n               _this.setState({\n                   studentsReview: _this.state.studentsReview,\n                   [`submittedOn${_this.state.reviewNo}${_this.state.netId}`]: new Date()\n               });\n               console.log(\"submitted\",_this.state.studentsReview);\n               alert(\"submitted review for this submitter\");\n           });\n       }\n\n       }\n\n\n       // function to display the submission content in highlighted form\n    viewContent(){\n        const markdownInstruction = this.state.content;\n        const rawHtml1 = <div id=\"rawHtml\" className=\"language-html\">\n            <ReactCommonmark source={markdownInstruction} />\n        </div>\n        return <Segment style={{overflow: 'auto',minHeight:330,maxHeight:330,maxWidth:500,minWidth:200 }}\n                        textAlign=\"left\">\n\n            {rawHtml1}\n        </Segment>\n    }\n\n    // render function to display\n    render(){\n\n        let reviewsToPost;\n       // console.log(\"content in state\", this.state);\n\n\n       //Get all students for which the reviewer needs to submit reviews without displaying the id or name\n        let currentReview = this.state.studentAssignment.find((review,index,array)=>{\n                return review[\"peer-review-for\"] === this.state[\"assignment-name\"];\n            });\n\n         if(typeof currentReview !== \"undefined\") {\n             let currentStudent = currentReview[\"studentsAssignment\"].find((student, index, array) => {\n                 //console.log(\"student\",student[\"student\"] === this.state.netId);\n                 return student[\"student\"] === this.state.netId;\n             });\n              if(typeof currentStudent !== \"undefined\"){\n                  //console.log(\"inside kkkk\");\n                  reviewsToPost = currentStudent[\"reviewees\"].map((review, index, array) => {\n\n                      //Display all reviews to be submitted in a menu\n                      return <Menu.Item\n                          name={`Review${index}`}\n                          active={review === this.state.reviewNo}\n                          as='a'\n                          onClick={(event) => this.handleItemClick(event, review)}\n                          key={`Review${review}${index}`}\n                      >\n                          {`Review${index}`}\n                      </Menu.Item>\n                  });\n              }\n\n         }\n         else{\n             return \"nothing to display\"\n         }\n\n\n         // Display the general rubrics to follow for this assignment\n        const generalInstructionmarkdown = this.state.currentTask[\"instructions\"];\n        const generalInstruction = <div id=\"rawHtml\" className=\"language-html\">\n            <ReactCommonmark source={generalInstructionmarkdown} />\n        </div>\n\n        // display other rubrics to follow in a table\n        let tableBody = this.state.currentTask[\"rubric\"].map((item,index,array)=>{\n            const markdownInstruction = item[\"criteria\"];\n            const rawHtml = <div id=\"rawHtml\" className=\"language-html\">\n                <ReactCommonmark source={markdownInstruction} />\n            </div>\n            return <Table.Row key={`row${item[\"rubric-name\"]}${index}`}>\n                <Table.Cell key={`points${item[\"rubric-name\"]}${index}`}>{item[\"points\"]}</Table.Cell>\n                <Table.Cell key={`rubric${item[\"rubric-name\"]}${index}`}>{item[\"rubric-name\"]}</Table.Cell>\n                <Table.Cell key={`criteria${item[\"rubric-name\"]}${index}`}>{rawHtml}</Table.Cell>\n            </Table.Row>\n        });\n\n\n        // Input review details(points and comments) for each rubric for a student\n        let questionsToDisplay =  this.state.totalRubricsToReview.map((rubric,index,array)=>{\n            return <Form.Group key={`rubric${rubric[\"rubric-name\"]}${index}`}>\n                <Label tag content={rubric[\"rubric-name\"]}/>\n                <Label content={rubric[\"points\"]} />\n                <Form.Input name={`pointGiven${this.state.netId}${this.state.reviewNo}${rubric[\"rubric-name\"]}`} type= 'number' label='Points'\n                            placeholder='Points' width={4} min=\"0\" max={rubric[\"points\"]}\n                            required\n                            onChange={(e)=>this.afterHandleChange(e,rubric,index)} key={`pointGiven${this.state.netId}${this.state.reviewNo}${rubric[\"rubric-name\"]}`}\n                            value ={this.state[`pointGiven${this.state.netId}${this.state.reviewNo}${rubric[\"rubric-name\"]}`] || \"\"}/>\n                <Form.Input name={`comment${this.state.netId}${this.state.reviewNo}${rubric[\"rubric-name\"]}`}\n                            required label='Comments' placeholder='comments' width={10}\n                            onChange={(e)=>this.afterHandleChange(e,rubric,index)} key={`comment${this.state.netId}${this.state.reviewNo}${rubric[\"rubric-name\"]}`}\n                            value = {this.state[`comment${this.state.netId}${this.state.reviewNo}${rubric[\"rubric-name\"]}`] || \"\"} />\n\n            </Form.Group>\n        });\n\n\n\n        return <Grid  stackable>\n\n            <Grid.Column>\n               {/*Row for task name*/}\n                    <Grid.Row>\n\n                        <Segment style={{boxShadow:\"none\"}}>\n\n                            <span><Header  textAlign={\"center\"} as={\"h4\"}>\n                                <Icon name='tag'/>\n                                {this.state.currentTask[\"peer-review-for\"]}\n                            </Header>\n                            </span>\n\n                        </Segment>\n\n                    </Grid.Row>\n                {/*Form details that contain rest of task details*/}\n                    <Grid.Row >\n\n                       <Form centered={\"true\"}>\n                           <Segment textAlign={\"center\"}>\n                           <Form.Group centered={\"true\"} widths='equal'>\n                               <Form.Field inline >\n                                   <Label icon='calendar alternate' content=\"Due\"/>\n                                   <Input readOnly>{new Date(this.state.currentTask[\"due\"]).toLocaleString()}</Input>\n                               </Form.Field>\n                               <Form.Field inline >\n                                   <Label icon='lock open' content=\"Status\"/>\n\n                                   <Input readOnly style={{color:\"green\"}}>Open</Input>\n                               </Form.Field>\n                           </Form.Group>\n                           </Segment>\n                       </Form>\n\n                    </Grid.Row>\n\n               <Header  textAlign={\"center\"} as={\"h4\"}>\n                    <Icon name='code'/>\n                    Submit Review\n                </Header>\n                {/*Modal to display the rubrics info to follow for the assignment*/}\n                <span> <Modal trigger={<Button>View Rubrics</Button>}>\n                    <Modal.Header>Rubrics</Modal.Header>\n                    <Modal.Content  scrolling>\n\n                        <Modal.Description>\n                            <Header>Rubrics for {this.state.currentTask[\"peer-review-for\"]}</Header>\n                            <div>\n                                General Instructions: {generalInstruction}\n                            </div>\n                            <Table>\n                                <Table.Header>\n                                    <Table.Row>\n                                    <Table.HeaderCell> Possible points</Table.HeaderCell>\n                                        <Table.HeaderCell> Rubric name</Table.HeaderCell>\n                                        <Table.HeaderCell> Criteria</Table.HeaderCell>\n                                    </Table.Row>\n                                </Table.Header>\n                                <Table.Body>\n                                    {/*rubric details to display*/}\n                                    {tableBody}\n                                </Table.Body>\n                            </Table>\n\n                        </Modal.Description>\n                    </Modal.Content>\n                </Modal>\n                    </span>\n\n                {/*Form part where the review part starts*/}\n                <Grid.Row columns={2}>\n\n                    <Grid celled>\n                        {/*View sample code*/}\n                    <Grid.Column width={8}>\n\n                        {/*display submitter ids to review in a menu*/}\n                        <Menu pointing secondary>\n                                {reviewsToPost}\n                        </Menu>\n\n                        {/*Display the submission content*/}\n                        {this.viewContent()}\n\n                    </Grid.Column>\n                        {/*enter actual reviews*/}\n                    <Grid.Column width={8}>\n                        <Header  textAlign={\"center\"} as={\"h4\"}>\n                            <Icon name='code'/>\n                            Enter points here\n                        </Header>\n                        <hr/>\n\n                        <Segment style={{overflow: 'auto',minHeight:330,maxHeight:330,maxWidth:500,minWidth:200 }}\n                                 textAlign=\"left\">\n\n                            <Form>\n                                {/*Display each rubric for reviewer to enter points and comments*/}\n                               {questionsToDisplay}\n\n                                {this.state.reviewNo ?  <Button icon='file' content='Submit' type={\"button\"} color={\"green\"}\n                                                                onClick={(event) =>this.handleSubmit(event)}\n                                                                disabled={!this.state[`pointGiven${this.state.netId}${this.state.reviewNo}${this.state.rubricName}`]  ||\n                                                                !this.state[`comment${this.state.netId}${this.state.reviewNo}${this.state.rubricName}`] }\n                                />\n                                :\n                                    /*if no submitter id exists or clicked, display this*/\n                                <div>Click on a review id to submit reviews</div>}\n\n\n\n\n\n                            </Form>\n                            &nbsp;\n                            {/*get the submitted time for a review submitted*/}\n                            {this.state.reviewNo?\n                                this.state[`submittedOn${this.state.reviewNo}${this.state.netId}`]?\n                                <div>\n                                    <Label ribbon icon='star' content={`Submitted :\n                             ${new Date(this.state[`submittedOn${this.state.reviewNo}${this.state.netId}`]).toLocaleString()}`}\n                                           color=\"blue\"/>\n                                </div>\n                                :\n                                    <div>\n                                        <Label ribbon icon='star' content={`Submitted : Not submitted`}\n                                               color=\"blue\"/>\n                                    </div>\n                                    :\n                                <div></div>\n                            }\n\n                        </Segment>\n                    </Grid.Column>\n                    </Grid>\n                </Grid.Row>\n\n\n            </Grid.Column>\n        </Grid>\n    }\n}","/*This component is rendered when a student clicks on a submission task that has been closed.\n* Students can view their submissions for previous assignments */\n\nimport React from 'react';\nimport Prism from 'prismjs';\nimport ReactCommonmark from 'react-commonmark';\n//import submissions from '../data/submissionsHw';\nimport 'prismjs/themes/prism-coy.css';\nimport {Grid,Segment,Header,Label,Icon,Form,Input,TextArea,Button} from \"semantic-ui-react\";\n\n\nexport default class ViewSubmission extends React.Component{\n    constructor(props){\n        super(props);\n        this.state ={currentTask: this.props.currentTask , submissions:props.submissions, netId: this.props.netId,\n            \"assignment-name\":this.props.currentTask[\"task-name\"]}\n        //console.log(this.state.newTask);\n    }\n\n\n    // called when a prop changed to return a new state\n    static getDerivedStateFromProps(props,state){\n        if(props.currentTask === state.currentTask){\n            return null;\n        }\n        else{\n            return {\n                currentTask: props.currentTask , submissions:props.submissions,\n                \"assignment-name\":props.currentTask[\"task-name\"]\n            }\n        }\n    }\n\n    componentDidUpdate() {\n        Prism.highlightAll();\n    }\n\n    componentDidMount() {\n        Prism.highlightAll();\n    }\n\n\n    render(){\n        // get all the submissions of the student for clciked task\n        let content=\"\", fileName=\"\"\n        let mySubmission =  this.state.submissions.find((item,index,array)=>{\n            return item[\"netId\"] === this.state.netId && item[\"assignment-name\"]=== this.state[\"assignment-name\"]\n        });\n        if(typeof mySubmission !== \"undefined\"){\n             content = mySubmission[\"content\"];\n             fileName = mySubmission[\"fileName\"];\n        }\n\n        // get the submission status and time details\n         let submissionStatus =\"\";\n        let submittedDate =\"\";\n        let taskSubmitted = this.state.submissions.find((task,index,array) => {\n            return (task[\"assignment-name\"] === this.state[\"assignment-name\"] && task[\"netId\"] === this.state.netId);\n        });\n        if(typeof taskSubmitted === \"undefined\"){\n            submissionStatus = \"Not Submitted\";\n        }\n        else{\n            submissionStatus = \"Submitted\";\n            submittedDate = new Date(taskSubmitted[\"submittedOn\"]).toLocaleString();\n        }\n\n        // Display the submission content as highlighted syntax\n        const markdownInstruction = content;\n        const rawHtml = <div id=\"rawHtml\" className=\"language-html\">\n            <ReactCommonmark source={markdownInstruction} />\n        </div>\n\n\n        //console.log(\"rawhtml\",rawHtml);\n        return<Grid.Row>\n            <Grid.Column computer={14}>\n                <Grid.Row>\n                    <Segment style={{boxShadow:\"none\"}}>\n                        <Label ribbon icon='star' content={`${submissionStatus} : ${submittedDate}`} color=\"blue\"/>\n                        <span><Header  textAlign={\"center\"} as={\"h4\"}>\n                            <Icon name='tag'/>\n                            {this.state.currentTask[\"task-name\"]}\n                        </Header>\n                        </span>\n                    </Segment>\n                </Grid.Row>\n\n                <Grid.Row >\n                    <Grid.Column>\n                        <Form centered={\"true\"}>\n                            <Segment textAlign={\"center\"}>\n                                <Form.Group centered={\"true\"} widths='equal'>\n                                    <Form.Field inline >\n                                        <Label icon='calendar alternate' content=\"Due\"/>\n                                        <Input readOnly>{new Date(this.state.currentTask[\"due\"]).toLocaleString()}</Input>\n                                    </Form.Field>\n                                    <Form.Field inline>\n                                        <Label icon='lock open' content=\"Status\"/>\n\n                                        <Input readOnly style={{color:\"red\"}}>Closed</Input>\n                                    </Form.Field>\n                                </Form.Group>\n                                <Form.Group centered={\"true\"} widths='equal'>\n                                    <Form.Field>\n                                        <Label icon='file code' content=\"Markdown Preview \"/>\n                                        <Label basic>\n                                            <Icon name={'file'}/>\n                                            Filename : {fileName}\n                                        </Label>\n\n                                        {/*Display the submission content in markdown format*/}\n                                        <Segment style={{overflow: 'auto',minHeight:330,maxHeight:330,maxWidth:600,minWidth:200 }} >\n                                            <TextArea readOnly style={{ minHeight: 300, minWidth:200, }}\n                                                      name={\"content\"}\n                                                      value={content}\n                                                      // onChange={(event)=> this.handleChange(event)}\n                                            />\n                                        </Segment>\n                                    </Form.Field>\n                                    <Form.Field>\n                                        {/*Display the highlighted submission content*/}\n                                        <Label icon='code' content=\"Code Preview\"/>\n                                        <Segment\n                                            style={{overflow: 'auto',minHeight:330,maxHeight:330,maxWidth:600,minWidth:200 }}\n                                            textAlign=\"left\">\n                                            {rawHtml}\n                                        </Segment>\n                                    </Form.Field>\n                                </Form.Group>\n                            </Segment>\n\n                        </Form>\n                    </Grid.Column>\n\n                </Grid.Row>\n            </Grid.Column>\n        </Grid.Row>\n\n\n    }\n}\n","/*This component is rendered when a student clicks on a review task that has been closed.\nStudents can view feedback for their assignment.\n* Students can view reviews given by their peers for previous assignments */\n\nimport React from 'react';\nimport Prism from 'prismjs';\nimport ReactCommonmark from 'react-commonmark';\n//import submissions from '../data/submissionsHw';\nimport 'prismjs/themes/prism-coy.css';\nimport {Grid, Segment, Header, Label, Icon, Form, Input, TextArea, Button, Modal, Menu, Table} from \"semantic-ui-react\";\n\n\nexport default class ViewReviewed extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentTask: this.props.currentTask, reviews: this.props.reviews, netId: this.props.netId,\n            \"assignment-name\": this.props.currentTask[\"peer-review-for\"], content: \"\",\n            theInputKey: \"\", fileName: \"\", rubric:[],\n            submissions:props.submissions\n        }\n        //console.log(this.state.newTask);\n    }\n\n    // called when a prop changed to return a new state\n    static getDerivedStateFromProps(props,state){\n        if(props.currentTask === state.currentTask){\n            return null;\n        }\n        else{\n            return {\n                currentTask: props.currentTask , reviews:props.reviews,\n                \"assignment-name\":props.currentTask[\"peer-review-for\"],rubric:[],\n                submissions:props.submissions,\n                content: \"\"\n            }\n        }\n    }\n\n    componentDidUpdate() {\n        Prism.highlightAll();\n    }\n\n    componentDidMount() {\n        Prism.highlightAll();\n    }\n\n    //function to set the review details and reviewer id in state when a reviewer-id is clicked\n    handleItemClick(event,review){\n        this.setState({rubric:review[\"review\"][\"rubric\"], \"reviewer-id\":review});\n    }\n\n\n    render() {\n        //get my submission\n        let mySubmission =  this.state.submissions.find((item,index,array)=>{\n            return item[\"netId\"] === this.state.netId && item[\"assignment-name\"]=== this.state[\"assignment-name\"]\n        });\n        let content =\"\"\n\n        if(typeof mySubmission !== \"undefined\") {\n             content = mySubmission[\"content\"];\n        }\n\n\n        // get the number of reviewers for a particular submitter\n        let reviewsToPost;\n        console.log(\"content in state\", this.state);\n\n        let currentReview = this.state.reviews.filter((review,index,array)=>{\n            return review[\"assignment-name\"] === this.state[\"assignment-name\"] &&\n                review[\"submitter-id\"] === this.state.netId;\n        });\n        //console.log(\"aaaa\",currentReview);\n\n            // display all the reviewers in a menu without displaying the reviewer id or name\n            reviewsToPost = currentReview.map((review, index, array) => {\n\n                //console.log(\"printed this\",count+1,\"times\");\n                return <Menu.Item\n                    name={`Review${index}`}\n                    as='a'\n                    onClick={(event) => this.handleItemClick(event, review)}\n                    key={`Review${review}${index}`}\n                    active={review=== this.state[\"reviewer-id\"]}\n                >\n                    {`Review${index}`}\n                </Menu.Item>\n            });\n\n        // display the submission content with syntax highlighting\n        const markdownInstruction = content;\n        const rawHtml = <div id=\"rawHtml\" className=\"language-html\">\n            <ReactCommonmark source={markdownInstruction} />\n        </div>\n\n\n        // Display the review details in a table for each review\n        let data = this.state.rubric.map((item,index,array)=>{\n            const comment = item[\"comments\"];\n            const rawHtml1 = <div id=\"rawHtml\" className=\"language-html\">\n                <ReactCommonmark source={comment} />\n            </div>\n            return <Table.Row key={`roww${index}${item[\"rubric-name\"]}`}>\n                <Table.Cell key={`rubric${index}${item[\"rubric-name\"]}`}>\n                    {item[\"rubric-name\"]}\n                </Table.Cell>\n                <Table.Cell key={`possiblepts${index}${item[\"rubric-name\"]}`}>\n                    {item[\"possible-points\"]}\n                </Table.Cell>\n                <Table.Cell key={`pointsGiven${index}${item[\"rubric-name\"]}`}>\n                    {item[\"points-given\"]}\n                </Table.Cell>\n                <Table.Cell key={`comment${index}${item[\"rubric-name\"]}`}>\n                    {rawHtml1}\n                </Table.Cell>\n            </Table.Row>\n        });\n\n        // Display the ngeneral instruction in rubrics to follow\n        const generalInstructionmarkdown = this.state.currentTask[\"instructions\"];\n        const generalInstruction = <div id=\"rawHtml\" className=\"language-html\">\n            <ReactCommonmark source={generalInstructionmarkdown} />\n        </div>\n\n        //Display all other rubrics to follow details in table\n        let tableBody = this.state.currentTask[\"rubric\"].map((item,index,array)=>{\n            const markdownInstruction = item[\"criteria\"];\n            const rawHtml = <div id=\"rawHtml\" className=\"language-html\">\n                <ReactCommonmark source={markdownInstruction} />\n            </div>\n            return <Table.Row key={`row${item[\"rubric-name\"]}${index}`}>\n                <Table.Cell key={`points${item[\"rubric-name\"]}${index}`}>{item[\"points\"]}</Table.Cell>\n                <Table.Cell key={`rubric${item[\"rubric-name\"]}${index}`}>{item[\"rubric-name\"]}</Table.Cell>\n                <Table.Cell key={`criteria${item[\"rubric-name\"]}${index}`}>{rawHtml}</Table.Cell>\n            </Table.Row>\n        });\n\n\n        return  <Grid  stackable>\n            <Grid.Column>\n                {/*Row for task name*/}\n                <Grid.Row>\n                    <Segment style={{boxShadow:\"none\"}}>\n                            <span><Header  textAlign={\"center\"} as={\"h4\"}>\n                                <Icon name='tag'/>\n                                {this.state.currentTask[\"peer-review-for\"]}\n                            </Header>\n                            </span>\n                    </Segment>\n\n                </Grid.Row>\n                {/*Form details that contain rest of task details*/}\n                <Grid.Row >\n\n                    <Form centered={\"true\"}>\n                        <Segment textAlign={\"center\"}>\n                            <Form.Group centered={\"true\"} widths='equal'>\n                                <Form.Field inline >\n                                    <Label icon='calendar alternate' content=\"Due\"/>\n                                    <Input readOnly>{new Date(this.state.currentTask[\"due\"]).toLocaleString()}</Input>\n                                </Form.Field>\n                                <Form.Field inline>\n                                    <Label icon='lock open' content=\"Status\"/>\n                                    <Input readOnly style={{color:\"red\"}}>Closed</Input>\n                                </Form.Field>\n                            </Form.Group>\n                        </Segment>\n                    </Form>\n\n                </Grid.Row>\n\n                <Header  textAlign={\"center\"} as={\"h4\"}>\n                    <Icon name='code'/>\n                    View Reviews for my assignments\n                </Header>\n\n                {/*Display all rubrics to follow in modal*/}\n                <span> <Modal className={\"modal1\"} trigger={<Button>View Rubrics</Button>}>\n                    <Modal.Header>Rubrics</Modal.Header>\n                    <Modal.Content  scrolling>\n                        <Modal.Description>\n                            <Header>Rubrics for {this.state.currentTask[\"peer-review-for\"]}</Header>\n                            <div>\n                                General Instructions: {generalInstruction}\n                            </div>\n                            <Table>\n                                <Table.Header>\n                                    <Table.Row>\n                                    <Table.HeaderCell> Possible points</Table.HeaderCell>\n                                        <Table.HeaderCell> Rubric name</Table.HeaderCell>\n                                        <Table.HeaderCell> Criteria</Table.HeaderCell>\n                                    </Table.Row>\n                                </Table.Header>\n                                <Table.Body>\n                                    {tableBody}\n                                </Table.Body>\n                            </Table>\n                        </Modal.Description>\n                    </Modal.Content>\n                </Modal>\n                    </span>\n\n                {/*Form part where the review part starts*/}\n                <Grid.Row columns={2}>\n\n                    <Grid celled>\n                        {/*View sample code*/}\n                        <Grid.Column width={8}>\n                            {/*Display the reviewers that have posted reviews for the submitter*/}\n                            <Menu pointing secondary>\n                                {reviewsToPost}\n                            </Menu>\n                            <hr/>\n                            <Table>\n                                <Table.Header>\n                                    <Table.Row>\n                                        <Table.HeaderCell>Rubric name</Table.HeaderCell>\n                                        <Table.HeaderCell>Possible pts</Table.HeaderCell>\n                                        <Table.HeaderCell>Points given</Table.HeaderCell>\n                                        <Table.HeaderCell>Comments</Table.HeaderCell>\n                                    </Table.Row>\n                                </Table.Header>\n                                <Table.Body>\n                                    {/*Display the review details(points and comments) in a table*/}\n                                    {data}\n                                </Table.Body>\n                            </Table>\n\n                        </Grid.Column>\n                        {/*enter review*/}\n                        <Grid.Column width={8}>\n\n                            {/*Display the submission content of the submitter*/}\n                            <Segment style={{overflow: 'auto',minHeight:330,maxHeight:330,maxWidth:500,minWidth:200 }}\n                                     textAlign=\"left\">\n                                {rawHtml}\n                            </Segment>\n                        </Grid.Column>\n                    </Grid>\n                </Grid.Row>\n\n            </Grid.Column>\n        </Grid>\n    }\n}\n","/* Basic view for students\n* This content is rendered when user is logged in as student*/\n\nimport React from 'react';\nimport TaskSubmit from \"./taskSubmit\";\nimport {\n    Grid,\n    Icon,\n    Menu,\n    Sidebar,\n    Container,\n    Segment,\n    Header,\n    Button\n} from 'semantic-ui-react';\nimport TaskReview from \"./taskReview\";\nimport ViewSubmission from \"./viewSubmission\";\nimport ViewReviewed from './viewReviewed';\nimport Prism from \"prismjs\";\n\n\nexport default class StudentView extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {submissionTasks:[] ,reviewTasks:[], mode:\"\", submissions:[], studentAssignment:[],\n        reviews:[], firstName:props.firstName , lastName:props.lastName}\n\n    }\n\n    // Get all tasks and submission details from database to display initially\n    componentDidMount() {\n        let _this = this;\n        fetch('/submissionTask',{\n            method: \"GET\",\n            headers : {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        }).then(response => response.json()).then(function(data) {\n\n            console.log(\"this is what we got\" +data.submissionTasks);\n            _this.setState({submissionTasks: data.submissionTasks});\n\n        });\n\n        fetch('/reviewTask',{\n            method: \"GET\",\n            headers : {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        }).then(response => response.json()).then(function(data) {\n\n            console.log(\"this is what we got\" +data.reviewTasks);\n            _this.setState({reviewTasks: data.reviewTasks});\n\n        });\n\n\n        fetch('/submissions/',{\n            method: \"GET\",\n            headers : {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        }).then(response => response.json()).then(function(data) {\n\n            console.log(\"this is what we got in task submit\" +data.submissions);\n            //_this.state.submissions.push(data.submission);\n            _this.setState({\"submissions\": data.submissions});\n\n\n        });\n\n        fetch('/reviews/',{\n            method: \"GET\",\n            headers : {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        }).then(response => response.json()).then(function(data) {\n\n            console.log(\"this is what we got in task submit\" +data.reviews);\n            //_this.state.submissions.push(data.submission);\n            _this.setState({\"reviews\": data.reviews});\n\n\n        });\n\n        fetch('/studentAssignment/',{\n            method: \"GET\",\n            headers : {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        }).then(response => response.json()).then(function(data) {\n\n            console.log(\"this is what we got in task submit\" +data.studentAssignment);\n            //_this.state.submissions.push(data.submission);\n            _this.setState({\"studentAssignment\": data.studentAssignment});\n\n\n        });\n        Prism.highlightAll();\n    }\n\n    // function to set state of current open submission task that is clicked\n    handleOpenSubmissionItemClick(event, task){\n       // console.log(\"taskclicked\" +task[\"task-name\"]);\n        this.setState({mode:\"submit\", currentTask:task})\n        //console.log(\"ccc\",this.state.currentTask);\n    }\n\n    // function to set state of current closed submission task that is clicked\n    handleClosedSubmissionItemClick(event, task){\n        // console.log(\"taskclicked\" +task[\"task-name\"]);\n        this.setState({mode:\"submitted\", currentTask:task})\n        //console.log(\"ccc\",this.state.currentTask);\n    }\n\n    // function to set state of current open review task that is clicked\n    handleOpenReviewItemClick(event, task){\n        //console.log(\"taskclicked\" +task[\"task-name\"]);\n        this.setState({mode:\"review\", currentTask:task})\n        //console.log(\"ddd\",this.state.currentTask);\n    }\n\n    // function to set state of current closed review task that is clicked\n    handleClosedReviewItemClick(event, task){\n        //console.log(\"taskclicked\" +task[\"task-name\"]);\n        this.setState({mode:\"reviewed\", currentTask:task})\n        //console.log(\"ddd\",this.state.currentTask);\n    }\n\n    // toggle between different views for student based on the task type clicked\n    handleViewComponent(){\n        const viewMode = this.state.mode;\n        if(viewMode === \"submit\"){\n            //console.log(\"cliked\" +this.state.currentTask[\"task-name\"]);\n            return <TaskSubmit currentTask = {this.state.currentTask} netId={this.props.netId}/>\n\n\n        }\n        else if(viewMode === \"review\"){\n           // console.log(\"cliked\" +this.state.currentTask[\"task-name\"]);\n            return <TaskReview currentTask = {this.state.currentTask} netId={this.props.netId}\n            reviewTask = {this.state.reviewTasks} studentAssignment={this.state.studentAssignment}\n            submissions={this.state.submissions} reviews={this.state.reviews}/>\n        }\n        else if(viewMode === \"submitted\"){\n            // console.log(\"cliked\" +this.state.currentTask[\"task-name\"]);\n            return <ViewSubmission currentTask = {this.state.currentTask} netId={this.props.netId}\n                               reviewTask = {this.state.reviewTasks} studentAssignment={this.state.studentAssignment}\n                               submissions={this.state.submissions} reviews={this.state.reviews}/>\n        }\n\n        else if(viewMode === \"reviewed\"){\n            // console.log(\"cliked\" +this.state.currentTask[\"task-name\"]);\n            return <ViewReviewed currentTask = {this.state.currentTask} netId={this.props.netId}\n                               reviewTask = {this.state.reviewTasks} studentAssignment={this.state.studentAssignment}\n                               submissions={this.state.submissions} reviews={this.state.reviews}/>\n        }\n\n        else{\n            // in homepage, display the tasks to complete both, submission and review\n            let openSubmissionTaskItems = this.state.submissionTasks.map((task , index , array) => {\n                let taskDue = new Date(task[\"due\"]).getTime();\n                let now = new Date().getTime();\n                const timeDifference = now-taskDue;\n                //console.log(\"time of\",task[\"task-name\"],timeDifference);\n                if(timeDifference < 0){\n                    return <Menu.Item\n                        name={task[\"task-name\"]}\n                        key = {`osstask${index}`}\n                        onClick={(event) => this.handleOpenSubmissionItemClick(event,task)}\n                        active={task === this.state.currentTask}\n                    >\n                    <span>\n                        <Icon name =\"tag\" />\n                        {task[\"task-name\"]}\n                    </span>\n                    </Menu.Item>\n\n                }\n            });\n\n\n            // get all open review tasks to display in the menu\n            let openReviewTaskItems = this.state.reviewTasks.map((task , index , array) => {\n                let taskDue = new Date(task[\"due\"]).getTime();\n                let now = new Date().getTime();\n                const timeDifference = now-taskDue;\n                //console.log(\"time of\",task[\"task-name\"],timeDifference);\n                if(timeDifference < 0){\n                    return <Menu.Item\n                        name={task[\"peer-review-for\"]}\n                        key = {`ortask${index}`}\n                        onClick={(event) => this.handleOpenReviewItemClick(event,task)}\n                        active={task === this.state.currentTask}\n                    >\n                    <span>\n                        <Icon name =\"tag\" />\n                        {task[\"peer-review-for\"]}\n                    </span>\n                    </Menu.Item>\n\n                }\n            });\n\n\n            return <div><Segment placeholder style={{overflow: 'auto',minHeight:230,maxHeight:330,maxWidth:1000,minWidth:200 }}>\n                <Header icon>\n                    <Icon name='tag' />\n                   You have the following assignments to submit\n                </Header>\n                <Menu>\n                    {openSubmissionTaskItems}\n                </Menu>\n            </Segment>\n                <Segment placeholder style={{overflow: 'auto',minHeight:230,maxHeight:330,maxWidth:1000,minWidth:200 }}>\n                    <Header icon>\n                        <Icon name='tag' />\n                        You have the following reviews to submit\n                    </Header>\n                    <Menu>\n                        {openReviewTaskItems}\n                    </Menu>\n                </Segment>\n\n            </div>\n        }\n    }\n\n\n\n    render(){\n        // get all open submission tasks to display in the menu\n        let openSubmissionTaskItems = this.state.submissionTasks.map((task , index , array) => {\n            let taskDue = new Date(task[\"due\"]).getTime();\n            let now = new Date().getTime();\n            const timeDifference = now-taskDue;\n            //console.log(\"time of\",task[\"task-name\"],timeDifference);\n            if(timeDifference < 0){\n                return <Menu.Item\n                    name={task[\"task-name\"]}\n                    key = {`ostask${index}`}\n                    onClick={(event) => this.handleOpenSubmissionItemClick(event,task)}\n                    active={task === this.state.currentTask}\n                >\n                    <span>\n                        <Icon name =\"tag\" />\n                        {task[\"task-name\"]}\n                    </span>\n                </Menu.Item>\n\n            }\n        });\n\n        // get all closed submission tasks to display in the menu\n        let closedSubmissionTaskItems = this.state.submissionTasks.map((task , index , array) => {\n            let taskDue = new Date(task[\"due\"]).getTime();\n            let now = new Date().getTime();\n            const timeDifference = now-taskDue;\n            if(timeDifference >= 0){\n                return <Menu.Item\n                    name={task[\"task-name\"]}\n                    key = {`cstask${index}`}\n                    onClick={(event) => this.handleClosedSubmissionItemClick(event,task)}\n                    active={task === this.state.currentTask}\n                >\n                    <span>\n                        <Icon name =\"tag\" />\n                        {task[\"task-name\"]}\n                    </span>\n                </Menu.Item>\n\n            }\n        });\n\n        // get all open review tasks to display in the menu\n        let openReviewTaskItems = this.state.reviewTasks.map((task , index , array) => {\n            let taskDue = new Date(task[\"due\"]).getTime();\n            let now = new Date().getTime();\n            const timeDifference = now-taskDue;\n            //console.log(\"time of\",task[\"task-name\"],timeDifference);\n            if(timeDifference < 0){\n                return <Menu.Item\n                    name={task[\"peer-review-for\"]}\n                    key = {`ortask${index}`}\n                    onClick={(event) => this.handleOpenReviewItemClick(event,task)}\n                    active={task === this.state.currentTask}\n                >\n                    <span>\n                        <Icon name =\"tag\" />\n                        {task[\"peer-review-for\"]}\n                    </span>\n                </Menu.Item>\n\n            }\n        });\n\n        // get all closed review tasks to display in the menu\n        let closedReviewTaskItems = this.state.reviewTasks.map((task , index , array) => {\n            let taskDue = new Date(task[\"due\"]).getTime();\n            let now = new Date().getTime();\n            const timeDifference = now-taskDue;\n            //console.log(\"time of\",task[\"task-name\"],timeDifference);\n            if(timeDifference >= 0){\n                return <Menu.Item\n                    name={task[\"peer-review-for\"]}\n                    key = {`crtask${index}`}\n                    onClick={(event) => this.handleClosedReviewItemClick(event,task)}\n                    active={task === this.state.currentTask}\n                >\n                    <span>\n                        <Icon name =\"tag\" />\n                        {task[\"peer-review-for\"]}\n                    </span>\n                </Menu.Item>\n\n            }\n        });\n\n    return<div>\n        <div>\n        <Sidebar\n            as={Menu}\n            animation='push'\n            direction='left'\n            icon='labeled'\n            inverted\n            visible={true}\n            vertical\n            width='thin'\n\n\n        >\n            {/*Sidebar with all task names*/}\n\n            <Menu.Item>\n                <Icon name =\"tasks\"></Icon><Menu.Header>Tasks to submit</Menu.Header>\n                <Menu.Menu>\n                    {openSubmissionTaskItems}\n                </Menu.Menu>\n            </Menu.Item>\n\n            <Menu.Item>\n                <Icon name =\"tasks\"></Icon><Menu.Header>Tasks to Review</Menu.Header>\n\n                <Menu.Menu>\n                    {openReviewTaskItems}\n                </Menu.Menu>\n            </Menu.Item>\n\n            <Menu.Item>\n                <Icon name =\"tasks\"></Icon><Menu.Header>my Submissions</Menu.Header>\n\n                <Menu.Menu>\n                    {closedSubmissionTaskItems}\n                </Menu.Menu>\n\n            </Menu.Item>\n\n            <Menu.Item>\n                <Icon name =\"tasks\"></Icon><Menu.Header>View reviews for my assignments</Menu.Header>\n\n                <Menu.Menu>\n                    {closedReviewTaskItems}\n                </Menu.Menu>\n\n            </Menu.Item>\n\n        </Sidebar>\n\n            {/*Top fixed menu with user details and Logout button*/}\n        </div>\n        <Menu fixed='top' stackable inverted>\n            <Container>\n                <Menu.Item as='h4'\n                           header\n                           position={\"right\"}\n                            onClick={()=> this.setState({mode:\"\",currentTask:\"\"})}>\n                    Peer Review System\n                </Menu.Item>\n                <Menu.Item\n                    as='a'\n                    position={\"right\"}\n                >{`Welcome, ${this.props.netId} ${this.props.firstName}${this.props.lastName}`}</Menu.Item>\n                <Menu.Item\n                    as='a'\n                    position={\"right\"}\n                    margin-right={\"150px\"}\n                    onClick ={this.props.onlogoutClick}\n                >Logout</Menu.Item>\n            </Container>\n        </Menu>\n\n\n        <div style={{marginLeft: 170, minWidth: 550, marginTop:50}}>\n        <Grid padded  stackable>\n\n            <Grid.Column >\n           {/*toggle different between views for student based on task click*/}\n            {this.handleViewComponent()}\n\n               </Grid.Column>\n\n        </Grid>\n    </div>\n\n    </div>\n\n    }\n}\n\n","import React from 'react';\nimport { Form, Grid} from \"semantic-ui-react\";\n\n\n\nexport default class ViewTask extends React.Component{\n    constructor(props){\n        super(props);\n        this.state={createdTask:props.createdTask, type:props.type , studentAssignment:props.studentAssignment}\n    }\n\n    render() {\n        if (this.state.type === \"submission\"){\n            console.log(this.state.createdTask);\n            return   <div style={{marginLeft: 170, minWidth: 550, marginTop:50}}>\n            <Grid padded stackable>\n                <Form>\n                    <Form.Field inline>\n                        <Form.Input fluid label='Task Name' content={this.state.createdTask[\"task-name\"]} readOnly />\n                    </Form.Field>\n                </Form>\n            </Grid>\n            </div>\n        }\n\n    }\n}","/* This view is rendered when teacher clicks on the create task button\n* */\n\nimport React from 'react';\nimport {\n    Input,\n    Grid,\n    Icon,\n    TextArea,\n    Select,\n    Header,\n    Segment,\n    Form,\n    Modal,\n    Button, Label,Table\n} from 'semantic-ui-react';\n//import createdTasks from '../data/createdSubmissionTasks';\n\nimport Prism from \"prismjs\";\n//import ReactCommonmark from \"react-commonmark\";\nimport DatePicker from \"react-datepicker\";\n\nimport \"react-datepicker/dist/react-datepicker.css\";\n//import submissions from '../data/submissionsHw';\n//import studentAssignment from '../data/studentAssignment';\nimport ViewTask from './viewTask';\n\n//import TaskReview from \"./taskReview\"\n\n\nexport default class CreateReviewTask extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            submissionTasks: this.props.submissionTasks,\n            reviewTasks: this.props.reviewTasks,\n            selectedType: \"submission\",\n            instructions: \"\",\n            selectedReview: \"\",\n            dueDate: new Date(),\n            rubricIds: [1],\n            rubric: [],\n            submissions:this.props.submissions,\n            newAssignments:[],\n            reviews:[],\n            num:0,\n            studentAssignment:[],\n            isSubmitted:false\n        }\n\n    }\n\n\n    componentDidUpdate() {\n        Prism.highlightAll();\n\n    }\n\n    componentDidMount() {\n        Prism.highlightAll();\n    }\n\n\n   // function to handle dropdown values\n    handleChange(e, data) {\n        this.setState({\n            [data.name]: data.value\n        });\n        //console.log(\"onchanges\", data.name);\n    }\n    \n    // function to handle input change\n    handleChanges = async(e) => {\n        const target = e.target;\n        const value = target.value;\n        const name = target.name;\n        this.setState({\n            [name]: value\n        });\n        //console.log(\"onchanges\", value);\n    }\n\n    // function to handle when only  rubric input\n    handleRubricChange(e,element,index){\n        // handle the input of rubric fields\n        this.handleChanges(e).then(()=> {\n            // create object for each rubric\n            let rubric_task = {\n                \"rubric-name\":this.state[`rubric${element}`],\n                \"points\":this.state[`point${element}`],\n                \"criteria\":this.state[`criteria${element}`],\n            }\n            // Add each rubric into an array and set in state\n            this.state.rubric.splice(index, 1, rubric_task);\n            this.setState({\n                rubric: this.state.rubric,\n            });\n\n        });\n\n    }\n\n    //function to handle submit button \n    handleSubmit(e,num) {\n        const _this = this;\n\n            // When task type is submission\n            if (this.state.selectedType === \"submission\") {\n                let submissionTask = {\n                    type: this.state.selectedType, \"task-name\": this.state.selectedReview,\n                    due: this.state.dueDate.toISOString()\n                };\n                let createdSubmissionTask = this.state.submissionTasks.find((element,index,array)=>{\n                    return element[\"task-name\"] === this.state.selectedReview\n                });\n                if(typeof createdSubmissionTask === \"undefined\"){\n                    console.log(\"inside if\");\n                    fetch('/submissionTask',{\n                        method: 'POST',\n                        headers:{\n                            \"Content-type\": \"application/json\"\n                        },\n                        body: JSON.stringify((submissionTask))\n                    })\n                        .then(function(response){\n                            _this.state.submissionTasks.push(submissionTask);\n                            _this.setState({\n                                selectedType: \"submission\", instructions: \"\",\n                                selectedReview: \"\", dueDate: new Date(),\n                                submissionTasks:_this.state.submissionTasks,currentTask:submissionTask\n                            });\n                            _this.props.update();\n                            alert(\"submission task created successfully\");\n                            console.log(\"submitted\",_this.state.submissionTasks);\n                            //e.preventDefault();\n                        })\n                }\n                else{\n                    alert(\"Submission task already exists\");\n                    this.setState({selectedReview:\"\"});\n                }\n            \n            } \n            // if type of task is review, handle submit\n            else {\n                // Assignment of students for review task before submit\n                this.assignTask(e,num).then(()=> {\n                    //console.log(\"submission task\", submissionTask);\n                    let reviewTask = {\n                        \"peer-review-for\": this.state.selectedReview,\n                        due: this.state.dueDate.toISOString(), rubric: this.state.rubric,\n                        instructions: this.state.instructions\n                    };\n                    console.log(this.state.newAssignments);\n                    let studentAssignments = {\n                        \"peer-review-for\": this.state.selectedReview, studentsAssignment: this.state.newAssignments\n                    }\n                    fetch('/reviewTask', {\n                        method: 'POST',\n                        headers: {\n                            \"Content-type\": \"application/json\"\n                        },\n                        body: JSON.stringify((reviewTask))\n                    })\n                        .then(function (response) {\n                            _this.state.reviewTasks.push(reviewTask);\n                            _this.state.studentAssignment.push(studentAssignments);\n                            _this.setState({\n                                selectedType: \"review\", instructions: \"\",\n                                dueDate: new Date(), num: 0,\n                                reviewTasks: _this.state.reviewTasks, studentAssignment: _this.state.studentAssignment,\n                                currentTask: reviewTask,\n                                // selectedReview: \"\",isSubmitted:true,\n                            });\n                            _this.props.update();\n                            alert(\"review task created successfully\");\n                            console.log(\"review task\", _this.state.reviewTasks);\n                            //e.preventDefault();\n                        });\n                });\n            }\n\n\n\n    }\n    \n    // function to handle addition of new rubric\n    addRubrics(e) {\n        let lastElement = this.state.rubricIds[this.state.rubricIds.length-1];\n        this.setState({rubricCount: this.state.rubricIds.push(lastElement + 1)});\n    }\n\n    // function to handle deletion of a rubric\n    deleteRubrics(e,element,index){\n\n        console.log(element);\n        this.state.rubric.splice(index,1);\n        let i = this.state.rubricIds.indexOf(element);\n        this.state.rubricIds.splice(i,1);\n        if(i > -1){\n            this.setState({[`point${element}`]:undefined, [`rubric${element}`]:undefined,\n                [`criteria${element}`]:undefined,rubric:this.state.rubric,rubricIds:this.state.rubricIds});\n        }\n        //console.log(\"deleted\", this.state.rubricIds);\n\n    }\n    \n    // function to handle the view of rubrics. Based on the number of rubrics in array, all rubrics are displayed\n    displayRubrics() {\n        let rubricsDisplay = this.state.rubricIds.map((element, index, array) => {\n            console.log(\"displayed for loop\", index + 1, \"times\");\n            //return <div key={`index${element}`}>aaa</div>\n        return <Form.Group key={`group${index}`} >\n            <Label content={\"Rubric\"}/>\n            <Form.Input name={`point${element}`}\n                        type='number' label='Points' placeholder='Points' width={6}\n                        onChange={(e) => this.handleRubricChange(e,element,index)}\n                        key={`point${element}`}\n                        required\n                        min=\"1\"\n                        value={this.state[`point${element}`] || \"\"}/>\n            <Form.Input name={`rubric${element}`}\n                        label='rubric-name' placeholder='rubric-name'\n                        required\n                        width={8}\n                        key={`rubric${element}`}\n                        onChange={(e) => this.handleRubricChange(e,element,index)}\n                        value={this.state[`rubric${element}`] || \"\"}/>\n            <Form.TextArea name={`criteria${element}`}\n                           label='criteria' placeholder='criteria'\n                           width={12}\n                           required\n                           key={`criteria${element}`}\n                           onChange={(e) => this.handleRubricChange(e,element,index)}\n                           value={this.state[`criteria${element}`] ||\"\" }/>\n            <Button basic icon size={\"mini\"} circular\n                    onClick={(e) => this.addRubrics(e)}\n                    disabled={!this.state[`point${element}`] ||!this.state[`rubric${element}`] ||\n                    !this.state[`criteria${element}`] }>\n                <Icon name='add'/>\n            </Button>\n            <Button basic icon size={\"mini\"} circular\n                    onClick={(e) => this.deleteRubrics(e,element,index)}\n                    disabled={this.state.rubricIds.length === 1}>\n                <Icon name='delete'/>\n            </Button>\n        </Form.Group>\n        });\n        return rubricsDisplay;\n    }\n\n    // function to handle assignment of students \n     assignTask = async(e,num) => {\n        console.log(\"called first\");\n        /* Algorithm 4 for peer review assignment problem.\n\n        Dr. Greg M. Bernstein\n        October 30th, 2019\n\n        Fixed assignment, with array shuffle\n        */\n        let currentSubmissions = this.state.submissions.filter((item,index,array)=>{\n           return item[\"assignment-name\"] === this.state.selectedReview;\n        });\n        console.log(currentSubmissions);\n        //const numStudents = 15;\n        const numReviews = num;\n        const length = currentSubmissions.length;\n\n        // produce shuffled array\n        let ordering = [];\n        for (let i=0; i < length; i++) {\n            ordering[i] = i;\n        }\n\n        shuffle(ordering);\n\n        //console.log(ordering);\n        // Keep track of who is reviewing each students assignment\n        let assignments = [];\n        for (let i = 0; i < length; i++) {\n            let submitterId = currentSubmissions[ordering[i]].netId;\n            let assignInfo = {student: submitterId, reviewers: new Set()};\n            assignments.push(assignInfo);\n        }\n\n        // Keep track of the assignments each student is reviewing\n        let reviews = [];\n        for (let i = 0; i < length; i++) {\n            let reviewerID = currentSubmissions[ordering[i]].netId;\n            let reviewInfo = {student: reviewerID, reviewees: new Set()};\n            reviews.push(reviewInfo);\n        }\n\n        console.log(\"Starting Algorithm\");\n\n        // Fixed mapping of reviewers to assignments based on\n        // a circular pass the papers around notion.\n        for (let i = 0; i < length; i++) {\n            let assignment = assignments[i];\n            let increment = 1;\n            while (assignment.reviewers.size < numReviews) {\n                let trial = (i+increment)%length;\n                if (reviews[trial].reviewees.size >= numReviews) continue;\n                let toBeReview = currentSubmissions[ordering[trial]].netId;\n                assignment.reviewers.add(toBeReview);\n                let whoToReview = currentSubmissions[ordering[i]].netId;\n                //console.log(\"ordering\",toBeReview);\n                reviews[trial].reviewees.add(whoToReview);\n                increment++;\n            }\n        }\n\n        function sortFunc(a, b) {\n            if (a.student > b.student) {\n                return 1;\n            } else {\n                return -1;\n            }\n        }\n        assignments.sort(sortFunc);\n        reviews.sort(sortFunc);\n\n        // Look at the results\n        let newAssignments =[];\n        for (let i = 0; i < length; i++) {\n            console.log(assignments[i]);\n            let assignedReviewers = Array.from(assignments[i][\"reviewers\"]);\n            let assignedReviewees = Array.from(reviews[i][\"reviewees\"]);\n            newAssignments.push({student:assignments[i][\"student\"],reviewers:assignedReviewers,\n                reviewees:assignedReviewees});\n            console.log(\"newAssignments\",newAssignments);\n            //console.log(reviews[i]);\n            //console.log(\"\\n\");\n        }\n\n        let assignmentsOfStudents ={\"peer-review-for\":this.state.selectedReview,\n            \"studentsAssignment\": newAssignments};\n        console.log(\"assignment\",assignmentsOfStudents);\n\n\n            const _this = this;\n\n             fetch('/studentAssignment/'+this.state.selectedReview, {\n                method: 'PUT',\n                headers: {\n                    \"Content-type\": \"application/json\"\n                },\n                body: JSON.stringify(assignmentsOfStudents)\n            }).then(function (response) {\n                _this.setState({newAssignments:newAssignments,reviews:reviews,\n                    });\n            });\n\n\n\n        //this.setState({newAssignments:newAssignments,reviews:reviews});\n\n        /**\n         From: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random\n         */\n        // function getRandomIntInclusive(min, max) {\n        //     min = Math.ceil(min);\n        //     max = Math.floor(max);\n        //     return Math.floor(Math.random() * (max - min + 1)) + min; //The maximum is inclusive and the minimum is inclusive\n        // }\n\n        /* Shuffle an array in JavaScript the right way.\n            From: https://medium.com/@nitinpatel_20236/how-to-shuffle-correctly-shuffle-an-array-in-javascript-15ea3f84bfb\n        */\n        function shuffle(array) {\n            for (let i = array.length - 1; i > 0; i--) {\n                const j = Math.floor(Math.random() * i)\n                const temp = array[i];\n                array[i] = array[j];\n                array[j] = temp;\n            }\n        }\n        //return [assignments,reviews];\n    }\n\n\n    // Display how the students are assigned for peer-review\n    display(){\n        if(this.state.newAssignments.length > 0){\n            //console.log(this.state.assignments);\n             return this.displayAssignments();\n        }\n    }\n\n    displayAssignments(){\n              //console.log(\"function called\");\n        //function to display the reviewers for each student\n                function viewStudents(element){\n                    let reviewers = element[\"reviewers\"].map((item,index,array)=>{\n                        return <Table.Cell key={`cell2${index}`}>\n                            {item}\n                        </Table.Cell>\n                    });\n                    return reviewers;\n                }\n\n\n             // Display all submitters for each task\n            let submitterId = this.state.newAssignments.map((element,index,array)=>{\n                return <Table.Row key={`row${index}`}>\n                    <Table.Cell key={`cell${index}`}>\n                        <Input transparent\n                               key={`AssignmentValue${index}`}\n                               name={`AssignmentValue${index}`}\n                        >{element[\"student\"]}\n                        </Input>\n                    </Table.Cell>\n                    {viewStudents(element)}\n                </Table.Row>\n            });\n\n\n       // return all the details in a modal\n        return  <Modal trigger={<Button >View assignments</Button>}>\n            <Modal.Header>Rubrics</Modal.Header>\n            <Modal.Content  scrolling>\n\n                <Modal.Description>\n                    <Header>Modal Header</Header>\n                    <Table celled>\n                        <Table.Header>\n                            <Table.Row>\n                                <Table.HeaderCell>Submitter Id</Table.HeaderCell>\n                                <Table.HeaderCell colSpan={this.state.num}>Reviewed by\n                                </Table.HeaderCell>\n\n                            </Table.Row>\n                        </Table.Header>\n\n                        <Table.Body>\n                            {submitterId}\n                        </Table.Body>\n                    </Table>\n\n                </Modal.Description>\n            </Modal.Content>\n        </Modal>\n    }\n\n\n    render(){\n        //console.log(\"STATE\",this.state);\n        let options=[];\n        // Get all closed submission tasks to display in a dropdown in create review task screen\n        const reviewTasksDisplayed = this.state.submissionTasks.filter((element)=>{\n            let taskDue = new Date(element[\"due\"]).getTime();\n            let now = new Date().getTime();\n            const timeDifference = now-taskDue;\n            if(timeDifference >= 0) {\n                //console.log(element[\"task-name\"]);\n                return element;\n            }\n        });\n\n        // Check if  a review task has been created for the above filtered tasks, then remove them from the dropdown\n        if(reviewTasksDisplayed.length >0){\n            let len = reviewTasksDisplayed.length;\n            for(let i=0;i< this.state.reviewTasks.length;i++){\n                for(let j=0; j< len;j++){\n                    //console.log(\"www\",reviewTasksDisplayed[j][\"task-name\"],this.state.reviewTasks[i][\"peer-review-for\"]);\n                   if(reviewTasksDisplayed[j][\"task-name\"] === this.state.reviewTasks[i][\"peer-review-for\"]){\n                       //console.log(\"inside if\");\n                       reviewTasksDisplayed.splice(j, 1);\n                       len=reviewTasksDisplayed.length;\n\n                       //console.log(\"options\" ,options);\n                   }\n                }\n            }\n          let submitterId = reviewTasksDisplayed.map((element,index,array)=>{\n              options.push({key:`hw${index}${element[\"task-name\"]}`,\n                  text:element[\"task-name\"],\n                  value:element[\"task-name\"] });\n          });\n        }\n\n        // get submissions for an assignment\n        let currentSubmissions = this.state.submissions.filter((item,index,array)=>{\n            return item[\"assignment-name\"] === this.state.selectedReview;\n        });\n\n\n        //console.log(\"review tasks\",options)\n        const taskType = this.state.selectedType;\n\n         if(this.state.isSubmitted === true){\n             return <ViewTask createdTask={this.state.currentTask} type={this.state.selectedType}\n                              studentAssignment={this.state.studentAssignment}/>\n         }\n         else{\n             return<div>\n                 <div style={{marginLeft:10,marginRight:10,  minWidth: 550, marginTop:50}}>\n                     <Grid  stackable>\n                         <Grid.Column>\n\n                             <Grid.Row >\n\n                                 <Segment style={{boxShadow:\"none\"}} textAlign={\"center\"}>\n\n                                     <Header  textAlign={\"center\"} as={\"h4\"}>\n                                         <Icon name='tag'/>\n                                         Create Task\n                                     </Header>\n\n                                 </Segment>\n                             </Grid.Row>\n                             <Grid.Row  textAlign={\"center\"}>\n                                 <Segment align=\"center\" >\n                                     <Form align=\"center\">\n                                         <Form.Field inline required>\n                                             <label>Task Type</label>\n                                             <Select placeholder='task type'\n                                                     value={this.state.selectedType}\n                                                     name=\"selectedType\" options={[\n                                                 { key: 'submission', text: 'Submission', value: 'submission' },\n                                                 { key: 'review', text: 'Review', value: 'review' },\n                                             ]} onChange={(e,data)=>this.handleChange(e,data)}/>\n                                         </Form.Field>\n                                         {  /*Change display for screen if review or submission*/\n                                             taskType === \"review\" ?\n                                                 <div>\n                                                     <Form.Field inline required>\n                                                         <label>Task name</label>\n                                                         <Select placeholder='Select the task name'\n                                                                 name={\"selectedReview\"}\n                                                                 value={this.state.selectedReview} options={options}\n                                                                 onChange={(e,data)=>this.handleChange(e,data)}/>\n                                                     </Form.Field>\n                                                     <Form.Field inline required>\n                                                         <label>Due</label>\n                                                         <DatePicker\n                                                             selected={this.state.dueDate}\n                                                             onChange={date => this.setState({dueDate:date})}\n                                                             showTimeSelect\n                                                             timeFormat=\"p\"\n                                                             timeIntervals={15}\n                                                             dateFormat=\"Pp\"\n                                                         />\n                                                     </Form.Field>\n                                                     <Form.Field inline required>\n                                                         <label>General Instructions</label>\n                                                         <TextArea style={{ minHeight: 100, minWidth:200, maxHeight: 100, maxWidth:300,}}\n                                                                   placeholder={\"markdown instructions\"}\n                                                                   name={\"instructions\"}\n                                                                   value={this.state.instructions}\n                                                                   onChange={(e)=>{this.handleChanges(e)}}/>\n                                                     </Form.Field>\n                                                     <Grid textAlign={\"center\"}>\n                                                         <Grid.Column width={10}>\n                                                             {this.displayRubrics()}\n                                                         </Grid.Column>\n                                                     </Grid>\n\n                                                     <Form.Field inline required>\n                                                         <label>Enter number of reviews</label>\n                                                         <Input name={`num`}\n                                                                type='number' label='num' placeholder='num' width={4}\n                                                                onChange={(e) => this.handleChanges(e)}\n                                                                min={0} max={currentSubmissions.length}\n                                                                value={this.state.num}/>\n                                                     </Form.Field>\n                                                     {this.display()}\n                                                     {/*<Button onClick={(e)=> this.assignTask(e,this.state.num)} disabled={!this.state.selectedReview}>*/}\n                                                     {/*    Assign students for peer review*/}\n                                                     {/*</Button>*/}\n                                                     <span>\n                                <Button type='submit' onClick={(e)=> this.handleSubmit(e,this.state.num)}\n                                        disabled={!this.state.selectedReview ||\n                                        !this.state.instructions || !this.state.rubric }>Submit</Button>\n                                </span>\n                                                 </div>\n                                                 /*Display for create submission task screen*/\n                                                 :\n                                                 <div>\n                                                     <Form.Field inline required>\n                                                         <label>Task name</label>\n                                                         <Input placeholder='Eg: HW3'\n                                                                name={\"selectedReview\"}\n                                                                value={this.state.selectedReview}\n                                                                onChange={(e)=>this.handleChanges(e)}/>\n                                                     </Form.Field>\n                                                     <Form.Field inline required>\n                                                         <label>Due</label>\n                                                         <DatePicker\n                                                             selected={this.state.dueDate}\n                                                             onChange={date => this.setState({dueDate:date})}\n                                                             showTimeSelect\n                                                             timeFormat=\"p\"\n                                                             timeIntervals={15}\n                                                             dateFormat=\"Pp\"\n                                                         />\n                                                     </Form.Field>\n                                                     <span>\n                                <Button type='submit' onClick={(e)=> this.handleSubmit(e)}\n                                disabled={!this.state.selectedReview}>Submit</Button>\n                                </span>\n                                                 </div>\n\n                                         }\n                                     </Form>\n                                 </Segment>\n\n                             </Grid.Row>\n                         </Grid.Column>\n\n                     </Grid>\n                 </div>\n\n             </div>\n\n         }\n         }\n\n}\n\n","/*This view is rendered when teacher clicks on a task under submission tasks.\n* Teacher can view all submissions posted by each student for a task and can delete any inappropriate submissions.\n* Teacher can also task details like due date*/\nimport React from 'react';\nimport {\n    Icon,\n    Grid,\n    Table,\n    Header,\n    Segment,\n    Label, Form, Input, Select,Button,Confirm\n} from 'semantic-ui-react';\n\n\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport 'prismjs/themes/prism-coy.css';\nimport Prism from \"prismjs\";\nimport ReactCommonmark from \"react-commonmark\";\nimport DatePicker from \"react-datepicker\";\n\n\n\nexport default class StudentSubmissionSummary extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {specificSubmissions:props.specificSubmissions, currentSTask:props.currentSTask,\n            content:\"Click on a student ID to view their submission\",\n        \"task-name\":props.currentSTask[\"task-name\"],open:false,isDeleted:false,\n        due:new Date(props.currentSTask[\"due\"]),\n        mode:props.mode, isEdited:false,submittedOn:\"\",\n        submissionTasks:props.submissionTasks}\n\n    }\n\n    //When a props is changed, a new state is returned\n    static getDerivedStateFromProps(props,state){\n        if(props.currentSTask === state.currentSTask){\n            return null;\n        }\n        else{\n            return {currentSTask:props.currentSTask ,specificSubmissions:props.specificSubmissions,\n                content:\"Click on a student ID to view their submission\",\n                \"task-name\":props.currentSTask[\"task-name\"],\n                due:new Date(props.currentSTask[\"due\"])}\n        }\n\n    }\n    componentDidUpdate() {\n        Prism.highlightAll();\n\n    }\n    componentDidMount() {\n        Prism.highlightAll();\n    }\n\n    // function to set the state with the submission of each student when a student id is clicked\n    handleClick(event,item){\n        //console.log(item[\"content\"]);\n        this.setState({content:item[\"content\"], \"student-id\":item[\"netId\"],submittedOn:item[\"submittedOn\"]});\n    }\n\n    // function to display the content of submission of each student with syntax highlighting\n    viewContent(){\n        const markdownInstruction = this.state.content;\n        const rawHtml = <div id=\"rawHtml\" className=\"language-html\">\n            <ReactCommonmark source={markdownInstruction} />\n        </div>\n        return <Segment style={{overflow: 'auto',minHeight:500,maxHeight:330,maxWidth:1000,minWidth:200 }}>\n            <Button onClick={(e)=>this.handleDeleteSubmission(e)}\n                disabled={this.state.content===\"Click on a student ID to view their submission\"}>\n                Delete submission</Button>\n            <Label>Submitted on:{new Date(this.state.submittedOn).toLocaleString()}</Label>\n            {rawHtml}\n        </Segment>\n    }\n\n    // function to handle delete submission button when clicked by instructor\n    handleDeleteSubmission(e)\n    {\n        // let nextStudent=\"\";\n        let clickedStudentIndex = this.state.specificSubmissions.findIndex((item,index,array)=>{\n                  return item[\"netId\"] === this.state[\"student-id\"];\n         });\n        // if(clickedStudentIndex === 0){\n        //     nextStudent = this.state.specificSubmissions\n        // }\n        const _this=this;\n        fetch('/submissions/'+this.state.currentSTask[\"task-name\"]+'/student/'+this.state[\"student-id\"], {\n            method: 'DELETE',\n            headers: {\n                \"Content-type\": \"application/json\"\n            }\n        }).then(function (response) {\n            console.log(\"inside this\");\n            _this.state.specificSubmissions.splice(clickedStudentIndex,1);\n            _this.setState({specificSubmissions:_this.state.specificSubmissions, content:\"\"});\n            _this.props.update();\n        })\n    }\n\n    // function to handle the edit task button\n    handleEditTask(e){\n        let taskIndex = this.state.submissionTasks.findIndex((item,index,arry)=>{\n            return item[\"task-name\"] === this.state[\"task-name\"];\n        });\n        const _this= this;\n        let submissionTask = {\n            type: \"submission\", \"task-name\": this.state[\"task-name\"],\n            due: this.state.due.toISOString()\n        };\n        fetch('/submissionTask/'+this.state.currentSTask[\"task-name\"], {\n            method: 'PUT',\n            headers: {\n                \"Content-type\": \"application/json\"\n            },\n            body: JSON.stringify(submissionTask)\n        }).then(function (response) {\n            alert(\"Task has been edited\");\n            _this.state.submissionTasks.splice(taskIndex,1,submissionTask);\n            _this.setState({isEdited:true, submissionTasks:_this.state.submissionTasks});\n            _this.props.update();\n        })\n    }\n\n\n    // function to handle the delete task. Displays a confirm dialog box with cancel and yes buttons\n    handleDeleteTask(){\n        this.setState({ open: true })\n    }\n   // function to handle cancel button in the delete confirm dialog box\n    handleCancel =() =>{\n        this.setState({open:false})\n    }\n\n    // function to handle yes button in the delete conform dialog box\n    handleConfirm = ()=>{\n        let taskIndex = this.state.submissionTasks.findIndex((item,index,arry)=>{\n            return item[\"task-name\"] === this.state[\"task-name\"];\n        });\n        const _this= this;\n        // Deleted the submission task\n        fetch('/submissionTask/'+this.state.currentSTask[\"task-name\"], {\n            method: 'DELETE',\n            headers: {\n                \"Content-type\": \"application/json\"\n            }\n        }).then(function (response) {\n            _this.setState({open:false});\n            _this.props.update();\n\n        }).then(()=>{\n            // Deleted the submissions from the deleted submission task\n            console.log(\"deleteeeeee\",this.state.currentSTask[\"task-name\"]);\n            fetch('/submissions/'+this.state.currentSTask[\"task-name\"], {\n                method: 'DELETE',\n                headers: {\n                    \"Content-type\": \"application/json\"\n                }\n            }).then(function (response) {\n                //console.log(\"inside this\");\n                alert(\"Task has been deleted\");\n                _this.state.submissionTasks.splice(taskIndex,1);\n                _this.state.specificSubmissions=[];\n                _this.setState({isDeleted:true,submissionTasks:_this.state.submissionTasks,\n                    specificSubmissions:_this.state.specificSubmissions});\n                //Display homepage after deletion\n                _this.props.viewHome();\n            })\n        });\n\n    }\n\n\n// function to render all details\n    render(){\n     console.log(this.state);\n        // function to display all student ids that have submitted the assignment\n       let students = this.state.specificSubmissions.map((item,index,array)=>{\n           return <Table.Row key={`row${item[\"netId\"]}`}><Table.Cell key={`submission${item[\"netId\"]}`}\n           onClick={(event)=>this.handleClick(event,item)} active={this.state[\"student-id\"] === item[\"netId\"]}>\n               {item[\"netId\"]}\n           </Table.Cell>\n           </Table.Row>\n       })\n\n\n        return <Grid stackable>\n            <Grid.Column>\n                <Grid.Row>\n                    <Segment style={{boxShadow:\"none\"}}>\n                        <span><Header  textAlign={\"center\"} as={\"h4\"}>\n                            <Input label={\"Submission Task-name\"} size='small' icon={\"tag\"} name={\"task-name\"}\n                                   value={this.state[\"task-name\"]}\n                                   readOnly\n                                   onChange={(e)=> this.setState({\"task-name\":e.target.value})}/>\n                        </Header>\n                        </span>\n                    </Segment>\n                </Grid.Row>\n                <Grid.Row>\n                    <Grid.Column>\n                        <Form centered={\"true\"}>\n                            <Segment textAlign={\"center\"}>\n                                <Form.Group centered={\"true\"} widths='equal'>\n                                    <Form.Field inline required>\n                                        <Label icon='calendar alternate' content=\"Due\"/>\n                                        <DatePicker\n                                            selected={this.state.due}\n                                            onChange={date => this.setState({due:date})}\n                                            showTimeSelect\n                                            timeFormat=\"p\"\n                                            timeIntervals={15}\n                                            dateFormat=\"Pp\"\n                                        />\n                                    </Form.Field>\n                                    <Button onClick={(e)=>this.handleEditTask(e)}>Save task details!</Button>\n                                    <Button onClick={(e)=>this.handleDeleteTask(e)}> Delete task</Button>\n                                    {/*Display the confirm dialog box for delete button*/}\n                                    <Confirm\n                                        open={this.state.open}\n                                        onCancel={this.handleCancel}\n                                        onConfirm={this.handleConfirm}\n                                    />\n                                </Form.Group>\n\n                            </Segment>\n                        </Form>\n                    </Grid.Column>\n\n                </Grid.Row>\n                <Grid.Row>\n                    <Grid>\n                        <Grid.Row>\n                    <Grid.Column width={4}>\n                        {/*Table that displays all submitter ids of an assignment*/}\n                        <Table>\n                            <Table.Header>\n                                <Table.Row>\n                                <Table.HeaderCell>Student Ids submitted</Table.HeaderCell>\n                                </Table.Row>\n                            </Table.Header>\n                            <Table.Body>\n                                {/*Display all the students that have submitted the assignment*/}\n                                {students}\n                            </Table.Body>\n                        </Table>\n                    </Grid.Column>\n                    <Grid.Column width={12}>\n                        {/*Display the content submitted by each student*/}\n                        {this.viewContent()}\n                    </Grid.Column>\n                        </Grid.Row>\n                    </Grid>\n                </Grid.Row>\n            </Grid.Column>\n\n        </Grid>\n    }\n}","/*This view is rendered when teacher clicks on a task under review tasks.\n* Teacher can view all reviews given for each student for a task and can edit any of the reviews given by their peers.\n* Teacher can also task details like due date, rubrics*/\nimport React from 'react';\nimport {\n    Menu,\n    Icon,\n    Grid,\n    Header,\n    Segment,\n    Table, Input, Form, Label, Select, Button, Modal, Confirm, TextArea\n} from 'semantic-ui-react';\n\nimport 'prismjs/themes/prism-coy.css';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport Prism from \"prismjs\";\nimport ReactCommonmark from \"react-commonmark\";\nimport DatePicker from \"react-datepicker\";\n\n\n\nexport default class StudentReviewSummary extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {specificReviews:props.specificReviews, currentRTask:props.currentRTask ,content:\"\",\n                      specSubmissions:props.specSubmissions, reviewDetails:[],reviewRubric:[],\n            \"peer-review-for\":props.currentRTask[\"peer-review-for\"],\n            due:new Date(props.currentRTask[\"due\"]), specAssignments:props.specAssignments,\n            teacherRubrics:props.currentRTask[\"rubric\"],\n        open:false, reviewTasks:props.reviewTasks,isDeleted:false,isEdited:false,isTaskEdited:false,isSaved:false,\n        instructions:props.currentRTask[\"instructions\"]}\n\n    }\n\n    //When a props is changed, a new state is returned\n    static getDerivedStateFromProps(props,state){\n        if(props.currentRTask === state.currentRTask){\n            return null;\n        }\n        else{\n            return {specificReviews:props.specificReviews, currentRTask:props.currentRTask ,\n                specSubmissions:props.specSubmissions,\n                \"peer-review-for\":props.currentRTask[\"peer-review-for\"],\n                due:new Date(props.currentRTask[\"due\"]), specAssignments:props.specAssignments,\n                teacherRubrics:props.currentRTask[\"rubric\"],\n                reviewTasks:props.reviewTasks,\n                instructions:props.currentRTask[\"instructions\"]}\n        }\n\n    }\n    \n    componentDidUpdate(prevProps, prevState) {\n        //console.log('Component did update!',);\n        // console.log(\"prevprops\",prevProps);\n        // console.log(\"prevState\",prevState);\n\n        // When another task is selected,  change the rubric details and review details in the state\n        if(prevState[\"peer-review-for\"] !== this.state[\"peer-review-for\"]){\n            // set rubric details\n            let rubricsDisplay = this.state.currentRTask[\"rubric\"].map((element, index, array) => {\n                //console.log(\"displayed for loop\", index + 1, \"times\");\n\n                this.setState({\n                    [`point${index}`]: element[\"points\"],\n                    [`rubric${index}`]: element[\"rubric-name\"],\n                    [`criteria${index}`]: element[\"criteria\"],\n                });\n            });\n            // set review details of students\n            let reviewsDisplay = this.state.specificReviews.map((element,index,array)=>{\n                element[\"review\"][\"rubric\"].map((item,ind,arr)=>{\n                    console.log(\"elementin update\",element);\n                    this.setState({\n                        [`inputPoint${item[\"rubric-name\"]}${element[\"submitter-id\"]}${element[\"reviewer-id\"]}`]: item[\"points-given\"],\n                        [`inputComment${item[\"rubric-name\"]}${element[\"submitter-id\"]}${element[\"reviewer-id\"]}`]: item[\"comments\"]\n\n                    });\n                });\n            });\n        }\n\n        Prism.highlightAll();\n\n    }\n\n    componentDidMount() {\n        // set the rubric details and review details in the state when the component is initially mounted\n        let rubricsDisplay = this.state.currentRTask[\"rubric\"].map((element, index, array) => {\n            //console.log(\"displayed for loop\", index + 1, \"times\");\n\n            this.setState({\n                [`point${index}`]: element[\"points\"],\n                [`rubric${index}`]: element[\"rubric-name\"],\n                [`criteria${index}`]: element[\"criteria\"],\n            });\n        });\n\n        let reviewsDisplay = this.state.specificReviews.map((element,index,array)=>{\n            element[\"review\"][\"rubric\"].map((item,ind,arr)=>{\n                console.log(\"elementin mount\",element);\n                this.setState({\n                    [`inputPoint${item[\"rubric-name\"]}${element[\"submitter-id\"]}${element[\"reviewer-id\"]}`]: item[\"points-given\"],\n                    [`inputComment${item[\"rubric-name\"]}${element[\"submitter-id\"]}${element[\"reviewer-id\"]}`]: item[\"comments\"]\n\n                });\n            });\n        });\n\n        Prism.highlightAll();\n    }\n    \n    // function to display the total points  for a student\n    viewPoints(item){\n\n            let submitters = this.state.specificReviews.filter((element ,index,array)=>{\n                return element[\"submitter-id\"] === item\n            });\n            let totalPoints = submitters.map((element,index,array)=>{\n                //console.log(element[\"total-points\"]);\n                if(element[\"review\"][\"total-points\"] < 10){\n                    return <Table.Cell negative key={`review${element[\"reviewer-id\"]}`}>\n                        {element[\"review\"][\"total-points\"]}\n                    </Table.Cell>\n                }\n                else{\n                    return <Table.Cell  key={`review${element[\"reviewer-id\"]}`}>\n                        {element[\"review\"][\"total-points\"]}\n                    </Table.Cell>\n                }\n\n            });\n            return totalPoints;\n        }\n\n\n    // function to get all reviewer details and submission content for each submitter and set in state\n    handleItemClick(event,item){\n        console.log(\"clicked review item\");\n        let content=\"\";\n        let submission = this.state.specSubmissions.find((element,index,array)=>{\n            //console.log(element[\"assignment-name\"]);\n            return element[\"netId\"] === item;\n        });\n        if(typeof submission !=\"undefined\"){\n            content=submission[\"content\"];\n        }\n\n        let reviewDetails = this.state.specificReviews.filter((element,index,array)=>{\n            return element[\"submitter-id\"] === item;\n\n        });\n        console.log(\"reviewDetails\",reviewDetails);\n\n        //console.log(\"content\",content)\n        this.setState({content:content, reviewDetails:reviewDetails,\"student-id\":item,\n            viewReviews:false, \"reviewer-id\":\"\"});\n    }\n    \n    // function to display the submission content of each submitter\n    viewContents(){\n        const markdownInstruction = this.state.content;\n        const rawHtml = <div id=\"rawHtml\" className=\"language-html\">\n            <ReactCommonmark source={markdownInstruction} />\n        </div>\n        return <Segment style={{overflow: 'auto',minHeight:500,maxHeight:330,maxWidth:1000,minWidth:150 }}>\n            {rawHtml}\n        </Segment>\n    }\n\n    // function to set the state with the review points and comments for each submitter when a reviewer is clicked\n    handleReviewClick(event,review){\n        console.log(\"clicked\",review, review[\"review\"][\"rubric\"]);\n        this.setState({\"reviewRubric\": review[\"review\"][\"rubric\"], \"reviewer-id\":review[\"reviewer-id\"],\n                     viewReviews:true\n        });\n\n    }\n\n    //  function to add a rubric for a review task\n    addRubrics(e) {\n        this.state.teacherRubrics.push({\"points\": \"\", \"rubric-name\": \"\",\n            \"criteria\": \"\"});\n        //let lastElement = this.state.rubricIds[this.state.rubricIds.length-1];\n        this.setState({teacherRubrics: this.state.teacherRubrics});\n    }\n\n    // toggle the view when edit review button is clicked\n    handleEditReviews(e){\n        this.setState({isEdited:true});\n    }\n    \n    // toggle the view when edit task button is clicked\n    handleEditTaskDetails(e){\n        this.setState({isTaskEdited:true});\n    }\n\n    // deleteRubrics(e,element,index){\n    //\n    //     let ad = this.state.currentRTask[\"rubric\"].findIndex((item,index,arr)=>{\n    //         return item[\"rubric-name\"] == element[\"rubric-name\"];\n    //     })\n    //\n    //    delete this.state.currentRTask[\"rubric\"][ad];\n    //     this.setState({[`point${element}[\"rubric-name\"]}${index}`]:undefined,\n    //         [`rubric${element}[\"rubric-name\"]}${index}`]:undefined,\n    //         [`criteria${element}[\"rubric-name\"]}${index}`]:undefined,\n    //         rubrics:this.state.currentRTask[\"rubric\"]})\n\n        // console.log(element);\n        // this.state.rubric.splice(index,1);\n        // let i = this.state.rubricIds.indexOf(element);\n        // this.state.rubricIds.splice(i,1);\n        // if(i > -1){\n        //     this.setState({[`point${element}`]:undefined, [`rubric${element}`]:undefined,\n        //         [`criteria${element}`]:undefined,rubric:this.state.rubric,rubricIds:this.state.rubricIds});\n        // }\n        //console.log(\"deleted\", this.state.rubricIds);\n\n    //}\n\n    // function to handle when only  rubric input\n    handleRubricChange(e,element,index) {\n        // handle the input of rubric fields\n        this.handleEachChange(e).then(() => {\n            // create object for each rubric\n            let rubric_task = {\n                \"rubric-name\": this.state[`rubric${index}`],\n                \"points\": this.state[`point${index}`],\n                \"criteria\": this.state[`criteria${index}`],\n            }\n            // Add each rubric into an array and set in state\n            this.state.teacherRubrics.splice(index, 1, rubric_task);\n            this.setState({\n                teacherRubrics: this.state.teacherRubrics,\n            });\n        });\n    }\n\n    // function to edit the review task details\n    handleEditTask(e){\n        let taskIndex = this.state.reviewTasks.findIndex((item,index,arry)=>{\n            return item[\"peer-review-for\"] === this.state[\"peer-review-for\"];\n        });\n        const _this= this;\n        let reviewTask = {\n            \"peer-review-for\": this.state[\"peer-review-for\"],\n            due: this.state.due.toISOString(),rubric:this.state.teacherRubrics,\n            instructions:this.state.instructions\n        };\n        let studentAssign =  this.state.specAssignments;\n        // Update the review task details\n        fetch('/reviewTask/'+this.state.currentRTask[\"peer-review-for\"], {\n            method: 'PUT',\n            headers: {\n                \"Content-type\": \"application/json\"\n            },\n            body: JSON.stringify(reviewTask)\n        }).then(()=>{\n            // change task details in studentAssignment as well\n            fetch('/studentAssignment/'+this.state.currentRTask[\"task-name\"], {\n                method: 'PUT',\n                headers: {\n                    \"Content-type\": \"application/json\"\n                },\n                body: JSON.stringify(studentAssign)\n            }).then(function (response) {\n                console.log(\"inside this\");\n                _this.props.update();\n            })\n        }).then(function (response) {\n            _this.state.reviewTasks.splice(taskIndex,1,reviewTask);\n            _this.setState({isTaskEdited:false,reviewTasks:_this.state.reviewTasks,});\n        });\n    }\n\n    // function to handle the input change\n    handleEachChange = async(e,rubrics,index) =>{\n        const target = e.target;\n        const value = target.value;\n        const name = target.name;\n        this.setState({\n            [name]:value\n        });\n\n\n    }\n\n    // function to edit a review posted by a student\n    handleEditOneReview(e,item,index){\n        // function to handle input changes for review points and comment posted by a student\n        this.handleEachChange(e).then(()=> {\n\n            let rubric_task = {\n                \"rubric-name\": item[\"rubric-name\"],\n                \"possible-points\": item[\"possible-points\"],\n                \"points-given\": this.state[`inputPoint${item[\"rubric-name\"]}${this.state[\"student-id\"]}${this.state[\"reviewer-id\"]}`],\n                \"comments\": this.state[`inputComment${item[\"rubric-name\"]}${this.state[\"student-id\"]}${this.state[\"reviewer-id\"]}`],\n            }\n            this.state.reviewRubric.splice(index, 1, rubric_task);\n            this.setState({\n                reviewRubric: this.state.reviewRubric\n            });\n        });\n\n    }\n\n    // function to handle save button when clicked\n    handleSaveReviews(e){\n        //Get total points\n        let totalPoints =0;\n        for(let i=0;i<this.state.reviewRubric.length;i++){\n            totalPoints +=parseInt(this.state.reviewRubric[i][\"points-given\"]);\n        }\n\n        // get index of the review that is edited\n        let reviewIndex = this.state.specificReviews.findIndex((element)=>{\n            return element[\"reviewer-id\"] === this.state[\"reviewer-id\"] && element[\"submitter-id\"] === this.state[\"student-id\"];\n        })\n\n        const _this= this;\n        \n        let editedReviews = {\n            \"assignment-name\": this.state[\"peer-review-for\"], \"reviewer-id\": this.state[\"reviewer-id\"],\n            \"submitter-id\":this.state[\"student-id\"],\n            review:{\"total-points\":totalPoints, \"general-comments\":\"\", rubric:this.state.reviewRubric}\n        };\n        \n        // Update the review details in the database\n        fetch('/reviews/'+this.state[\"peer-review-for\"]+'/reviewer/'+this.state[\"reviewer-id\"]+'/submitter/'+this.state[\"student-id\"]\n            , {\n                method: 'PUT',\n                headers: {\n                    \"Content-type\": \"application/json\"\n                },\n                body: JSON.stringify(editedReviews)\n            }).then(function (response) {\n            _this.state.specificReviews.splice(reviewIndex,1,editedReviews);\n            _this.setState({\n                specificReviews:_this.state.specificReviews, isEdited:false\n            });\n        });\n\n\n    }\n\n    // function to handle the delete task. Displays a confirm dialog box with cancel and yes buttons\n    handleDeleteTask(){\n        this.setState({ open: true })\n\n    }\n\n// function to handle cancel button in the delete confirm dialog box\n    handleCancel =() =>{\n        this.setState({open:false})\n    }\n\n    // function to handle yes button in the delete conform dialog box\n    handleConfirm = ()=> {\n        let taskIndex = this.state.reviewTasks.findIndex((item,index,arry)=>{\n            return item[\"peer-review-for\"] === this.state[\"peer-review-for\"];\n        });\n        const _this= this;\n        //Delete task from database\n        fetch('/ReviewTask/'+this.state.currentRTask[\"peer-review-for\"], {\n            method: 'DELETE',\n            headers: {\n                \"Content-type\": \"application/json\"\n            }\n        }).then(function (response) {\n            //alert(\"Task has been deleted\");\n            _this.setState({open:false});\n            _this.props.update();\n\n        }).then(()=> {\n            // Delete reviews after deleting the review task\n            fetch('/reviews/' + this.state.currentRTask[\"peer-review-for\"], {\n                method: 'DELETE',\n                headers: {\n                    \"Content-type\": \"application/json\"\n                }\n            }).then(() => {\n                //Delete the student assignments for a review task after deleting the task\n                fetch('/studentAssignment/' + this.state.currentRTask[\"peer-review-for\"], {\n                    method: 'DELETE',\n                    headers: {\n                        \"Content-type\": \"application/json\"\n                    }\n                }).then(function (response) {\n                    console.log(\"specass\",_this.state.specAssignments);\n                    alert(\"Task has been deleted\");\n                    //Remove task from array and change student assignments object to empty\n                    _this.state.reviewTasks.splice(taskIndex, 1);\n                    _this.state.specAssignments={};\n                    _this.state.specificReviews=[];\n                    _this.setState({isDeleted: true, reviewTasks: _this.state.reviewTasks,\n                        specAssignments:_this.state.specAssignments,specificReviews:_this.state.specificReviews});\n                    //Display homepage after deletion\n                    _this.props.viewHome();\n                });\n            });\n        });\n    }\n\n\n    // function to handle the view of rubrics. Based on the number of rubrics in array, all rubrics are displayed\n    displayRubrics() {\n        let rubricsDisplay = this.state.teacherRubrics.map((element, index, array) => {\n            //console.log(\"displayed for loop\", index + 1, \"times\");\n            const criteriaMarkdown = this.state[`criteria${index}`];\n            const criteriaHighlighted = <div id=\"rawHtml\" className=\"language-html\">\n                <ReactCommonmark source={criteriaMarkdown} />\n            </div>\n\n\n            //return <div key={`index${element}`}>aaa</div>\n            return <div key={`divvv${index}`}>\n                {/*toggle between edit task screen and task view screen*/}\n                {this.state.isTaskEdited ?\n                  <Form.Group key={`group${index}`}>\n                    <Label content={\"Rubric\"}/>\n                      <Form.Input name={`rubric${index}`}\n                                  label='rubric-name' placeholder='rubric-name'\n                                  width={8}\n                                  disabled={this.state.specificReviews.length > 0}\n                                  key={`rubric${index}`}\n                                  required\n                                  onChange={(e) => this.handleRubricChange(e, element, index)}\n                                  value={this.state[`rubric${index}`]}/>\n                        <Form.Input name={`point${index}`}\n                                    type='number' label='Points' placeholder='Points' width={6}\n                                    onChange={(e) => this.handleRubricChange(e, element, index)}\n                                    disabled={this.state.specificReviews.length > 0 ||\n                                    this.state[`rubric${index}`]=== \"\"}\n                                    key={`point${index}`}\n                                    required\n                                    value={this.state[`point${index}`]}/>\n\n                        <Form.TextArea name={`criteria${index}`}\n                                       label='criteria' placeholder='criteria'\n                                       width={12}\n                                       disabled={this.state.specificReviews.length > 0 ||\n                                       this.state[`rubric${index}`]=== \"\"}\n                                       required\n                                       key={`criteria${index}`}\n                                       onChange={(e) => this.handleRubricChange(e, element, index)}\n                                       value={this.state[`criteria${index}`]}/>\n                    <Button basic icon size={\"mini\"} circular\n                            onClick={(e) => this.addRubrics(e)}\n                            disabled={!this.state[`point${index}`] ||\n                            !this.state[`rubric${index}`] ||\n                            !this.state[`criteria${index}`]}>\n                        <Icon name='add'/>\n                    </Button>\n                    {/*<Button basic icon size={\"mini\"} circular*/}\n                    {/*        onClick={(e) => this.deleteRubrics(e,element,index)}*/}\n                    {/*        disabled={this.state.rubrics.length === 1}>*/}\n                    {/*    <Icon name='delete'/>*/}\n                    {/*</Button>*/}\n                </Form.Group>\n                    /*display normal task view screen*/\n            :\n                 <Form.Group key={`group${index}`}>\n                    <Label content={\"Rubric\"}/>\n                     <Form.Input key={`rubric${index}`}\n                                 label='rubric-name'\n                                 width={4}\n                                 readOnly\n                                 value={this.state[`rubric${index}`] || \"\"}/>\n                        <Form.Input key={`point${index}`}\n                                    label='Points'\n                                    width={3}\n                                    readOnly\n                                    value={this.state[`point${index}`] || \"\"}/>\n\n                        <Segment style={{\n                            overflow: 'auto',\n                            minHeight: 100, maxHeight: 100, maxWidth: 250, minWidth: 250\n                        }}\n                                 textAlign=\"left\">\n                            {criteriaHighlighted}\n                        </Segment>\n\n\n                    {/*<Button basic icon size={\"mini\"} circular*/}\n                    {/*        onClick={(e) => this.deleteRubrics(e,element,index)}*/}\n                    {/*        disabled={this.state.rubrics.length === 1}>*/}\n                    {/*    <Icon name='delete'/>*/}\n                    {/*</Button>*/}\n                </Form.Group>\n            }\n            </div>\n        });\n        return rubricsDisplay;\n    }\n\n    // Display how the students are assigned for peer-review\n    displayAssignments(){\n        //console.log(\"function called\");\n        //function to display the reviewers for each student\n        function viewStudents(element){\n            let reviewers = element[\"reviewers\"].map((item,index,array)=>{\n                return <Table.Cell key={`cell2${index}`}>\n                    {item}\n\n                </Table.Cell>\n\n            });\n            return reviewers;\n        }\n\n\n        // Display all submitters for each task\n        let submitterId = this.state.specAssignments[\"studentsAssignment\"].map((element,index,array)=>{\n            return <Table.Row key={`row${index}`}>\n                <Table.Cell key={`cell${index}`}>\n                  {element[\"student\"]}\n                </Table.Cell>\n                {viewStudents(element)}\n            </Table.Row>\n        });\n\n\n        // return all the details in a modal\n        return  <Modal trigger={<Button >View assignments</Button>}>\n            <Modal.Header>Rubrics</Modal.Header>\n            <Modal.Content  scrolling>\n\n                <Modal.Description>\n                    <Header>Modal Header</Header>\n                    <Table celled>\n                        <Table.Header>\n                            <Table.Row>\n                                <Table.HeaderCell>Submitter Id</Table.HeaderCell>\n                                <Table.HeaderCell colSpan={this.state.num}>Reviewed by\n                                </Table.HeaderCell>\n\n                            </Table.Row>\n                        </Table.Header>\n\n                        <Table.Body>\n                            {submitterId}\n                        </Table.Body>\n                    </Table>\n\n                </Modal.Description>\n            </Modal.Content>\n\n        </Modal>\n    }\n\n\n\n\n\n    render(){\n        console.log(\"state\",this.state);\n        let submittersSet = new Set();\n        let students = this.state.specificReviews.map((item,index,array)=>{\n            submittersSet.add(item[\"submitter-id\"]);\n        });\n\n        let newArray = Array.from(submittersSet);\n        //console.log(\"newarray\",newArray);\n        let studentsSubmissions = newArray.map((item,index,array)=>{\n            return <Table.Row key={`row${item}`}>\n                <Table.Cell key={`submission${item}`}\n                            onClick={(event)=>this.handleItemClick(event,item)}\n                            active={this.state[\"student-id\"] === item}>\n                    {item}\n                </Table.Cell>\n                    {this.viewPoints(item)}\n                </Table.Row>\n        });\n\n\n             let reviewerIds = this.state.reviewDetails.map((review,index,array)=> {\n                 console.log(\"getting printd\");\n\n                     return <Menu.Item\n                         name={`ReviewDisplay${index}`}\n                         as='a'\n                         onClick={(event) => this.handleReviewClick(event, review)}\n                         active={review[\"reviewer-id\"] === this.state[\"reviewer-id\"]}\n                         key={`ReviewDisplay${review}${index}`}\n                     >\n                         {review[\"reviewer-id\"]}\n                     </Menu.Item>\n\n\n             });\n             // convert markdown instructions to highlighted syntax\n        const markdownInstruction = this.state.instructions;\n        const highlightedInstruction = <div id=\"rawHtml\" className=\"language-html\">\n            <ReactCommonmark source={markdownInstruction} />\n        </div>\n\n\n        // Dsiplay all points and comments(review details ) of each review\n         let data = this.state.reviewRubric.map((item,index,array)=>{\n            const comment = item[\"comments\"];\n            const rawHtml1 = <div id=\"rawHtml\" className=\"language-html\">\n                <ReactCommonmark source={comment} />\n            </div>\n\n                return <Table.Row key={`roww${index}${item[\"rubric-name\"]}`}>\n                    <Table.Cell key={`rubric${index}${item[\"rubric-name\"]}`}>\n                        {item[\"rubric-name\"]}\n                    </Table.Cell>\n                    <Table.Cell key={`possiblepts${index}${item[\"rubric-name\"]}`}>\n                        {item[\"possible-points\"]}\n                    </Table.Cell>\n                    <Table.Cell key={`pointsGiven${index}${item[\"rubric-name\"]}`}>\n                        {/*toggle between edit view and normal view of reviews*/}\n                        {this.state.isEdited ?\n                            <input type=\"number\"\n                                   style={{width: \"4em\"}}\n                                   name={`inputPoint${item[\"rubric-name\"]}${this.state[\"student-id\"]}${this.state[\"reviewer-id\"]}`}\n                                   required\n                                   onChange={(e)=>this.handleEditOneReview(e,item,index)}\n                                   key={`inputPoint${item[\"rubric-name\"]}${this.state[\"student-id\"]}${this.state[\"reviewer-id\"]}`}\n                                   value={item[\"points-given\"] ||\n                                   this.state[`inputPoint${item[\"rubric-name\"]}${this.state[\"student-id\"]}${this.state[\"reviewer-id\"]}`]}/>\n                                   :\n                            item[\"points-given\"]\n                        }\n\n                    </Table.Cell>\n                    <Table.Cell key={`comment${index}${item[\"rubric-name\"]}`}>\n                        {this.state.isEdited ?\n                            <Input\n                                key={`inputComment${item[\"rubric-name\"]}${this.state[\"student-id\"]}${this.state[\"reviewer-id\"]}`}\n                                name={`inputComment${item[\"rubric-name\"]}${this.state[\"student-id\"]}${this.state[\"reviewer-id\"]}`}\n                                onChange={(e) => this.handleEditOneReview(e, item, index)}\n                                required\n                                value={comment ||\n                                this.state[`inputComment${item[\"rubric-name\"]}${this.state[\"student-id\"]}${this.state[\"reviewer-id\"]}`]}/>\n                            :\n                            rawHtml1\n                        }\n                    </Table.Cell>\n                </Table.Row>\n        });\n\n\n        return <div style={{marginLeft:10,marginRight:10,  minWidth: 550, marginTop:50}}>\n            <Grid stackable>\n            <Grid.Column>\n                <Grid.Row>\n                    <Segment style={{boxShadow:\"none\"}}>\n                        <span><Header  textAlign={\"center\"} as={\"h5\"}>\n                            {this.state.isTaskEdited ?\n                                <Input label={\"peer-review-for\"} icon={\"tag\"} name={\"peer-review-for\"}\n                                       value={this.state[\"peer-review-for\"]}\n                                       readOnly\n                                       onChange={(e)=> this.setState({\"peer-review-for\":e.target.value})}/>\n                                       :\n\n                                <Input label={\"peer-review-for\"}\n                                       value={this.state[\"peer-review-for\"]}\n                                       icon={\"tag\"}\n                                readOnly/>\n                            }\n\n                        </Header>\n                        </span>\n                    </Segment>\n                </Grid.Row>\n\n                <Grid.Row textAlign={\"center\"}>\n                            <Segment textAlign={\"center\"}>\n                                <Form centered={\"true\"}>\n                                    <Form.Field inline required>\n                                        <Label icon='calendar alternate' content=\"Due\"/>\n                                        {this.state.isTaskEdited ?\n                                            <DatePicker\n                                                selected={this.state.due}\n                                                onChange={date => this.setState({due:date})}\n                                                showTimeSelect\n                                                timeFormat=\"p\"\n                                                timeIntervals={15}\n                                                dateFormat=\"Pp\"\n                                            />\n                                            :\n                                            new Date(this.state.due).toLocaleString()\n                                        }\n                                    </Form.Field>\n                                    <Form.Field inline required>\n                                        <Label>General Instructions</Label>\n                                        {this.state.isTaskEdited ?\n                                            <TextArea\n                                                style={{minHeight: 100, minWidth: 200, maxHeight: 100, maxWidth: 300,}}\n                                                name={\"instructions\"}\n                                                required\n                                                value={this.state.instructions}\n                                                onChange={(e) => {\n                                                    this.handleEachChange(e)\n                                                }}/>\n                                            :\n\n                                            <Segment style={{overflow: 'auto', marginLeft:\"20em\",\n                                                minHeight:330,maxHeight:330,maxWidth:600,minWidth:200 }}\n                                                     textAlign=\"left\">\n                                                {highlightedInstruction}\n                                            </Segment>\n\n                                        }\n                                    </Form.Field>\n\n\n                                    <Grid textAlign={\"center\"}>\n                                        <Grid.Column width={10}>\n                                            {this.displayRubrics()}\n                                        </Grid.Column>\n                                    </Grid>\n\n\n                                <Button onClick={(e)=>this.handleEditTaskDetails(e)}\n                                        disabled={this.state.isTaskEdited}>Edit this task</Button>\n                                <Button onClick={(e)=>this.handleEditTask(e)}\n                                        disabled={!this.state.isTaskEdited}>Save task details!</Button>\n                                <Button onClick={(e)=>this.handleDeleteTask(e)}> Delete task</Button>\n                                    {this.displayAssignments()}\n                                    {/*Display confirm dialog box when edit button is clicked*/}\n                                <Confirm\n                                    open={this.state.open}\n                                    onCancel={this.handleCancel}\n                                    onConfirm={this.handleConfirm}\n                                />\n\n                        </Form>\n                            </Segment>\n\n\n                </Grid.Row>\n                <Grid.Row>\n                    <Grid>\n                        <Grid.Row>\n                            <Grid.Column width={4}>\n                                <Table>\n                                    <Table.Header>\n                                        <Table.Row>\n                                            <Table.HeaderCell>Student Ids submitted</Table.HeaderCell>\n                                            <Table.HeaderCell colSpan={3}>Review total points</Table.HeaderCell>\n                                        </Table.Row>\n                                    </Table.Header>\n                                    <Table.Body>\n                                        {/*Display all submitter ids for an assignment*/}\n                                        {studentsSubmissions}\n                                    </Table.Body>\n                                </Table>\n                            </Grid.Column>\n                            <Grid.Column width={7}>\n                                {this.viewContents()}\n                            </Grid.Column>\n                            <Grid.Column width={4}>\n                                {/*Display all reviewer ids for each submitter*/}\n                                <Segment style={{overflow: 'auto',minHeight:300,maxHeight:400,maxWidth:2000,minWidth:300 }}>\n                                <Menu pointing secondary>\n                                    {reviewerIds}\n                                </Menu>\n                                    {/*Display all review details for each review*/}\n                                {this.state.viewReviews === true ?\n                                  <Table>\n                                    <Table.Header>\n                                    <Table.Row>\n                                    <Table.HeaderCell>Rubric name</Table.HeaderCell>\n                                    <Table.HeaderCell>Possible pts</Table.HeaderCell>\n                                    <Table.HeaderCell>Points given</Table.HeaderCell>\n                                    <Table.HeaderCell>Comments</Table.HeaderCell>\n                                    </Table.Row>\n                                    </Table.Header>\n                                    <Table.Body>\n                                        {/*Display all details of reviews*/}\n                                    {data}\n                                        <Button onClick={(e)=>this.handleEditReviews(e)}\n                                        disabled={this.state.isEdited}>Edit this review</Button>\n                                        <Button onClick={(e)=>this.handleSaveReviews(e)}\n                                        disabled={!this.state.isEdited}>Save this review</Button>\n                                    </Table.Body>\n                                    </Table>\n                                    /*tif a reviewer id is not clicked, display this*/\n                                    :\n                                    <div>Click on a Reviewer id</div>\n\n                                }\n                                </Segment>\n\n                            </Grid.Column>\n                        </Grid.Row>\n                    </Grid>\n                </Grid.Row>\n            </Grid.Column>\n        </Grid>\n        </div>\n\n    }\n\n\n}","/*Basic view for teacher or instructor\n* This is rendered when a user is logged in as a teacher\n* */\n\nimport React from 'react';\nimport {\n    Menu,\n    Grid,\n    Dropdown, Icon, Segment, Header,\n\n} from 'semantic-ui-react';\n//import createdSubmissionTasks from '../data/createdSubmissionTasks';\n//import createdReviewTasks from '../data/createdReviewTasks'\nimport Prism from \"prismjs\";\nimport CreateReviewTask from \"./createReviewTask\";\nimport StudentSubmissionSummary from \"./studentSubmissionSummary\";\n//import submissionsHW from '../data/submissionsHw';\n//import reviews from '../data/reviewTasksStudents';\nimport StudentReviewSummary from './studentReviewSummary';\n\n\nexport default class TeacherView extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {submissionTasks:[] ,reviewTasks:[], mode:\"\",\n        submissions:[],reviews:[], specificSubmissions:[], currentSubmissionTask:\"\",specificReviews:[],\n        currentReviewTask:\"\", studentAssignment:[],specAssignments:[]}\n    }\n\n\n    componentDidUpdate(prevProps, prevState) {\n\n        console.log(\"teacher view updated\");\n        console.log(\"prevState\", prevState[\"submissionTasks\"] === this.state[\"submissionTasks\"]);\n        //console.log(\"nowstate\", this.state[\"submissionTasks\"]);\n        if(prevState[\"specificSubmissions\"] !== this.state[\"specificSubmissions\"]) {\n            const _this = this;\n            fetch('/submissions/', {\n                method: \"GET\",\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json'\n                }\n            }).then(response => response.json()).then(function (data) {\n\n                //console.log(\"this is what we got in submissions\" + data.submissions);\n                //_this.state.submissions.push(data.submission);\n                _this.setState({\"submissions\": data.submissions});\n\n\n            });\n        }\n\n        else if(prevState[\"specificReviews\"] !== this.state[\"specificReviews\"]) {\n                const _this = this;\n                fetch('/reviews/', {\n                    method: \"GET\",\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Accept': 'application/json'\n                    }\n                }).then(response => response.json()).then(function (data) {\n\n                    //console.log(\"this is what we got in reviews\" + data.reviews);\n                    //_this.state.submissions.push(data.submission);\n                    _this.setState({\"reviews\": data.reviews});\n\n\n                });\n\n        }\n\n        else if(prevState[\"currentSubmissionTask\"] !== this.state[\"currentSubmissionTask\"]) {\n            const _this = this;\n            fetch('/submissionTask',{\n                method: \"GET\",\n                headers : {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json'\n                }\n            }).then(response => response.json()).then(function(data) {\n\n                //console.log(\"this is what we got in sub tasks\" +data);\n                _this.setState({submissionTasks: data.submissionTasks});\n\n            });\n\n        }\n\n        Prism.highlightAll();\n\n    }\n\n    // Get all submission tasks, submissions, reviews and review tasks when component is mounted\n    componentDidMount() {\n        let _this = this;\n        fetch('/submissionTask',{\n            method: \"GET\",\n            headers : {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        }).then(response => response.json()).then(function(data) {\n\n            console.log(\"this is what we got\" +data);\n            _this.setState({submissionTasks: data.submissionTasks});\n\n        });\n\n        fetch('/submissions/',{\n            method: \"GET\",\n            headers : {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        }).then(response => response.json()).then(function(data) {\n\n            console.log(\"this is what we got in task submit\" +data.submissions);\n            //_this.state.submissions.push(data.submission);\n                _this.setState({\"submissions\": data.submissions});\n\n\n        });\n        fetch('/reviewTask',{\n            method: \"GET\",\n            headers : {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        }).then(response => response.json()).then(function(data) {\n\n            console.log(\"this is what we got\" +data);\n            _this.setState({reviewTasks: data.reviewTasks});\n\n        });\n        fetch('/reviews/',{\n            method: \"GET\",\n            headers : {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        }).then(response => response.json()).then(function(data) {\n\n            console.log(\"this is what we got in task submit\" +data.reviews);\n            //_this.state.submissions.push(data.submission);\n            _this.setState({\"reviews\": data.reviews});\n\n\n        });\n\n        fetch('/studentAssignment/',{\n            method: \"GET\",\n            headers : {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        }).then(response => response.json()).then(function(data) {\n\n            console.log(\"this is what we got in stu ass\" +data.studentAssignment);\n            //_this.state.submissions.push(data.submission);\n            _this.setState({\"studentAssignment\": data.studentAssignment});\n\n\n        });\n        Prism.highlightAll();\n    }\n\n    updateArray() {\n        this.setState({ submissionTasks: this.state.submissionTasks });\n    }\n\n\n    // Display different view components for teacher based on user click\n    handleViewComponent(){\n        if(this.state.mode === \"createTask\"){\n            return <CreateReviewTask submissionTasks={this.state.submissionTasks} reviewTasks={this.state.reviewTasks}\n                                     update={this.updateArray.bind(this)} submissions={this.state.submissions}\n                                     mode={this.state.mode}\n                                     />\n        }\n        else if(this.state.mode === \"viewSubmissionSummary\"){\n             return <StudentSubmissionSummary specificSubmissions={this.state.specificSubmissions}\n                                              currentSTask={this.state.currentSubmissionTask}\n                                              update={this.updateArray.bind(this)}\n                                              mode={this.state.mode}\n                                              submissionTasks={this.state.submissionTasks}\n                                              viewHome={()=>this.handleHomeClick()}/>\n         }\n        else if(this.state.mode === \"viewReviewSummary\"){\n            return <StudentReviewSummary specificReviews={this.state.specificReviews}\n                                         currentRTask={this.state.currentReviewTask}\n                                         specSubmissions ={this.state.specSubmissions}\n                                         specAssignments = {this.state.specAssignments}\n                                         update={this.updateArray.bind(this)}\n                                         mode={this.state.mode}\n                                         reviewTasks={this.state.reviewTasks}\n                                         viewHome={()=>this.handleHomeClick()}/>\n        }\n        else{\n            // in homepage, display the tasks to complete both, submission and review\n            let createdTasks = this.state.submissionTasks.map((element,index,array)=>{\n                return <Menu.Item\n                    onClick={(e)=>this.handleSubmissionTaskClick(e,element)}\n                    key={`sstasks${index}`}\n                    active={element=== this.state.currentSubmissionTask }>\n                    {element[\"task-name\"]}\n                </Menu.Item>\n            });\n\n            let createdReview = this.state.reviewTasks.map((element,index,array)=>{\n                return <Menu.Item\n                    onClick={(e)=>this.handleReviewTaskClick(e,element)}\n                    key={`rrtasks${index}`}\n                    active={element=== this.state.currentReviewTask }>\n                    {element[\"peer-review-for\"]}\n                </Menu.Item>\n            });\n\n            return <div><Segment placeholder style={{overflow: 'auto',minHeight:230,maxHeight:330,maxWidth:1000,minWidth:200 }}>\n                <Header icon>\n                    <Icon name='tag' />\n                    You have the created the following assignments to submit. Click on each to view progress.\n                </Header>\n                <Menu>\n                    {createdTasks}\n                </Menu>\n            </Segment>\n                <Segment placeholder style={{overflow: 'auto',minHeight:230,maxHeight:330,maxWidth:1000,minWidth:200 }}>\n                    <Header icon>\n                        <Icon name='tag' />\n                        You have created the following review tasks to submit. Click on each to view progress.\n                    </Header>\n                    <Menu>\n                        {createdReview}\n                    </Menu>\n                </Segment>\n\n            </div>\n        }\n\n    }\n    // function to get submissions of submission task clicked and set in state\n    handleSubmissionTaskClick(e,element){\n        let specificSubmissions = this.state.submissions.filter((item,index,array)=>{\n            return item[\"assignment-name\"] === element[\"task-name\"];\n        });\n        console.log(\"specsss sub\",specificSubmissions);\n        this.setState({mode:\"viewSubmissionSummary\", currentSubmissionTask:element,specificSubmissions:specificSubmissions});\n    }\n\n    // Change mode to createTask when create task button is clicked\n    handleCreateTaskClick(event){\n        this.setState({mode:\"createTask\"});\n    }\n\n    // function to get reviews of review task clicked and set in state\n    handleReviewTaskClick(e,element){\n        let specificReviews = this.state.reviews.filter((item,index,array)=>{\n            return item[\"assignment-name\"] === element[\"peer-review-for\"]\n        });\n        let specSubmissions = this.state.submissions.filter((item,index,array)=>{\n            return item[\"assignment-name\"] === element[\"peer-review-for\"];\n        });\n\n        let specAssignments = this.state.studentAssignment.find((item,index,array)=>{\n            return item[\"peer-review-for\"] === element[\"peer-review-for\"];\n        })\n        //console.log(\"spec sub\",ppp);\n        this.setState({mode:\"viewReviewSummary\", currentReviewTask:element, specificReviews:specificReviews,\n                            specSubmissions:specSubmissions, specAssignments:specAssignments});\n    }\n\n    handleHomeClick() {\n\n        this.setState({mode: \"\", currentSubmissionTask: \"\", createdReviewTask: \"\", specificSubmissions:[],\n            specificReviews:[]\n        });\n    }\n\n    // Render all elements\n    render(){\n        //console.log(\"state teacher view\", this.state);\n        let createdTasks = this.state.submissionTasks.map((element,index,array)=>{\n            return <Dropdown.Item\n                onClick={(e)=>this.handleSubmissionTaskClick(e,element)}\n                key={`stasks${index}`}\n                active={element=== this.state.currentSubmissionTask }>\n                {element[\"task-name\"]}\n            </Dropdown.Item>\n        });\n\n        let createdReview = this.state.reviewTasks.map((element,index,array)=>{\n            return <Dropdown.Item\n                onClick={(e)=>this.handleReviewTaskClick(e,element)}\n                key={`rtasks${index}`}\n                active={element=== this.state.currentReviewTask }>\n                {element[\"peer-review-for\"]}\n            </Dropdown.Item>\n        });\n\n       // Actual rendering of JSX elements\n        return<div>\n<div>\n\n            <Menu fixed='top' fluid stackable inverted>\n\n                    <Menu.Item as='h4'\n                               header\n                               position={\"right\"}\n                    onClick={()=>this.handleHomeClick()}>\n                        Peer Review System\n                    </Menu.Item>\n                    <Menu.Item\n                        as='a'\n                        position={\"right\"}\n                    >{`Welcome, ${this.props.netId}`}</Menu.Item>\n                    <Menu.Item\n                        as='a'\n                        position={\"right\"}\n                        margin-right={\"150px\"}\n                        onClick ={this.props.onlogoutClick}\n                    >Logout</Menu.Item>\n\n            </Menu>\n</div>\n\n\n\n            <div style={{marginLeft:10,marginRight:10,  minWidth: 550, marginTop:50}}>\n                <Grid   stackable>\n                    <Grid.Column>\n\n                    <Grid.Row >\n\n                        <Menu fluid stackable>\n\n                            <Dropdown item text='Submission tasks'>\n                                <Dropdown.Menu>\n                                    {createdTasks}\n                                </Dropdown.Menu>\n                            </Dropdown>\n                            <Dropdown item text='Review tasks'>\n                                <Dropdown.Menu>\n                                    {createdReview}\n                                </Dropdown.Menu>\n                            </Dropdown>\n\n                            <Menu.Item\n                                as='a'\n                                position={\"right\"}\n                                onClick = {(event)=> this.handleCreateTaskClick(event)}\n                                active={this.state.mode=== \"createTask\"}>\n\n                            Create task</Menu.Item>\n                        </Menu>\n                    </Grid.Row>\n                    <Grid.Row>\n                        {/*Call function to change the view for teacher */}\n                        {this.handleViewComponent()}\n                    </Grid.Row>\n                    </Grid.Column>\n\n                </Grid>\n            </div>\n\n        </div>\n\n    }\n}\n\n","/*Main app  that renders the student or teacher view based on login*/\n\nimport React from 'react';\nimport {Button, Form,Grid,Header,Segment,Message} from 'semantic-ui-react'\n//import students from './data/students.json';\nimport StudentView from './student/studentView';\nimport TeacherView from './teacher/teacherView';\nimport Cookies from 'universal-cookie';\n//import Cookies from 'js-cookie';\n//import submissionTasks from './data/createdSubmissionTasks';\n//import reviewTasks from './data/createdReviewTasks'\n//import Prism from \"prismjs\";\n\n\n\n\nexport default class App extends React.Component {\n    constructor(props) {\n        super(props);\n        const cookies = new Cookies();\n        const gotCookie =cookies.get('user');\n         console.log(\"cookies\",cookies.get('user'));\n        // const gotCookie = JSON.parse(Cookies.get('user'));\n        if(typeof cookies.get('user') !== \"undefined\"){\n            //console.log(\"kkkk\",\"cookies\",JSON.parse(Cookies.get('user')).role);\n            this.state = { netId: gotCookie.netId , role:gotCookie.role,firstName:gotCookie.firstName,\n                lastName:gotCookie.lastName};\n        }\n        else {\n            this.state = {netId: \"\", password: \"\", role: \"\", message: \"\"};\n        }\n    }\n\n    // function to handle change in input\n    handleChange(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n        this.setState({\n            [name]: value\n        });\n\n    }\n    // function to handle login button\n    login() {\n      const _this =this;\n        const loginDetails ={netId:this.state.netId,password:this.state.password}\n        fetch('/login',{\n            method:'POST',\n            headers:{\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n            body:JSON.stringify(loginDetails)\n        }).then(response => response.json())\n            .then(function(data) {\n                console.log (data);\n                // change role in state based on the user details\n                if(!data.netId || data.netId !== _this.state.netId ){\n                    _this.setState({netId: \"\" , password: \"\" ,message:data.message, firstName:\"\",lastName:\"\"})\n                }\n                else {\n                    if(data.role === \"instructor\"){\n                        _this.setState({role:data.role,firstName:data.firstName,lastName:data.lastName});\n                    }\n                    else if(data.role === \"student\"){\n                        _this.setState({role:data.role,firstName:data.firstName,lastName:data.lastName});\n                    }\n                    else{\n                        _this.setState({ role:\"none\"});\n                    }\n                }\n\n            });\n    }\n    // function to handle logout button\n    logout(){\n        console.log(\"clicked logout in app\");\n        const _this = this;\n        fetch('/logout', {\n            method:\"GET\" ,\n            headers:{\n                'Content-Type': \"application/json\",\n                'Accept': 'application/json'\n            }\n        }).then(function(response) {\n            console.log(\"logged out\");\n            _this.setState({netId:\"\", password:\"\", role:\"\", message:\"\"});\n        })\n    }\n\n    // Render the elements\n    render() {\n        console.log(\"state,\", this.state);\n        if(this.state.role === \"\") {\n            return <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\n                <Grid.Column style={{ maxWidth: 450 }}>\n                    <Header as='h2' color='blue' textAlign='center'>\n                         Log-in to your account\n                    </Header>\n                    <Form size='large'>\n                        <Segment stacked>\n                            <Form.Input\n                                fluid icon='user'\n                                iconPosition='left'\n                                placeholder='Net ID'\n                                name=\"netId\"\n                                value={this.state.netId}\n                                onChange={(event) => this.handleChange(event)}/>\n                            <Form.Input\n                                fluid\n                                icon=\"lock\"\n                                iconPosition=\"left\"\n                                placeholder=\"Password\"\n                                type=\"password\"\n                                name=\"password\"\n                                value={this.state.password}\n                                onChange={(event) => this.handleChange(event)}\n                            />\n\n                            <Button type =\"button\" color='blue' onClick={() => this.login()} fluid size='large'>\n                                Login\n                            </Button>\n                        </Segment>\n                    </Form>\n                    <Message>\n                        <Header as='h4' color='red'>\n                            {this.state.message}\n                        </Header>\n                        Having trouble ? Contact the Instructor\n                    </Message>\n                </Grid.Column>\n            </Grid>\n        }\n        // Display different components based on the role of user\n        else if(this.state.role === \"instructor\"){\n            return <TeacherView netId={this.state.netId} role={this.state.role}\n                                onlogoutClick={()=>this.logout()}/>\n        }\n\n        else if(this.state.role === \"student\"){\n            return <StudentView netId={this.state.netId} role={this.state.role}\n                                onlogoutClick={()=>this.logout()} firstName={this.state.firstName} lastName={this.state.lastName}\n            />\n        }\n\n        else if(this.state.role === \"none\"){\n            return <div>not authorized</div>\n        }\n    }\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './app'\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}